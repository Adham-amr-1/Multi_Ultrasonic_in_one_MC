
Multi_UltraSonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  000044b0  00004544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800182  00800182  00004666  2**0
                  ALLOC
  3 .stab         00003ca8  00000000  00000000  00004668  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001708  00000000  00000000  00008310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00009a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00009bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00009dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000c3fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000d8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000ebd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000edb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000f0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fad9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__vector_1>
       8:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__vector_18>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b9 20 	call	0x4172	; 0x4172 <main>
      8a:	0c 94 56 22 	jmp	0x44ac	; 0x44ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fa 21 	jmp	0x43f4	; 0x43f4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 16 22 	jmp	0x442c	; 0x442c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fa 21 	jmp	0x43f4	; 0x43f4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 16 22 	jmp	0x442c	; 0x442c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a e7       	ldi	r24, 0x7A	; 122
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f6 21 	jmp	0x43ec	; 0x43ec <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e7       	ldi	r22, 0x7A	; 122
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 12 22 	jmp	0x4424	; 0x4424 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fa 21 	jmp	0x43f4	; 0x43f4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 16 22 	jmp	0x442c	; 0x442c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fa 21 	jmp	0x43f4	; 0x43f4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 16 22 	jmp	0x442c	; 0x442c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fa 21 	jmp	0x43f4	; 0x43f4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 16 22 	jmp	0x442c	; 0x442c <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 13 22 	jmp	0x4426	; 0x4426 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 1a 22 	jmp	0x4434	; 0x4434 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 f6 21 	jmp	0x43ec	; 0x43ec <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 12 22 	jmp	0x4424	; 0x4424 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ee 57       	subi	r30, 0x7E	; 126
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <DIO_Set_Pin_Direction>:
/*
Controlling on One Pin
 */
/* Set Direction of pins { input ( 0 ) or Output ( 1 ) }  */
void DIO_Set_Pin_Direction(u8 PORT_NO,u8 PIN_NO,u8 PIN_DIRECTION)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	2d 97       	sbiw	r28, 0x0d	; 13
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	6a 83       	std	Y+2, r22	; 0x02
     f02:	4b 83       	std	Y+3, r20	; 0x03
	switch (PORT_NO)
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	3d 87       	std	Y+13, r19	; 0x0d
     f0c:	2c 87       	std	Y+12, r18	; 0x0c
     f0e:	8c 85       	ldd	r24, Y+12	; 0x0c
     f10:	9d 85       	ldd	r25, Y+13	; 0x0d
     f12:	84 34       	cpi	r24, 0x44	; 68
     f14:	91 05       	cpc	r25, r1
     f16:	09 f4       	brne	.+2      	; 0xf1a <DIO_Set_Pin_Direction+0x30>
     f18:	dd c0       	rjmp	.+442    	; 0x10d4 <DIO_Set_Pin_Direction+0x1ea>
     f1a:	2c 85       	ldd	r18, Y+12	; 0x0c
     f1c:	3d 85       	ldd	r19, Y+13	; 0x0d
     f1e:	25 34       	cpi	r18, 0x45	; 69
     f20:	31 05       	cpc	r19, r1
     f22:	94 f4       	brge	.+36     	; 0xf48 <DIO_Set_Pin_Direction+0x5e>
     f24:	8c 85       	ldd	r24, Y+12	; 0x0c
     f26:	9d 85       	ldd	r25, Y+13	; 0x0d
     f28:	82 34       	cpi	r24, 0x42	; 66
     f2a:	91 05       	cpc	r25, r1
     f2c:	09 f4       	brne	.+2      	; 0xf30 <DIO_Set_Pin_Direction+0x46>
     f2e:	62 c0       	rjmp	.+196    	; 0xff4 <DIO_Set_Pin_Direction+0x10a>
     f30:	2c 85       	ldd	r18, Y+12	; 0x0c
     f32:	3d 85       	ldd	r19, Y+13	; 0x0d
     f34:	23 34       	cpi	r18, 0x43	; 67
     f36:	31 05       	cpc	r19, r1
     f38:	0c f0       	brlt	.+2      	; 0xf3c <DIO_Set_Pin_Direction+0x52>
     f3a:	94 c0       	rjmp	.+296    	; 0x1064 <DIO_Set_Pin_Direction+0x17a>
     f3c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f3e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f40:	81 34       	cpi	r24, 0x41	; 65
     f42:	91 05       	cpc	r25, r1
     f44:	f9 f0       	breq	.+62     	; 0xf84 <DIO_Set_Pin_Direction+0x9a>
     f46:	fc c0       	rjmp	.+504    	; 0x1140 <DIO_Set_Pin_Direction+0x256>
     f48:	2c 85       	ldd	r18, Y+12	; 0x0c
     f4a:	3d 85       	ldd	r19, Y+13	; 0x0d
     f4c:	22 36       	cpi	r18, 0x62	; 98
     f4e:	31 05       	cpc	r19, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <DIO_Set_Pin_Direction+0x6a>
     f52:	50 c0       	rjmp	.+160    	; 0xff4 <DIO_Set_Pin_Direction+0x10a>
     f54:	8c 85       	ldd	r24, Y+12	; 0x0c
     f56:	9d 85       	ldd	r25, Y+13	; 0x0d
     f58:	83 36       	cpi	r24, 0x63	; 99
     f5a:	91 05       	cpc	r25, r1
     f5c:	34 f4       	brge	.+12     	; 0xf6a <DIO_Set_Pin_Direction+0x80>
     f5e:	2c 85       	ldd	r18, Y+12	; 0x0c
     f60:	3d 85       	ldd	r19, Y+13	; 0x0d
     f62:	21 36       	cpi	r18, 0x61	; 97
     f64:	31 05       	cpc	r19, r1
     f66:	71 f0       	breq	.+28     	; 0xf84 <DIO_Set_Pin_Direction+0x9a>
     f68:	eb c0       	rjmp	.+470    	; 0x1140 <DIO_Set_Pin_Direction+0x256>
     f6a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f6c:	9d 85       	ldd	r25, Y+13	; 0x0d
     f6e:	83 36       	cpi	r24, 0x63	; 99
     f70:	91 05       	cpc	r25, r1
     f72:	09 f4       	brne	.+2      	; 0xf76 <DIO_Set_Pin_Direction+0x8c>
     f74:	77 c0       	rjmp	.+238    	; 0x1064 <DIO_Set_Pin_Direction+0x17a>
     f76:	2c 85       	ldd	r18, Y+12	; 0x0c
     f78:	3d 85       	ldd	r19, Y+13	; 0x0d
     f7a:	24 36       	cpi	r18, 0x64	; 100
     f7c:	31 05       	cpc	r19, r1
     f7e:	09 f4       	brne	.+2      	; 0xf82 <DIO_Set_Pin_Direction+0x98>
     f80:	a9 c0       	rjmp	.+338    	; 0x10d4 <DIO_Set_Pin_Direction+0x1ea>
     f82:	de c0       	rjmp	.+444    	; 0x1140 <DIO_Set_Pin_Direction+0x256>
	{
	case 'A':
	case 'a':
		switch(PIN_DIRECTION)
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	3b 87       	std	Y+11, r19	; 0x0b
     f8c:	2a 87       	std	Y+10, r18	; 0x0a
     f8e:	8a 85       	ldd	r24, Y+10	; 0x0a
     f90:	9b 85       	ldd	r25, Y+11	; 0x0b
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	d1 f0       	breq	.+52     	; 0xfca <DIO_Set_Pin_Direction+0xe0>
     f96:	2a 85       	ldd	r18, Y+10	; 0x0a
     f98:	3b 85       	ldd	r19, Y+11	; 0x0b
     f9a:	21 30       	cpi	r18, 0x01	; 1
     f9c:	31 05       	cpc	r19, r1
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <DIO_Set_Pin_Direction+0xb8>
     fa0:	cf c0       	rjmp	.+414    	; 0x1140 <DIO_Set_Pin_Direction+0x256>
		{
		case OUTPUT:
			SET_BIT(DDRA,PIN_NO);
     fa2:	aa e3       	ldi	r26, 0x3A	; 58
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	ea e3       	ldi	r30, 0x3A	; 58
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_Set_Pin_Direction+0xd6>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_Set_Pin_Direction+0xd2>
     fc4:	84 2b       	or	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	bb c0       	rjmp	.+374    	; 0x1140 <DIO_Set_Pin_Direction+0x256>
			break;
		case INPUT:
			CLEAR_BIT(DDRA,PIN_NO);
     fca:	aa e3       	ldi	r26, 0x3A	; 58
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	ea e3       	ldi	r30, 0x3A	; 58
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_Set_Pin_Direction+0xfe>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_Set_Pin_Direction+0xfa>
     fec:	80 95       	com	r24
     fee:	84 23       	and	r24, r20
     ff0:	8c 93       	st	X, r24
     ff2:	a6 c0       	rjmp	.+332    	; 0x1140 <DIO_Set_Pin_Direction+0x256>
			break;
		}
		break;
	case 'B':
	case 'b':
		switch(PIN_DIRECTION)
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	39 87       	std	Y+9, r19	; 0x09
     ffc:	28 87       	std	Y+8, r18	; 0x08
     ffe:	88 85       	ldd	r24, Y+8	; 0x08
    1000:	99 85       	ldd	r25, Y+9	; 0x09
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	d1 f0       	breq	.+52     	; 0x103a <DIO_Set_Pin_Direction+0x150>
    1006:	28 85       	ldd	r18, Y+8	; 0x08
    1008:	39 85       	ldd	r19, Y+9	; 0x09
    100a:	21 30       	cpi	r18, 0x01	; 1
    100c:	31 05       	cpc	r19, r1
    100e:	09 f0       	breq	.+2      	; 0x1012 <DIO_Set_Pin_Direction+0x128>
    1010:	97 c0       	rjmp	.+302    	; 0x1140 <DIO_Set_Pin_Direction+0x256>
		{
		case OUTPUT:
			SET_BIT(DDRB,PIN_NO);
    1012:	a7 e3       	ldi	r26, 0x37	; 55
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e7 e3       	ldi	r30, 0x37	; 55
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_Set_Pin_Direction+0x146>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_Set_Pin_Direction+0x142>
    1034:	84 2b       	or	r24, r20
    1036:	8c 93       	st	X, r24
    1038:	83 c0       	rjmp	.+262    	; 0x1140 <DIO_Set_Pin_Direction+0x256>
			break;
		case INPUT:
			CLEAR_BIT(DDRB,PIN_NO);
    103a:	a7 e3       	ldi	r26, 0x37	; 55
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e7 e3       	ldi	r30, 0x37	; 55
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_Set_Pin_Direction+0x16e>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_Set_Pin_Direction+0x16a>
    105c:	80 95       	com	r24
    105e:	84 23       	and	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	6e c0       	rjmp	.+220    	; 0x1140 <DIO_Set_Pin_Direction+0x256>
			break;
		}
	break;
	case 'C':
	case 'c':
		switch(PIN_DIRECTION)
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	3f 83       	std	Y+7, r19	; 0x07
    106c:	2e 83       	std	Y+6, r18	; 0x06
    106e:	8e 81       	ldd	r24, Y+6	; 0x06
    1070:	9f 81       	ldd	r25, Y+7	; 0x07
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	d1 f0       	breq	.+52     	; 0x10aa <DIO_Set_Pin_Direction+0x1c0>
    1076:	2e 81       	ldd	r18, Y+6	; 0x06
    1078:	3f 81       	ldd	r19, Y+7	; 0x07
    107a:	21 30       	cpi	r18, 0x01	; 1
    107c:	31 05       	cpc	r19, r1
    107e:	09 f0       	breq	.+2      	; 0x1082 <DIO_Set_Pin_Direction+0x198>
    1080:	5f c0       	rjmp	.+190    	; 0x1140 <DIO_Set_Pin_Direction+0x256>
		{
		case OUTPUT:
			SET_BIT(DDRC,PIN_NO);
    1082:	a4 e3       	ldi	r26, 0x34	; 52
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e4 e3       	ldi	r30, 0x34	; 52
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_Set_Pin_Direction+0x1b6>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_Set_Pin_Direction+0x1b2>
    10a4:	84 2b       	or	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	4b c0       	rjmp	.+150    	; 0x1140 <DIO_Set_Pin_Direction+0x256>
			break;
		case INPUT:
			CLEAR_BIT(DDRC,PIN_NO);
    10aa:	a4 e3       	ldi	r26, 0x34	; 52
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e4 e3       	ldi	r30, 0x34	; 52
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_Set_Pin_Direction+0x1de>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_Set_Pin_Direction+0x1da>
    10cc:	80 95       	com	r24
    10ce:	84 23       	and	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	36 c0       	rjmp	.+108    	; 0x1140 <DIO_Set_Pin_Direction+0x256>
			break;
		}
		break;
		case 'D':
		case 'd':
			switch(PIN_DIRECTION)
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	3d 83       	std	Y+5, r19	; 0x05
    10dc:	2c 83       	std	Y+4, r18	; 0x04
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	9d 81       	ldd	r25, Y+5	; 0x05
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	c9 f0       	breq	.+50     	; 0x1118 <DIO_Set_Pin_Direction+0x22e>
    10e6:	2c 81       	ldd	r18, Y+4	; 0x04
    10e8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ea:	21 30       	cpi	r18, 0x01	; 1
    10ec:	31 05       	cpc	r19, r1
    10ee:	41 f5       	brne	.+80     	; 0x1140 <DIO_Set_Pin_Direction+0x256>
			{
			case OUTPUT:
				SET_BIT(DDRD,PIN_NO);
    10f0:	a1 e3       	ldi	r26, 0x31	; 49
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e1 e3       	ldi	r30, 0x31	; 49
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 2e       	mov	r0, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <DIO_Set_Pin_Direction+0x224>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	0a 94       	dec	r0
    1110:	e2 f7       	brpl	.-8      	; 0x110a <DIO_Set_Pin_Direction+0x220>
    1112:	84 2b       	or	r24, r20
    1114:	8c 93       	st	X, r24
    1116:	14 c0       	rjmp	.+40     	; 0x1140 <DIO_Set_Pin_Direction+0x256>
				break;
			case INPUT:
				CLEAR_BIT(DDRD,PIN_NO);
    1118:	a1 e3       	ldi	r26, 0x31	; 49
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e1 e3       	ldi	r30, 0x31	; 49
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 2e       	mov	r0, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_Set_Pin_Direction+0x24c>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <DIO_Set_Pin_Direction+0x248>
    113a:	80 95       	com	r24
    113c:	84 23       	and	r24, r20
    113e:	8c 93       	st	X, r24
			}
			break;
			default:
				break;
	}
}
    1140:	2d 96       	adiw	r28, 0x0d	; 13
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <DIO_Write_Pin>:
// If The Pin Is Output set it out { High ( 1 ) or Low ( 0 ) }
void DIO_Write_Pin(u8 PORT_NO,u8 PIN_NO,u8 OUTPUT_VALUE)
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	2d 97       	sbiw	r28, 0x0d	; 13
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	6a 83       	std	Y+2, r22	; 0x02
    116a:	4b 83       	std	Y+3, r20	; 0x03
	switch (PORT_NO)
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	3d 87       	std	Y+13, r19	; 0x0d
    1174:	2c 87       	std	Y+12, r18	; 0x0c
    1176:	8c 85       	ldd	r24, Y+12	; 0x0c
    1178:	9d 85       	ldd	r25, Y+13	; 0x0d
    117a:	84 34       	cpi	r24, 0x44	; 68
    117c:	91 05       	cpc	r25, r1
    117e:	09 f4       	brne	.+2      	; 0x1182 <DIO_Write_Pin+0x30>
    1180:	dd c0       	rjmp	.+442    	; 0x133c <DIO_Write_Pin+0x1ea>
    1182:	2c 85       	ldd	r18, Y+12	; 0x0c
    1184:	3d 85       	ldd	r19, Y+13	; 0x0d
    1186:	25 34       	cpi	r18, 0x45	; 69
    1188:	31 05       	cpc	r19, r1
    118a:	94 f4       	brge	.+36     	; 0x11b0 <DIO_Write_Pin+0x5e>
    118c:	8c 85       	ldd	r24, Y+12	; 0x0c
    118e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1190:	82 34       	cpi	r24, 0x42	; 66
    1192:	91 05       	cpc	r25, r1
    1194:	09 f4       	brne	.+2      	; 0x1198 <DIO_Write_Pin+0x46>
    1196:	62 c0       	rjmp	.+196    	; 0x125c <DIO_Write_Pin+0x10a>
    1198:	2c 85       	ldd	r18, Y+12	; 0x0c
    119a:	3d 85       	ldd	r19, Y+13	; 0x0d
    119c:	23 34       	cpi	r18, 0x43	; 67
    119e:	31 05       	cpc	r19, r1
    11a0:	0c f0       	brlt	.+2      	; 0x11a4 <DIO_Write_Pin+0x52>
    11a2:	94 c0       	rjmp	.+296    	; 0x12cc <DIO_Write_Pin+0x17a>
    11a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    11a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    11a8:	81 34       	cpi	r24, 0x41	; 65
    11aa:	91 05       	cpc	r25, r1
    11ac:	f9 f0       	breq	.+62     	; 0x11ec <DIO_Write_Pin+0x9a>
    11ae:	fc c0       	rjmp	.+504    	; 0x13a8 <DIO_Write_Pin+0x256>
    11b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    11b2:	3d 85       	ldd	r19, Y+13	; 0x0d
    11b4:	22 36       	cpi	r18, 0x62	; 98
    11b6:	31 05       	cpc	r19, r1
    11b8:	09 f4       	brne	.+2      	; 0x11bc <DIO_Write_Pin+0x6a>
    11ba:	50 c0       	rjmp	.+160    	; 0x125c <DIO_Write_Pin+0x10a>
    11bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    11be:	9d 85       	ldd	r25, Y+13	; 0x0d
    11c0:	83 36       	cpi	r24, 0x63	; 99
    11c2:	91 05       	cpc	r25, r1
    11c4:	34 f4       	brge	.+12     	; 0x11d2 <DIO_Write_Pin+0x80>
    11c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    11c8:	3d 85       	ldd	r19, Y+13	; 0x0d
    11ca:	21 36       	cpi	r18, 0x61	; 97
    11cc:	31 05       	cpc	r19, r1
    11ce:	71 f0       	breq	.+28     	; 0x11ec <DIO_Write_Pin+0x9a>
    11d0:	eb c0       	rjmp	.+470    	; 0x13a8 <DIO_Write_Pin+0x256>
    11d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    11d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    11d6:	83 36       	cpi	r24, 0x63	; 99
    11d8:	91 05       	cpc	r25, r1
    11da:	09 f4       	brne	.+2      	; 0x11de <DIO_Write_Pin+0x8c>
    11dc:	77 c0       	rjmp	.+238    	; 0x12cc <DIO_Write_Pin+0x17a>
    11de:	2c 85       	ldd	r18, Y+12	; 0x0c
    11e0:	3d 85       	ldd	r19, Y+13	; 0x0d
    11e2:	24 36       	cpi	r18, 0x64	; 100
    11e4:	31 05       	cpc	r19, r1
    11e6:	09 f4       	brne	.+2      	; 0x11ea <DIO_Write_Pin+0x98>
    11e8:	a9 c0       	rjmp	.+338    	; 0x133c <DIO_Write_Pin+0x1ea>
    11ea:	de c0       	rjmp	.+444    	; 0x13a8 <DIO_Write_Pin+0x256>
	{
	case 'A':
	case 'a':
		switch(OUTPUT_VALUE)
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	3b 87       	std	Y+11, r19	; 0x0b
    11f4:	2a 87       	std	Y+10, r18	; 0x0a
    11f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    11f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	d1 f0       	breq	.+52     	; 0x1232 <DIO_Write_Pin+0xe0>
    11fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    1200:	3b 85       	ldd	r19, Y+11	; 0x0b
    1202:	21 30       	cpi	r18, 0x01	; 1
    1204:	31 05       	cpc	r19, r1
    1206:	09 f0       	breq	.+2      	; 0x120a <DIO_Write_Pin+0xb8>
    1208:	cf c0       	rjmp	.+414    	; 0x13a8 <DIO_Write_Pin+0x256>
		{
		case HIGH:
			SET_BIT(PORTA,PIN_NO);
    120a:	ab e3       	ldi	r26, 0x3B	; 59
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	eb e3       	ldi	r30, 0x3B	; 59
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_Write_Pin+0xd6>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_Write_Pin+0xd2>
    122c:	84 2b       	or	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	bb c0       	rjmp	.+374    	; 0x13a8 <DIO_Write_Pin+0x256>
			break;
		case LOW:
			CLEAR_BIT(PORTA,PIN_NO);
    1232:	ab e3       	ldi	r26, 0x3B	; 59
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	eb e3       	ldi	r30, 0x3B	; 59
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_Write_Pin+0xfe>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_Write_Pin+0xfa>
    1254:	80 95       	com	r24
    1256:	84 23       	and	r24, r20
    1258:	8c 93       	st	X, r24
    125a:	a6 c0       	rjmp	.+332    	; 0x13a8 <DIO_Write_Pin+0x256>
			break;
		}
		break;
	case 'B':
	case 'b':
		switch(OUTPUT_VALUE)
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	39 87       	std	Y+9, r19	; 0x09
    1264:	28 87       	std	Y+8, r18	; 0x08
    1266:	88 85       	ldd	r24, Y+8	; 0x08
    1268:	99 85       	ldd	r25, Y+9	; 0x09
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	d1 f0       	breq	.+52     	; 0x12a2 <DIO_Write_Pin+0x150>
    126e:	28 85       	ldd	r18, Y+8	; 0x08
    1270:	39 85       	ldd	r19, Y+9	; 0x09
    1272:	21 30       	cpi	r18, 0x01	; 1
    1274:	31 05       	cpc	r19, r1
    1276:	09 f0       	breq	.+2      	; 0x127a <DIO_Write_Pin+0x128>
    1278:	97 c0       	rjmp	.+302    	; 0x13a8 <DIO_Write_Pin+0x256>
		{
		case HIGH:
			SET_BIT(PORTB,PIN_NO);
    127a:	a8 e3       	ldi	r26, 0x38	; 56
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e8 e3       	ldi	r30, 0x38	; 56
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_Write_Pin+0x146>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_Write_Pin+0x142>
    129c:	84 2b       	or	r24, r20
    129e:	8c 93       	st	X, r24
    12a0:	83 c0       	rjmp	.+262    	; 0x13a8 <DIO_Write_Pin+0x256>
			break;
		case LOW:
			CLEAR_BIT(PORTB,PIN_NO);
    12a2:	a8 e3       	ldi	r26, 0x38	; 56
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e8 e3       	ldi	r30, 0x38	; 56
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_Write_Pin+0x16e>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_Write_Pin+0x16a>
    12c4:	80 95       	com	r24
    12c6:	84 23       	and	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	6e c0       	rjmp	.+220    	; 0x13a8 <DIO_Write_Pin+0x256>
			break;
		}
		break;
	case 'C':
	case 'c':
		switch(OUTPUT_VALUE)
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	3f 83       	std	Y+7, r19	; 0x07
    12d4:	2e 83       	std	Y+6, r18	; 0x06
    12d6:	8e 81       	ldd	r24, Y+6	; 0x06
    12d8:	9f 81       	ldd	r25, Y+7	; 0x07
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	d1 f0       	breq	.+52     	; 0x1312 <DIO_Write_Pin+0x1c0>
    12de:	2e 81       	ldd	r18, Y+6	; 0x06
    12e0:	3f 81       	ldd	r19, Y+7	; 0x07
    12e2:	21 30       	cpi	r18, 0x01	; 1
    12e4:	31 05       	cpc	r19, r1
    12e6:	09 f0       	breq	.+2      	; 0x12ea <DIO_Write_Pin+0x198>
    12e8:	5f c0       	rjmp	.+190    	; 0x13a8 <DIO_Write_Pin+0x256>
		{
		case HIGH:
			SET_BIT(PORTC,PIN_NO);
    12ea:	a5 e3       	ldi	r26, 0x35	; 53
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e5 e3       	ldi	r30, 0x35	; 53
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_Write_Pin+0x1b6>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_Write_Pin+0x1b2>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	4b c0       	rjmp	.+150    	; 0x13a8 <DIO_Write_Pin+0x256>
			break;
		case LOW:
			CLEAR_BIT(PORTC,PIN_NO);
    1312:	a5 e3       	ldi	r26, 0x35	; 53
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e5 e3       	ldi	r30, 0x35	; 53
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_Write_Pin+0x1de>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_Write_Pin+0x1da>
    1334:	80 95       	com	r24
    1336:	84 23       	and	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	36 c0       	rjmp	.+108    	; 0x13a8 <DIO_Write_Pin+0x256>
			break;
		}
		break;
	case 'D':
	case 'd':
		switch(OUTPUT_VALUE)
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	3d 83       	std	Y+5, r19	; 0x05
    1344:	2c 83       	std	Y+4, r18	; 0x04
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	c9 f0       	breq	.+50     	; 0x1380 <DIO_Write_Pin+0x22e>
    134e:	2c 81       	ldd	r18, Y+4	; 0x04
    1350:	3d 81       	ldd	r19, Y+5	; 0x05
    1352:	21 30       	cpi	r18, 0x01	; 1
    1354:	31 05       	cpc	r19, r1
    1356:	41 f5       	brne	.+80     	; 0x13a8 <DIO_Write_Pin+0x256>
		{
		case HIGH:
			SET_BIT(PORTD,PIN_NO);
    1358:	a2 e3       	ldi	r26, 0x32	; 50
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e2 e3       	ldi	r30, 0x32	; 50
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_Write_Pin+0x224>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_Write_Pin+0x220>
    137a:	84 2b       	or	r24, r20
    137c:	8c 93       	st	X, r24
    137e:	14 c0       	rjmp	.+40     	; 0x13a8 <DIO_Write_Pin+0x256>
			break;
		case LOW:
			CLEAR_BIT(PORTD,PIN_NO);
    1380:	a2 e3       	ldi	r26, 0x32	; 50
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e2 e3       	ldi	r30, 0x32	; 50
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_Write_Pin+0x24c>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_Write_Pin+0x248>
    13a2:	80 95       	com	r24
    13a4:	84 23       	and	r24, r20
    13a6:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    13a8:	2d 96       	adiw	r28, 0x0d	; 13
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <DIO_TogglePin>:
// Change pin case from 1 to 0 and vice verse
void DIO_TogglePin(u8 PORT_NO,u8 PIN_NO)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <DIO_TogglePin+0x6>
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <DIO_TogglePin+0x8>
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	6a 83       	std	Y+2, r22	; 0x02
	switch (PORT_NO)
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	3c 83       	std	Y+4, r19	; 0x04
    13d2:	2b 83       	std	Y+3, r18	; 0x03
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	9c 81       	ldd	r25, Y+4	; 0x04
    13d8:	84 34       	cpi	r24, 0x44	; 68
    13da:	91 05       	cpc	r25, r1
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <DIO_TogglePin+0x26>
    13de:	6d c0       	rjmp	.+218    	; 0x14ba <DIO_TogglePin+0x100>
    13e0:	2b 81       	ldd	r18, Y+3	; 0x03
    13e2:	3c 81       	ldd	r19, Y+4	; 0x04
    13e4:	25 34       	cpi	r18, 0x45	; 69
    13e6:	31 05       	cpc	r19, r1
    13e8:	8c f4       	brge	.+34     	; 0x140c <DIO_TogglePin+0x52>
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	82 34       	cpi	r24, 0x42	; 66
    13f0:	91 05       	cpc	r25, r1
    13f2:	d9 f1       	breq	.+118    	; 0x146a <DIO_TogglePin+0xb0>
    13f4:	2b 81       	ldd	r18, Y+3	; 0x03
    13f6:	3c 81       	ldd	r19, Y+4	; 0x04
    13f8:	23 34       	cpi	r18, 0x43	; 67
    13fa:	31 05       	cpc	r19, r1
    13fc:	0c f0       	brlt	.+2      	; 0x1400 <DIO_TogglePin+0x46>
    13fe:	49 c0       	rjmp	.+146    	; 0x1492 <DIO_TogglePin+0xd8>
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	9c 81       	ldd	r25, Y+4	; 0x04
    1404:	81 34       	cpi	r24, 0x41	; 65
    1406:	91 05       	cpc	r25, r1
    1408:	e1 f0       	breq	.+56     	; 0x1442 <DIO_TogglePin+0x88>
    140a:	6a c0       	rjmp	.+212    	; 0x14e0 <DIO_TogglePin+0x126>
    140c:	2b 81       	ldd	r18, Y+3	; 0x03
    140e:	3c 81       	ldd	r19, Y+4	; 0x04
    1410:	22 36       	cpi	r18, 0x62	; 98
    1412:	31 05       	cpc	r19, r1
    1414:	51 f1       	breq	.+84     	; 0x146a <DIO_TogglePin+0xb0>
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	83 36       	cpi	r24, 0x63	; 99
    141c:	91 05       	cpc	r25, r1
    141e:	34 f4       	brge	.+12     	; 0x142c <DIO_TogglePin+0x72>
    1420:	2b 81       	ldd	r18, Y+3	; 0x03
    1422:	3c 81       	ldd	r19, Y+4	; 0x04
    1424:	21 36       	cpi	r18, 0x61	; 97
    1426:	31 05       	cpc	r19, r1
    1428:	61 f0       	breq	.+24     	; 0x1442 <DIO_TogglePin+0x88>
    142a:	5a c0       	rjmp	.+180    	; 0x14e0 <DIO_TogglePin+0x126>
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	83 36       	cpi	r24, 0x63	; 99
    1432:	91 05       	cpc	r25, r1
    1434:	71 f1       	breq	.+92     	; 0x1492 <DIO_TogglePin+0xd8>
    1436:	2b 81       	ldd	r18, Y+3	; 0x03
    1438:	3c 81       	ldd	r19, Y+4	; 0x04
    143a:	24 36       	cpi	r18, 0x64	; 100
    143c:	31 05       	cpc	r19, r1
    143e:	e9 f1       	breq	.+122    	; 0x14ba <DIO_TogglePin+0x100>
    1440:	4f c0       	rjmp	.+158    	; 0x14e0 <DIO_TogglePin+0x126>
	{
	case 'A':
	case 'a':
		TOGGLE_BIT(PORTA,PIN_NO);
    1442:	ab e3       	ldi	r26, 0x3B	; 59
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	eb e3       	ldi	r30, 0x3B	; 59
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_TogglePin+0xa6>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_TogglePin+0xa2>
    1464:	84 27       	eor	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	3b c0       	rjmp	.+118    	; 0x14e0 <DIO_TogglePin+0x126>
		break;
	case 'B':
	case 'b':
		TOGGLE_BIT(PORTB,PIN_NO);
    146a:	a8 e3       	ldi	r26, 0x38	; 56
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e8 e3       	ldi	r30, 0x38	; 56
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_TogglePin+0xce>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO_TogglePin+0xca>
    148c:	84 27       	eor	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	27 c0       	rjmp	.+78     	; 0x14e0 <DIO_TogglePin+0x126>
		break;
	case 'C':
	case 'c':
		TOGGLE_BIT(PORTC,PIN_NO);
    1492:	a5 e3       	ldi	r26, 0x35	; 53
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e5 e3       	ldi	r30, 0x35	; 53
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_TogglePin+0xf6>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <DIO_TogglePin+0xf2>
    14b4:	84 27       	eor	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	13 c0       	rjmp	.+38     	; 0x14e0 <DIO_TogglePin+0x126>
		break;
	case 'D':
	case 'd':
		TOGGLE_BIT(PORTD,PIN_NO);
    14ba:	a2 e3       	ldi	r26, 0x32	; 50
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e2 e3       	ldi	r30, 0x32	; 50
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <DIO_TogglePin+0x11e>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <DIO_TogglePin+0x11a>
    14dc:	84 27       	eor	r24, r20
    14de:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <DIO_u8ReadPin>:
// Check the I/P Device state
u8 DIO_u8ReadPin(u8 PORT_NO,u8 PIN_NO)
{
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <DIO_u8ReadPin+0x6>
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <DIO_u8ReadPin+0x8>
    14f6:	0f 92       	push	r0
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	8a 83       	std	Y+2, r24	; 0x02
    14fe:	6b 83       	std	Y+3, r22	; 0x03
	u8 RETURN_VALUE = ZERO;
    1500:	19 82       	std	Y+1, r1	; 0x01
	switch (PORT_NO)
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	3d 83       	std	Y+5, r19	; 0x05
    150a:	2c 83       	std	Y+4, r18	; 0x04
    150c:	4c 81       	ldd	r20, Y+4	; 0x04
    150e:	5d 81       	ldd	r21, Y+5	; 0x05
    1510:	44 34       	cpi	r20, 0x44	; 68
    1512:	51 05       	cpc	r21, r1
    1514:	09 f4       	brne	.+2      	; 0x1518 <DIO_u8ReadPin+0x2a>
    1516:	8e c0       	rjmp	.+284    	; 0x1634 <DIO_u8ReadPin+0x146>
    1518:	8c 81       	ldd	r24, Y+4	; 0x04
    151a:	9d 81       	ldd	r25, Y+5	; 0x05
    151c:	85 34       	cpi	r24, 0x45	; 69
    151e:	91 05       	cpc	r25, r1
    1520:	94 f4       	brge	.+36     	; 0x1546 <DIO_u8ReadPin+0x58>
    1522:	2c 81       	ldd	r18, Y+4	; 0x04
    1524:	3d 81       	ldd	r19, Y+5	; 0x05
    1526:	22 34       	cpi	r18, 0x42	; 66
    1528:	31 05       	cpc	r19, r1
    152a:	09 f4       	brne	.+2      	; 0x152e <DIO_u8ReadPin+0x40>
    152c:	47 c0       	rjmp	.+142    	; 0x15bc <DIO_u8ReadPin+0xce>
    152e:	4c 81       	ldd	r20, Y+4	; 0x04
    1530:	5d 81       	ldd	r21, Y+5	; 0x05
    1532:	43 34       	cpi	r20, 0x43	; 67
    1534:	51 05       	cpc	r21, r1
    1536:	0c f0       	brlt	.+2      	; 0x153a <DIO_u8ReadPin+0x4c>
    1538:	5f c0       	rjmp	.+190    	; 0x15f8 <DIO_u8ReadPin+0x10a>
    153a:	8c 81       	ldd	r24, Y+4	; 0x04
    153c:	9d 81       	ldd	r25, Y+5	; 0x05
    153e:	81 34       	cpi	r24, 0x41	; 65
    1540:	91 05       	cpc	r25, r1
    1542:	f1 f0       	breq	.+60     	; 0x1580 <DIO_u8ReadPin+0x92>
    1544:	95 c0       	rjmp	.+298    	; 0x1670 <DIO_u8ReadPin+0x182>
    1546:	2c 81       	ldd	r18, Y+4	; 0x04
    1548:	3d 81       	ldd	r19, Y+5	; 0x05
    154a:	22 36       	cpi	r18, 0x62	; 98
    154c:	31 05       	cpc	r19, r1
    154e:	b1 f1       	breq	.+108    	; 0x15bc <DIO_u8ReadPin+0xce>
    1550:	4c 81       	ldd	r20, Y+4	; 0x04
    1552:	5d 81       	ldd	r21, Y+5	; 0x05
    1554:	43 36       	cpi	r20, 0x63	; 99
    1556:	51 05       	cpc	r21, r1
    1558:	34 f4       	brge	.+12     	; 0x1566 <DIO_u8ReadPin+0x78>
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	9d 81       	ldd	r25, Y+5	; 0x05
    155e:	81 36       	cpi	r24, 0x61	; 97
    1560:	91 05       	cpc	r25, r1
    1562:	71 f0       	breq	.+28     	; 0x1580 <DIO_u8ReadPin+0x92>
    1564:	85 c0       	rjmp	.+266    	; 0x1670 <DIO_u8ReadPin+0x182>
    1566:	2c 81       	ldd	r18, Y+4	; 0x04
    1568:	3d 81       	ldd	r19, Y+5	; 0x05
    156a:	23 36       	cpi	r18, 0x63	; 99
    156c:	31 05       	cpc	r19, r1
    156e:	09 f4       	brne	.+2      	; 0x1572 <DIO_u8ReadPin+0x84>
    1570:	43 c0       	rjmp	.+134    	; 0x15f8 <DIO_u8ReadPin+0x10a>
    1572:	4c 81       	ldd	r20, Y+4	; 0x04
    1574:	5d 81       	ldd	r21, Y+5	; 0x05
    1576:	44 36       	cpi	r20, 0x64	; 100
    1578:	51 05       	cpc	r21, r1
    157a:	09 f4       	brne	.+2      	; 0x157e <DIO_u8ReadPin+0x90>
    157c:	5b c0       	rjmp	.+182    	; 0x1634 <DIO_u8ReadPin+0x146>
    157e:	78 c0       	rjmp	.+240    	; 0x1670 <DIO_u8ReadPin+0x182>
	{
	case 'A':
	case 'a':
		RETURN_VALUE = READ_BIT(PINA,PIN_NO);
    1580:	e9 e3       	ldi	r30, 0x39	; 57
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_u8ReadPin+0xac>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	2a 95       	dec	r18
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <DIO_u8ReadPin+0xa8>
    159e:	9a 01       	movw	r18, r20
    15a0:	28 23       	and	r18, r24
    15a2:	39 23       	and	r19, r25
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	88 2f       	mov	r24, r24
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	a9 01       	movw	r20, r18
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <DIO_u8ReadPin+0xc4>
    15ae:	55 95       	asr	r21
    15b0:	47 95       	ror	r20
    15b2:	8a 95       	dec	r24
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <DIO_u8ReadPin+0xc0>
    15b6:	ca 01       	movw	r24, r20
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	5c c0       	rjmp	.+184    	; 0x1674 <DIO_u8ReadPin+0x186>
		break;
	case 'B':
	case 'b':
		RETURN_VALUE = READ_BIT(PINB,PIN_NO);
    15bc:	e6 e3       	ldi	r30, 0x36	; 54
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_u8ReadPin+0xe8>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	2a 95       	dec	r18
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_u8ReadPin+0xe4>
    15da:	9a 01       	movw	r18, r20
    15dc:	28 23       	and	r18, r24
    15de:	39 23       	and	r19, r25
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	a9 01       	movw	r20, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <DIO_u8ReadPin+0x100>
    15ea:	55 95       	asr	r21
    15ec:	47 95       	ror	r20
    15ee:	8a 95       	dec	r24
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <DIO_u8ReadPin+0xfc>
    15f2:	ca 01       	movw	r24, r20
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	3e c0       	rjmp	.+124    	; 0x1674 <DIO_u8ReadPin+0x186>
		break;
	case 'C':
	case 'c':
		RETURN_VALUE = READ_BIT(PINC,PIN_NO);
    15f8:	e3 e3       	ldi	r30, 0x33	; 51
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	50 e0       	ldi	r21, 0x00	; 0
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <DIO_u8ReadPin+0x124>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	2a 95       	dec	r18
    1614:	e2 f7       	brpl	.-8      	; 0x160e <DIO_u8ReadPin+0x120>
    1616:	9a 01       	movw	r18, r20
    1618:	28 23       	and	r18, r24
    161a:	39 23       	and	r19, r25
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	88 2f       	mov	r24, r24
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a9 01       	movw	r20, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <DIO_u8ReadPin+0x13c>
    1626:	55 95       	asr	r21
    1628:	47 95       	ror	r20
    162a:	8a 95       	dec	r24
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <DIO_u8ReadPin+0x138>
    162e:	ca 01       	movw	r24, r20
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	20 c0       	rjmp	.+64     	; 0x1674 <DIO_u8ReadPin+0x186>
		break;
	case 'D':
	case 'd':
		RETURN_VALUE = READ_BIT(PIND,PIN_NO);
    1634:	e0 e3       	ldi	r30, 0x30	; 48
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	48 2f       	mov	r20, r24
    163c:	50 e0       	ldi	r21, 0x00	; 0
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 c0       	rjmp	.+4      	; 0x164e <DIO_u8ReadPin+0x160>
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	2a 95       	dec	r18
    1650:	e2 f7       	brpl	.-8      	; 0x164a <DIO_u8ReadPin+0x15c>
    1652:	9a 01       	movw	r18, r20
    1654:	28 23       	and	r18, r24
    1656:	39 23       	and	r19, r25
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	a9 01       	movw	r20, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <DIO_u8ReadPin+0x178>
    1662:	55 95       	asr	r21
    1664:	47 95       	ror	r20
    1666:	8a 95       	dec	r24
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <DIO_u8ReadPin+0x174>
    166a:	ca 01       	movw	r24, r20
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <DIO_u8ReadPin+0x186>
		break;
	default:
		RETURN_VALUE = ERROR;
    1670:	8f ef       	ldi	r24, 0xFF	; 255
    1672:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return RETURN_VALUE;
    1674:	89 81       	ldd	r24, Y+1	; 0x01
}
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <DIO_Set_Port_Direction>:
/*
Controlling on Full Port
 */
// Set All Port 
void DIO_Set_Port_Direction(u8 PORT_NO,u8 PIN_DIRECTION)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	00 d0       	rcall	.+0      	; 0x168c <DIO_Set_Port_Direction+0x6>
    168c:	00 d0       	rcall	.+0      	; 0x168e <DIO_Set_Port_Direction+0x8>
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORT_NO)
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	3c 83       	std	Y+4, r19	; 0x04
    169e:	2b 83       	std	Y+3, r18	; 0x03
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	9c 81       	ldd	r25, Y+4	; 0x04
    16a4:	84 34       	cpi	r24, 0x44	; 68
    16a6:	91 05       	cpc	r25, r1
    16a8:	09 f4       	brne	.+2      	; 0x16ac <DIO_Set_Port_Direction+0x26>
    16aa:	3f c0       	rjmp	.+126    	; 0x172a <DIO_Set_Port_Direction+0xa4>
    16ac:	2b 81       	ldd	r18, Y+3	; 0x03
    16ae:	3c 81       	ldd	r19, Y+4	; 0x04
    16b0:	25 34       	cpi	r18, 0x45	; 69
    16b2:	31 05       	cpc	r19, r1
    16b4:	84 f4       	brge	.+32     	; 0x16d6 <DIO_Set_Port_Direction+0x50>
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ba:	82 34       	cpi	r24, 0x42	; 66
    16bc:	91 05       	cpc	r25, r1
    16be:	59 f1       	breq	.+86     	; 0x1716 <DIO_Set_Port_Direction+0x90>
    16c0:	2b 81       	ldd	r18, Y+3	; 0x03
    16c2:	3c 81       	ldd	r19, Y+4	; 0x04
    16c4:	23 34       	cpi	r18, 0x43	; 67
    16c6:	31 05       	cpc	r19, r1
    16c8:	5c f5       	brge	.+86     	; 0x1720 <DIO_Set_Port_Direction+0x9a>
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	81 34       	cpi	r24, 0x41	; 65
    16d0:	91 05       	cpc	r25, r1
    16d2:	e1 f0       	breq	.+56     	; 0x170c <DIO_Set_Port_Direction+0x86>
    16d4:	2e c0       	rjmp	.+92     	; 0x1732 <DIO_Set_Port_Direction+0xac>
    16d6:	2b 81       	ldd	r18, Y+3	; 0x03
    16d8:	3c 81       	ldd	r19, Y+4	; 0x04
    16da:	22 36       	cpi	r18, 0x62	; 98
    16dc:	31 05       	cpc	r19, r1
    16de:	d9 f0       	breq	.+54     	; 0x1716 <DIO_Set_Port_Direction+0x90>
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	83 36       	cpi	r24, 0x63	; 99
    16e6:	91 05       	cpc	r25, r1
    16e8:	34 f4       	brge	.+12     	; 0x16f6 <DIO_Set_Port_Direction+0x70>
    16ea:	2b 81       	ldd	r18, Y+3	; 0x03
    16ec:	3c 81       	ldd	r19, Y+4	; 0x04
    16ee:	21 36       	cpi	r18, 0x61	; 97
    16f0:	31 05       	cpc	r19, r1
    16f2:	61 f0       	breq	.+24     	; 0x170c <DIO_Set_Port_Direction+0x86>
    16f4:	1e c0       	rjmp	.+60     	; 0x1732 <DIO_Set_Port_Direction+0xac>
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	83 36       	cpi	r24, 0x63	; 99
    16fc:	91 05       	cpc	r25, r1
    16fe:	81 f0       	breq	.+32     	; 0x1720 <DIO_Set_Port_Direction+0x9a>
    1700:	2b 81       	ldd	r18, Y+3	; 0x03
    1702:	3c 81       	ldd	r19, Y+4	; 0x04
    1704:	24 36       	cpi	r18, 0x64	; 100
    1706:	31 05       	cpc	r19, r1
    1708:	81 f0       	breq	.+32     	; 0x172a <DIO_Set_Port_Direction+0xa4>
    170a:	13 c0       	rjmp	.+38     	; 0x1732 <DIO_Set_Port_Direction+0xac>
	{
	case 'A':
	case 'a':
		DDRA = PIN_DIRECTION;
    170c:	ea e3       	ldi	r30, 0x3A	; 58
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	80 83       	st	Z, r24
    1714:	0e c0       	rjmp	.+28     	; 0x1732 <DIO_Set_Port_Direction+0xac>
		break;
	case 'B':
	case 'b':
		DDRB = PIN_DIRECTION;
    1716:	e7 e3       	ldi	r30, 0x37	; 55
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	80 83       	st	Z, r24
    171e:	09 c0       	rjmp	.+18     	; 0x1732 <DIO_Set_Port_Direction+0xac>
		break;
	case 'C':
	case 'c':
		DDRC = PIN_DIRECTION;
    1720:	e4 e3       	ldi	r30, 0x34	; 52
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	80 83       	st	Z, r24
    1728:	04 c0       	rjmp	.+8      	; 0x1732 <DIO_Set_Port_Direction+0xac>
		break;
	case 'D':
	case 'd':
		DDRD = PIN_DIRECTION;
    172a:	e1 e3       	ldi	r30, 0x31	; 49
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <DIO_WritePort>:
// Write on All Port
void DIO_WritePort(u8 PORT_NO,u8 OUTPUT_VALUE)
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	00 d0       	rcall	.+0      	; 0x1746 <DIO_WritePort+0x6>
    1746:	00 d0       	rcall	.+0      	; 0x1748 <DIO_WritePort+0x8>
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORT_NO)
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	3c 83       	std	Y+4, r19	; 0x04
    1758:	2b 83       	std	Y+3, r18	; 0x03
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	9c 81       	ldd	r25, Y+4	; 0x04
    175e:	84 34       	cpi	r24, 0x44	; 68
    1760:	91 05       	cpc	r25, r1
    1762:	09 f4       	brne	.+2      	; 0x1766 <DIO_WritePort+0x26>
    1764:	3f c0       	rjmp	.+126    	; 0x17e4 <DIO_WritePort+0xa4>
    1766:	2b 81       	ldd	r18, Y+3	; 0x03
    1768:	3c 81       	ldd	r19, Y+4	; 0x04
    176a:	25 34       	cpi	r18, 0x45	; 69
    176c:	31 05       	cpc	r19, r1
    176e:	84 f4       	brge	.+32     	; 0x1790 <DIO_WritePort+0x50>
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	9c 81       	ldd	r25, Y+4	; 0x04
    1774:	82 34       	cpi	r24, 0x42	; 66
    1776:	91 05       	cpc	r25, r1
    1778:	59 f1       	breq	.+86     	; 0x17d0 <DIO_WritePort+0x90>
    177a:	2b 81       	ldd	r18, Y+3	; 0x03
    177c:	3c 81       	ldd	r19, Y+4	; 0x04
    177e:	23 34       	cpi	r18, 0x43	; 67
    1780:	31 05       	cpc	r19, r1
    1782:	5c f5       	brge	.+86     	; 0x17da <DIO_WritePort+0x9a>
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	9c 81       	ldd	r25, Y+4	; 0x04
    1788:	81 34       	cpi	r24, 0x41	; 65
    178a:	91 05       	cpc	r25, r1
    178c:	e1 f0       	breq	.+56     	; 0x17c6 <DIO_WritePort+0x86>
    178e:	2e c0       	rjmp	.+92     	; 0x17ec <DIO_WritePort+0xac>
    1790:	2b 81       	ldd	r18, Y+3	; 0x03
    1792:	3c 81       	ldd	r19, Y+4	; 0x04
    1794:	22 36       	cpi	r18, 0x62	; 98
    1796:	31 05       	cpc	r19, r1
    1798:	d9 f0       	breq	.+54     	; 0x17d0 <DIO_WritePort+0x90>
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	83 36       	cpi	r24, 0x63	; 99
    17a0:	91 05       	cpc	r25, r1
    17a2:	34 f4       	brge	.+12     	; 0x17b0 <DIO_WritePort+0x70>
    17a4:	2b 81       	ldd	r18, Y+3	; 0x03
    17a6:	3c 81       	ldd	r19, Y+4	; 0x04
    17a8:	21 36       	cpi	r18, 0x61	; 97
    17aa:	31 05       	cpc	r19, r1
    17ac:	61 f0       	breq	.+24     	; 0x17c6 <DIO_WritePort+0x86>
    17ae:	1e c0       	rjmp	.+60     	; 0x17ec <DIO_WritePort+0xac>
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	83 36       	cpi	r24, 0x63	; 99
    17b6:	91 05       	cpc	r25, r1
    17b8:	81 f0       	breq	.+32     	; 0x17da <DIO_WritePort+0x9a>
    17ba:	2b 81       	ldd	r18, Y+3	; 0x03
    17bc:	3c 81       	ldd	r19, Y+4	; 0x04
    17be:	24 36       	cpi	r18, 0x64	; 100
    17c0:	31 05       	cpc	r19, r1
    17c2:	81 f0       	breq	.+32     	; 0x17e4 <DIO_WritePort+0xa4>
    17c4:	13 c0       	rjmp	.+38     	; 0x17ec <DIO_WritePort+0xac>
	{
	case 'A':
	case 'a':
		PORTA = OUTPUT_VALUE;
    17c6:	eb e3       	ldi	r30, 0x3B	; 59
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	80 83       	st	Z, r24
    17ce:	0e c0       	rjmp	.+28     	; 0x17ec <DIO_WritePort+0xac>
		break;
	case 'B':
	case 'b':
		PORTB = OUTPUT_VALUE;
    17d0:	e8 e3       	ldi	r30, 0x38	; 56
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	80 83       	st	Z, r24
    17d8:	09 c0       	rjmp	.+18     	; 0x17ec <DIO_WritePort+0xac>
		break;
	case 'C':
	case 'c':
		PORTC = OUTPUT_VALUE;
    17da:	e5 e3       	ldi	r30, 0x35	; 53
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	80 83       	st	Z, r24
    17e2:	04 c0       	rjmp	.+8      	; 0x17ec <DIO_WritePort+0xac>
		break;
	case 'D':
	case 'd':
		PORTD = OUTPUT_VALUE;
    17e4:	e2 e3       	ldi	r30, 0x32	; 50
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <DIO_ReadPort>:
// Read Status of The Port
u8 DIO_ReadPort(u8 PORT_NO)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <DIO_ReadPort+0x6>
    1800:	00 d0       	rcall	.+0      	; 0x1802 <DIO_ReadPort+0x8>
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	8a 83       	std	Y+2, r24	; 0x02
	u8 RETURN_VALUE = ZERO;
    1808:	19 82       	std	Y+1, r1	; 0x01
	switch(PORT_NO){
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	3c 83       	std	Y+4, r19	; 0x04
    1812:	2b 83       	std	Y+3, r18	; 0x03
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	84 34       	cpi	r24, 0x44	; 68
    181a:	91 05       	cpc	r25, r1
    181c:	09 f4       	brne	.+2      	; 0x1820 <DIO_ReadPort+0x26>
    181e:	3f c0       	rjmp	.+126    	; 0x189e <DIO_ReadPort+0xa4>
    1820:	2b 81       	ldd	r18, Y+3	; 0x03
    1822:	3c 81       	ldd	r19, Y+4	; 0x04
    1824:	25 34       	cpi	r18, 0x45	; 69
    1826:	31 05       	cpc	r19, r1
    1828:	84 f4       	brge	.+32     	; 0x184a <DIO_ReadPort+0x50>
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	9c 81       	ldd	r25, Y+4	; 0x04
    182e:	82 34       	cpi	r24, 0x42	; 66
    1830:	91 05       	cpc	r25, r1
    1832:	59 f1       	breq	.+86     	; 0x188a <DIO_ReadPort+0x90>
    1834:	2b 81       	ldd	r18, Y+3	; 0x03
    1836:	3c 81       	ldd	r19, Y+4	; 0x04
    1838:	23 34       	cpi	r18, 0x43	; 67
    183a:	31 05       	cpc	r19, r1
    183c:	5c f5       	brge	.+86     	; 0x1894 <DIO_ReadPort+0x9a>
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	81 34       	cpi	r24, 0x41	; 65
    1844:	91 05       	cpc	r25, r1
    1846:	e1 f0       	breq	.+56     	; 0x1880 <DIO_ReadPort+0x86>
    1848:	2f c0       	rjmp	.+94     	; 0x18a8 <DIO_ReadPort+0xae>
    184a:	2b 81       	ldd	r18, Y+3	; 0x03
    184c:	3c 81       	ldd	r19, Y+4	; 0x04
    184e:	22 36       	cpi	r18, 0x62	; 98
    1850:	31 05       	cpc	r19, r1
    1852:	d9 f0       	breq	.+54     	; 0x188a <DIO_ReadPort+0x90>
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	83 36       	cpi	r24, 0x63	; 99
    185a:	91 05       	cpc	r25, r1
    185c:	34 f4       	brge	.+12     	; 0x186a <DIO_ReadPort+0x70>
    185e:	2b 81       	ldd	r18, Y+3	; 0x03
    1860:	3c 81       	ldd	r19, Y+4	; 0x04
    1862:	21 36       	cpi	r18, 0x61	; 97
    1864:	31 05       	cpc	r19, r1
    1866:	61 f0       	breq	.+24     	; 0x1880 <DIO_ReadPort+0x86>
    1868:	1f c0       	rjmp	.+62     	; 0x18a8 <DIO_ReadPort+0xae>
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	9c 81       	ldd	r25, Y+4	; 0x04
    186e:	83 36       	cpi	r24, 0x63	; 99
    1870:	91 05       	cpc	r25, r1
    1872:	81 f0       	breq	.+32     	; 0x1894 <DIO_ReadPort+0x9a>
    1874:	2b 81       	ldd	r18, Y+3	; 0x03
    1876:	3c 81       	ldd	r19, Y+4	; 0x04
    1878:	24 36       	cpi	r18, 0x64	; 100
    187a:	31 05       	cpc	r19, r1
    187c:	81 f0       	breq	.+32     	; 0x189e <DIO_ReadPort+0xa4>
    187e:	14 c0       	rjmp	.+40     	; 0x18a8 <DIO_ReadPort+0xae>
	case 'A':
	case 'a':
		RETURN_VALUE = PINA;
    1880:	e9 e3       	ldi	r30, 0x39	; 57
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	11 c0       	rjmp	.+34     	; 0x18ac <DIO_ReadPort+0xb2>
		break;
	case 'B':
	case 'b':
		RETURN_VALUE = PINB;
    188a:	e6 e3       	ldi	r30, 0x36	; 54
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	0c c0       	rjmp	.+24     	; 0x18ac <DIO_ReadPort+0xb2>
		break;
	case 'C':
	case 'c':
		RETURN_VALUE = PINC;
    1894:	e3 e3       	ldi	r30, 0x33	; 51
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	07 c0       	rjmp	.+14     	; 0x18ac <DIO_ReadPort+0xb2>
		break;
	case 'D':
	case 'd':
		RETURN_VALUE = PIND;
    189e:	e0 e3       	ldi	r30, 0x30	; 48
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <DIO_ReadPort+0xb2>
		break;
	default:
		RETURN_VALUE = ERROR;
    18a8:	8f ef       	ldi	r24, 0xFF	; 255
    18aa:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return RETURN_VALUE;
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <DIO_TogglePort>:
// Toggle Ports 1 to 0 and vice versa
void DIO_TogglePort(u8 PORT_NO)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <DIO_TogglePort+0x6>
    18c2:	0f 92       	push	r0
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	89 83       	std	Y+1, r24	; 0x01
	switch(PORT_NO)
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	3b 83       	std	Y+3, r19	; 0x03
    18d2:	2a 83       	std	Y+2, r18	; 0x02
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	9b 81       	ldd	r25, Y+3	; 0x03
    18d8:	84 34       	cpi	r24, 0x44	; 68
    18da:	91 05       	cpc	r25, r1
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <DIO_TogglePort+0x24>
    18de:	57 c0       	rjmp	.+174    	; 0x198e <DIO_TogglePort+0xd2>
    18e0:	ea 81       	ldd	r30, Y+2	; 0x02
    18e2:	fb 81       	ldd	r31, Y+3	; 0x03
    18e4:	e5 34       	cpi	r30, 0x45	; 69
    18e6:	f1 05       	cpc	r31, r1
    18e8:	84 f4       	brge	.+32     	; 0x190a <DIO_TogglePort+0x4e>
    18ea:	2a 81       	ldd	r18, Y+2	; 0x02
    18ec:	3b 81       	ldd	r19, Y+3	; 0x03
    18ee:	22 34       	cpi	r18, 0x42	; 66
    18f0:	31 05       	cpc	r19, r1
    18f2:	99 f1       	breq	.+102    	; 0x195a <DIO_TogglePort+0x9e>
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	9b 81       	ldd	r25, Y+3	; 0x03
    18f8:	83 34       	cpi	r24, 0x43	; 67
    18fa:	91 05       	cpc	r25, r1
    18fc:	dc f5       	brge	.+118    	; 0x1974 <DIO_TogglePort+0xb8>
    18fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1900:	fb 81       	ldd	r31, Y+3	; 0x03
    1902:	e1 34       	cpi	r30, 0x41	; 65
    1904:	f1 05       	cpc	r31, r1
    1906:	e1 f0       	breq	.+56     	; 0x1940 <DIO_TogglePort+0x84>
    1908:	4e c0       	rjmp	.+156    	; 0x19a6 <DIO_TogglePort+0xea>
    190a:	2a 81       	ldd	r18, Y+2	; 0x02
    190c:	3b 81       	ldd	r19, Y+3	; 0x03
    190e:	22 36       	cpi	r18, 0x62	; 98
    1910:	31 05       	cpc	r19, r1
    1912:	19 f1       	breq	.+70     	; 0x195a <DIO_TogglePort+0x9e>
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	9b 81       	ldd	r25, Y+3	; 0x03
    1918:	83 36       	cpi	r24, 0x63	; 99
    191a:	91 05       	cpc	r25, r1
    191c:	34 f4       	brge	.+12     	; 0x192a <DIO_TogglePort+0x6e>
    191e:	ea 81       	ldd	r30, Y+2	; 0x02
    1920:	fb 81       	ldd	r31, Y+3	; 0x03
    1922:	e1 36       	cpi	r30, 0x61	; 97
    1924:	f1 05       	cpc	r31, r1
    1926:	61 f0       	breq	.+24     	; 0x1940 <DIO_TogglePort+0x84>
    1928:	3e c0       	rjmp	.+124    	; 0x19a6 <DIO_TogglePort+0xea>
    192a:	2a 81       	ldd	r18, Y+2	; 0x02
    192c:	3b 81       	ldd	r19, Y+3	; 0x03
    192e:	23 36       	cpi	r18, 0x63	; 99
    1930:	31 05       	cpc	r19, r1
    1932:	01 f1       	breq	.+64     	; 0x1974 <DIO_TogglePort+0xb8>
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	9b 81       	ldd	r25, Y+3	; 0x03
    1938:	84 36       	cpi	r24, 0x64	; 100
    193a:	91 05       	cpc	r25, r1
    193c:	41 f1       	breq	.+80     	; 0x198e <DIO_TogglePort+0xd2>
    193e:	33 c0       	rjmp	.+102    	; 0x19a6 <DIO_TogglePort+0xea>
	{
	case 'A':
	case 'a':
		PORTA = TOGGLE_PORT(PORTA);
    1940:	2b e3       	ldi	r18, 0x3B	; 59
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	ab e3       	ldi	r26, 0x3B	; 59
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	eb e3       	ldi	r30, 0x3B	; 59
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	80 95       	com	r24
    1950:	8c 93       	st	X, r24
    1952:	8c 91       	ld	r24, X
    1954:	f9 01       	movw	r30, r18
    1956:	80 83       	st	Z, r24
    1958:	26 c0       	rjmp	.+76     	; 0x19a6 <DIO_TogglePort+0xea>
		break;
	case 'B':
	case 'b':
		PORTB = TOGGLE_PORT(PORTB);
    195a:	28 e3       	ldi	r18, 0x38	; 56
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	a8 e3       	ldi	r26, 0x38	; 56
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e8 e3       	ldi	r30, 0x38	; 56
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	80 95       	com	r24
    196a:	8c 93       	st	X, r24
    196c:	8c 91       	ld	r24, X
    196e:	f9 01       	movw	r30, r18
    1970:	80 83       	st	Z, r24
    1972:	19 c0       	rjmp	.+50     	; 0x19a6 <DIO_TogglePort+0xea>
		break;
	case 'C':
	case 'c':
		PORTC = TOGGLE_PORT(PORTC);
    1974:	25 e3       	ldi	r18, 0x35	; 53
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	a5 e3       	ldi	r26, 0x35	; 53
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e5 e3       	ldi	r30, 0x35	; 53
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	80 95       	com	r24
    1984:	8c 93       	st	X, r24
    1986:	8c 91       	ld	r24, X
    1988:	f9 01       	movw	r30, r18
    198a:	80 83       	st	Z, r24
    198c:	0c c0       	rjmp	.+24     	; 0x19a6 <DIO_TogglePort+0xea>
		break;
	case 'D':
	case 'd':
		PORTD = TOGGLE_PORT(PORTD);
    198e:	22 e3       	ldi	r18, 0x32	; 50
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	a2 e3       	ldi	r26, 0x32	; 50
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e2 e3       	ldi	r30, 0x32	; 50
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	80 95       	com	r24
    199e:	8c 93       	st	X, r24
    19a0:	8c 91       	ld	r24, X
    19a2:	f9 01       	movw	r30, r18
    19a4:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <DIO_PullUp_Active>:
// Active The Pull Up Resistance
void DIO_PullUp_Active(u8 PORT_NO,u8 PIN_NO)
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <DIO_PullUp_Active+0x6>
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <DIO_PullUp_Active+0x8>
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	89 83       	std	Y+1, r24	; 0x01
    19c0:	6a 83       	std	Y+2, r22	; 0x02
	switch (PORT_NO)
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	3c 83       	std	Y+4, r19	; 0x04
    19ca:	2b 83       	std	Y+3, r18	; 0x03
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	84 34       	cpi	r24, 0x44	; 68
    19d2:	91 05       	cpc	r25, r1
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <DIO_PullUp_Active+0x26>
    19d6:	6d c0       	rjmp	.+218    	; 0x1ab2 <DIO_PullUp_Active+0x100>
    19d8:	2b 81       	ldd	r18, Y+3	; 0x03
    19da:	3c 81       	ldd	r19, Y+4	; 0x04
    19dc:	25 34       	cpi	r18, 0x45	; 69
    19de:	31 05       	cpc	r19, r1
    19e0:	8c f4       	brge	.+34     	; 0x1a04 <DIO_PullUp_Active+0x52>
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	9c 81       	ldd	r25, Y+4	; 0x04
    19e6:	82 34       	cpi	r24, 0x42	; 66
    19e8:	91 05       	cpc	r25, r1
    19ea:	d9 f1       	breq	.+118    	; 0x1a62 <DIO_PullUp_Active+0xb0>
    19ec:	2b 81       	ldd	r18, Y+3	; 0x03
    19ee:	3c 81       	ldd	r19, Y+4	; 0x04
    19f0:	23 34       	cpi	r18, 0x43	; 67
    19f2:	31 05       	cpc	r19, r1
    19f4:	0c f0       	brlt	.+2      	; 0x19f8 <DIO_PullUp_Active+0x46>
    19f6:	49 c0       	rjmp	.+146    	; 0x1a8a <DIO_PullUp_Active+0xd8>
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	81 34       	cpi	r24, 0x41	; 65
    19fe:	91 05       	cpc	r25, r1
    1a00:	e1 f0       	breq	.+56     	; 0x1a3a <DIO_PullUp_Active+0x88>
    1a02:	6a c0       	rjmp	.+212    	; 0x1ad8 <DIO_PullUp_Active+0x126>
    1a04:	2b 81       	ldd	r18, Y+3	; 0x03
    1a06:	3c 81       	ldd	r19, Y+4	; 0x04
    1a08:	22 36       	cpi	r18, 0x62	; 98
    1a0a:	31 05       	cpc	r19, r1
    1a0c:	51 f1       	breq	.+84     	; 0x1a62 <DIO_PullUp_Active+0xb0>
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	9c 81       	ldd	r25, Y+4	; 0x04
    1a12:	83 36       	cpi	r24, 0x63	; 99
    1a14:	91 05       	cpc	r25, r1
    1a16:	34 f4       	brge	.+12     	; 0x1a24 <DIO_PullUp_Active+0x72>
    1a18:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a1c:	21 36       	cpi	r18, 0x61	; 97
    1a1e:	31 05       	cpc	r19, r1
    1a20:	61 f0       	breq	.+24     	; 0x1a3a <DIO_PullUp_Active+0x88>
    1a22:	5a c0       	rjmp	.+180    	; 0x1ad8 <DIO_PullUp_Active+0x126>
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	9c 81       	ldd	r25, Y+4	; 0x04
    1a28:	83 36       	cpi	r24, 0x63	; 99
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	71 f1       	breq	.+92     	; 0x1a8a <DIO_PullUp_Active+0xd8>
    1a2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a30:	3c 81       	ldd	r19, Y+4	; 0x04
    1a32:	24 36       	cpi	r18, 0x64	; 100
    1a34:	31 05       	cpc	r19, r1
    1a36:	e9 f1       	breq	.+122    	; 0x1ab2 <DIO_PullUp_Active+0x100>
    1a38:	4f c0       	rjmp	.+158    	; 0x1ad8 <DIO_PullUp_Active+0x126>
	{
	case 'A':
	case 'a':
		SET_BIT(PORTA,PIN_NO); // Set Pin High
    1a3a:	ab e3       	ldi	r26, 0x3B	; 59
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	eb e3       	ldi	r30, 0x3B	; 59
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	48 2f       	mov	r20, r24
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	02 2e       	mov	r0, r18
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <DIO_PullUp_Active+0xa6>
    1a54:	88 0f       	add	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	0a 94       	dec	r0
    1a5a:	e2 f7       	brpl	.-8      	; 0x1a54 <DIO_PullUp_Active+0xa2>
    1a5c:	84 2b       	or	r24, r20
    1a5e:	8c 93       	st	X, r24
    1a60:	3b c0       	rjmp	.+118    	; 0x1ad8 <DIO_PullUp_Active+0x126>
		break;
	case 'B':
	case 'b':
		SET_BIT(PORTB,PIN_NO); // Set Pin High
    1a62:	a8 e3       	ldi	r26, 0x38	; 56
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e8 e3       	ldi	r30, 0x38	; 56
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	48 2f       	mov	r20, r24
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	02 2e       	mov	r0, r18
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <DIO_PullUp_Active+0xce>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	0a 94       	dec	r0
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <DIO_PullUp_Active+0xca>
    1a84:	84 2b       	or	r24, r20
    1a86:	8c 93       	st	X, r24
    1a88:	27 c0       	rjmp	.+78     	; 0x1ad8 <DIO_PullUp_Active+0x126>
		break;
	case 'C':
	case 'c':
		SET_BIT(PORTC,PIN_NO); // Set Pin High
    1a8a:	a5 e3       	ldi	r26, 0x35	; 53
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e5 e3       	ldi	r30, 0x35	; 53
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	48 2f       	mov	r20, r24
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	02 2e       	mov	r0, r18
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <DIO_PullUp_Active+0xf6>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	0a 94       	dec	r0
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <DIO_PullUp_Active+0xf2>
    1aac:	84 2b       	or	r24, r20
    1aae:	8c 93       	st	X, r24
    1ab0:	13 c0       	rjmp	.+38     	; 0x1ad8 <DIO_PullUp_Active+0x126>
		break;
	case 'D':
	case 'd':
		SET_BIT(PORTD,PIN_NO); // Set Pin High
    1ab2:	a2 e3       	ldi	r26, 0x32	; 50
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e2 e3       	ldi	r30, 0x32	; 50
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	48 2f       	mov	r20, r24
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	02 2e       	mov	r0, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <DIO_PullUp_Active+0x11e>
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	0a 94       	dec	r0
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <DIO_PullUp_Active+0x11a>
    1ad4:	84 2b       	or	r24, r20
    1ad6:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <DIO_PullUp_DeActive>:
// DeActive The Pull Up Resistance
void DIO_PullUp_DeActive(u8 PORT_NO,u8 PIN_NO)
{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	00 d0       	rcall	.+0      	; 0x1aec <DIO_PullUp_DeActive+0x6>
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <DIO_PullUp_DeActive+0x8>
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	6a 83       	std	Y+2, r22	; 0x02
	switch (PORT_NO){
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	3c 83       	std	Y+4, r19	; 0x04
    1afe:	2b 83       	std	Y+3, r18	; 0x03
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	9c 81       	ldd	r25, Y+4	; 0x04
    1b04:	84 34       	cpi	r24, 0x44	; 68
    1b06:	91 05       	cpc	r25, r1
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <DIO_PullUp_DeActive+0x26>
    1b0a:	71 c0       	rjmp	.+226    	; 0x1bee <DIO_PullUp_DeActive+0x108>
    1b0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b10:	25 34       	cpi	r18, 0x45	; 69
    1b12:	31 05       	cpc	r19, r1
    1b14:	8c f4       	brge	.+34     	; 0x1b38 <DIO_PullUp_DeActive+0x52>
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1a:	82 34       	cpi	r24, 0x42	; 66
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	e9 f1       	breq	.+122    	; 0x1b9a <DIO_PullUp_DeActive+0xb4>
    1b20:	2b 81       	ldd	r18, Y+3	; 0x03
    1b22:	3c 81       	ldd	r19, Y+4	; 0x04
    1b24:	23 34       	cpi	r18, 0x43	; 67
    1b26:	31 05       	cpc	r19, r1
    1b28:	0c f0       	brlt	.+2      	; 0x1b2c <DIO_PullUp_DeActive+0x46>
    1b2a:	4c c0       	rjmp	.+152    	; 0x1bc4 <DIO_PullUp_DeActive+0xde>
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b30:	81 34       	cpi	r24, 0x41	; 65
    1b32:	91 05       	cpc	r25, r1
    1b34:	e9 f0       	breq	.+58     	; 0x1b70 <DIO_PullUp_DeActive+0x8a>
    1b36:	6f c0       	rjmp	.+222    	; 0x1c16 <DIO_PullUp_DeActive+0x130>
    1b38:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3c:	22 36       	cpi	r18, 0x62	; 98
    1b3e:	31 05       	cpc	r19, r1
    1b40:	61 f1       	breq	.+88     	; 0x1b9a <DIO_PullUp_DeActive+0xb4>
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	83 36       	cpi	r24, 0x63	; 99
    1b48:	91 05       	cpc	r25, r1
    1b4a:	34 f4       	brge	.+12     	; 0x1b58 <DIO_PullUp_DeActive+0x72>
    1b4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b50:	21 36       	cpi	r18, 0x61	; 97
    1b52:	31 05       	cpc	r19, r1
    1b54:	69 f0       	breq	.+26     	; 0x1b70 <DIO_PullUp_DeActive+0x8a>
    1b56:	5f c0       	rjmp	.+190    	; 0x1c16 <DIO_PullUp_DeActive+0x130>
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	83 36       	cpi	r24, 0x63	; 99
    1b5e:	91 05       	cpc	r25, r1
    1b60:	89 f1       	breq	.+98     	; 0x1bc4 <DIO_PullUp_DeActive+0xde>
    1b62:	2b 81       	ldd	r18, Y+3	; 0x03
    1b64:	3c 81       	ldd	r19, Y+4	; 0x04
    1b66:	24 36       	cpi	r18, 0x64	; 100
    1b68:	31 05       	cpc	r19, r1
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <DIO_PullUp_DeActive+0x88>
    1b6c:	40 c0       	rjmp	.+128    	; 0x1bee <DIO_PullUp_DeActive+0x108>
    1b6e:	53 c0       	rjmp	.+166    	; 0x1c16 <DIO_PullUp_DeActive+0x130>
	case 'A':
	case 'a':
		CLEAR_BIT(PORTA,PIN_NO); // Set Pin Low
    1b70:	ab e3       	ldi	r26, 0x3B	; 59
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	eb e3       	ldi	r30, 0x3B	; 59
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	48 2f       	mov	r20, r24
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	02 2e       	mov	r0, r18
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <DIO_PullUp_DeActive+0xa8>
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	0a 94       	dec	r0
    1b90:	e2 f7       	brpl	.-8      	; 0x1b8a <DIO_PullUp_DeActive+0xa4>
    1b92:	80 95       	com	r24
    1b94:	84 23       	and	r24, r20
    1b96:	8c 93       	st	X, r24
    1b98:	3e c0       	rjmp	.+124    	; 0x1c16 <DIO_PullUp_DeActive+0x130>
		break;
	case 'B':
	case 'b':
		CLEAR_BIT(PORTB,PIN_NO); // Set Pin Low
    1b9a:	a8 e3       	ldi	r26, 0x38	; 56
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e8 e3       	ldi	r30, 0x38	; 56
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	48 2f       	mov	r20, r24
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	02 2e       	mov	r0, r18
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <DIO_PullUp_DeActive+0xd2>
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	0a 94       	dec	r0
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <DIO_PullUp_DeActive+0xce>
    1bbc:	80 95       	com	r24
    1bbe:	84 23       	and	r24, r20
    1bc0:	8c 93       	st	X, r24
    1bc2:	29 c0       	rjmp	.+82     	; 0x1c16 <DIO_PullUp_DeActive+0x130>
		break;
	case 'C':
	case 'c':
		CLEAR_BIT(PORTC,PIN_NO); // Set Pin Low
    1bc4:	a5 e3       	ldi	r26, 0x35	; 53
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e5 e3       	ldi	r30, 0x35	; 53
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	48 2f       	mov	r20, r24
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	02 2e       	mov	r0, r18
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <DIO_PullUp_DeActive+0xfc>
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	0a 94       	dec	r0
    1be4:	e2 f7       	brpl	.-8      	; 0x1bde <DIO_PullUp_DeActive+0xf8>
    1be6:	80 95       	com	r24
    1be8:	84 23       	and	r24, r20
    1bea:	8c 93       	st	X, r24
    1bec:	14 c0       	rjmp	.+40     	; 0x1c16 <DIO_PullUp_DeActive+0x130>
		break;
	case 'D':
	case 'd':
		CLEAR_BIT(PORTD,PIN_NO); // Set Pin Low
    1bee:	a2 e3       	ldi	r26, 0x32	; 50
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e2 e3       	ldi	r30, 0x32	; 50
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 2e       	mov	r0, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <DIO_PullUp_DeActive+0x126>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	0a 94       	dec	r0
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <DIO_PullUp_DeActive+0x122>
    1c10:	80 95       	com	r24
    1c12:	84 23       	and	r24, r20
    1c14:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <DIO_Write_Low_Nibble>:
// Write on Bits from 0 to 3
void DIO_Write_Low_Nibble(u8 PORT_NO,u8 LOW_NIBBLE_VALUE)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <DIO_Write_Low_Nibble+0x6>
    1c2a:	00 d0       	rcall	.+0      	; 0x1c2c <DIO_Write_Low_Nibble+0x8>
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	89 83       	std	Y+1, r24	; 0x01
    1c32:	6a 83       	std	Y+2, r22	; 0x02
	LOW_NIBBLE_VALUE&=0x0f;
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	8f 70       	andi	r24, 0x0F	; 15
    1c38:	8a 83       	std	Y+2, r24	; 0x02
	switch (PORT_NO)
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	3c 83       	std	Y+4, r19	; 0x04
    1c42:	2b 83       	std	Y+3, r18	; 0x03
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	84 34       	cpi	r24, 0x44	; 68
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <DIO_Write_Low_Nibble+0x2c>
    1c4e:	61 c0       	rjmp	.+194    	; 0x1d12 <DIO_Write_Low_Nibble+0xee>
    1c50:	2b 81       	ldd	r18, Y+3	; 0x03
    1c52:	3c 81       	ldd	r19, Y+4	; 0x04
    1c54:	25 34       	cpi	r18, 0x45	; 69
    1c56:	31 05       	cpc	r19, r1
    1c58:	8c f4       	brge	.+34     	; 0x1c7c <DIO_Write_Low_Nibble+0x58>
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	82 34       	cpi	r24, 0x42	; 66
    1c60:	91 05       	cpc	r25, r1
    1c62:	b9 f1       	breq	.+110    	; 0x1cd2 <DIO_Write_Low_Nibble+0xae>
    1c64:	2b 81       	ldd	r18, Y+3	; 0x03
    1c66:	3c 81       	ldd	r19, Y+4	; 0x04
    1c68:	23 34       	cpi	r18, 0x43	; 67
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	0c f0       	brlt	.+2      	; 0x1c70 <DIO_Write_Low_Nibble+0x4c>
    1c6e:	41 c0       	rjmp	.+130    	; 0x1cf2 <DIO_Write_Low_Nibble+0xce>
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	9c 81       	ldd	r25, Y+4	; 0x04
    1c74:	81 34       	cpi	r24, 0x41	; 65
    1c76:	91 05       	cpc	r25, r1
    1c78:	e1 f0       	breq	.+56     	; 0x1cb2 <DIO_Write_Low_Nibble+0x8e>
    1c7a:	5a c0       	rjmp	.+180    	; 0x1d30 <DIO_Write_Low_Nibble+0x10c>
    1c7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c80:	22 36       	cpi	r18, 0x62	; 98
    1c82:	31 05       	cpc	r19, r1
    1c84:	31 f1       	breq	.+76     	; 0x1cd2 <DIO_Write_Low_Nibble+0xae>
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8a:	83 36       	cpi	r24, 0x63	; 99
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	34 f4       	brge	.+12     	; 0x1c9c <DIO_Write_Low_Nibble+0x78>
    1c90:	2b 81       	ldd	r18, Y+3	; 0x03
    1c92:	3c 81       	ldd	r19, Y+4	; 0x04
    1c94:	21 36       	cpi	r18, 0x61	; 97
    1c96:	31 05       	cpc	r19, r1
    1c98:	61 f0       	breq	.+24     	; 0x1cb2 <DIO_Write_Low_Nibble+0x8e>
    1c9a:	4a c0       	rjmp	.+148    	; 0x1d30 <DIO_Write_Low_Nibble+0x10c>
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca0:	83 36       	cpi	r24, 0x63	; 99
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	31 f1       	breq	.+76     	; 0x1cf2 <DIO_Write_Low_Nibble+0xce>
    1ca6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca8:	3c 81       	ldd	r19, Y+4	; 0x04
    1caa:	24 36       	cpi	r18, 0x64	; 100
    1cac:	31 05       	cpc	r19, r1
    1cae:	89 f1       	breq	.+98     	; 0x1d12 <DIO_Write_Low_Nibble+0xee>
    1cb0:	3f c0       	rjmp	.+126    	; 0x1d30 <DIO_Write_Low_Nibble+0x10c>
	{
	case 'A':
	case 'a':
		PORTA&=0xf0;
    1cb2:	ab e3       	ldi	r26, 0x3B	; 59
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	eb e3       	ldi	r30, 0x3B	; 59
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	80 7f       	andi	r24, 0xF0	; 240
    1cbe:	8c 93       	st	X, r24
		PORTA|=LOW_NIBBLE_VALUE;
    1cc0:	ab e3       	ldi	r26, 0x3B	; 59
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	eb e3       	ldi	r30, 0x3B	; 59
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	90 81       	ld	r25, Z
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	89 2b       	or	r24, r25
    1cce:	8c 93       	st	X, r24
    1cd0:	2f c0       	rjmp	.+94     	; 0x1d30 <DIO_Write_Low_Nibble+0x10c>
		break;
	case 'B':
	case 'b':
		PORTB&=0xf0;
    1cd2:	a8 e3       	ldi	r26, 0x38	; 56
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e8 e3       	ldi	r30, 0x38	; 56
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	80 7f       	andi	r24, 0xF0	; 240
    1cde:	8c 93       	st	X, r24
		PORTB|=LOW_NIBBLE_VALUE;
    1ce0:	a8 e3       	ldi	r26, 0x38	; 56
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e8 e3       	ldi	r30, 0x38	; 56
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	90 81       	ld	r25, Z
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	89 2b       	or	r24, r25
    1cee:	8c 93       	st	X, r24
    1cf0:	1f c0       	rjmp	.+62     	; 0x1d30 <DIO_Write_Low_Nibble+0x10c>
		break;
	case 'C':
	case 'c':
		PORTC&=0xf0;
    1cf2:	a5 e3       	ldi	r26, 0x35	; 53
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e5 e3       	ldi	r30, 0x35	; 53
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	80 7f       	andi	r24, 0xF0	; 240
    1cfe:	8c 93       	st	X, r24
		PORTC|=LOW_NIBBLE_VALUE;
    1d00:	a5 e3       	ldi	r26, 0x35	; 53
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e5 e3       	ldi	r30, 0x35	; 53
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	90 81       	ld	r25, Z
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	89 2b       	or	r24, r25
    1d0e:	8c 93       	st	X, r24
    1d10:	0f c0       	rjmp	.+30     	; 0x1d30 <DIO_Write_Low_Nibble+0x10c>
		break;
	case 'D':
	case 'd':
		PORTD&=0xf0;
    1d12:	a2 e3       	ldi	r26, 0x32	; 50
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e2 e3       	ldi	r30, 0x32	; 50
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	80 7f       	andi	r24, 0xF0	; 240
    1d1e:	8c 93       	st	X, r24
		PORTD|=LOW_NIBBLE_VALUE;
    1d20:	a2 e3       	ldi	r26, 0x32	; 50
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e2 e3       	ldi	r30, 0x32	; 50
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	90 81       	ld	r25, Z
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	89 2b       	or	r24, r25
    1d2e:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <DIO_Write_High_Nibble>:
// Write on Bits from 4 to 7
void DIO_Write_High_Nibble(u8 PORT_NO,u8 HIGH_NIBBLE_VALUE)
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <DIO_Write_High_Nibble+0x6>
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <DIO_Write_High_Nibble+0x8>
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	6a 83       	std	Y+2, r22	; 0x02
	HIGH_NIBBLE_VALUE<<=FOUR;
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	82 95       	swap	r24
    1d52:	80 7f       	andi	r24, 0xF0	; 240
    1d54:	8a 83       	std	Y+2, r24	; 0x02
	switch (PORT_NO)
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	3c 83       	std	Y+4, r19	; 0x04
    1d5e:	2b 83       	std	Y+3, r18	; 0x03
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	9c 81       	ldd	r25, Y+4	; 0x04
    1d64:	84 34       	cpi	r24, 0x44	; 68
    1d66:	91 05       	cpc	r25, r1
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <DIO_Write_High_Nibble+0x2e>
    1d6a:	61 c0       	rjmp	.+194    	; 0x1e2e <DIO_Write_High_Nibble+0xf0>
    1d6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d70:	25 34       	cpi	r18, 0x45	; 69
    1d72:	31 05       	cpc	r19, r1
    1d74:	8c f4       	brge	.+34     	; 0x1d98 <DIO_Write_High_Nibble+0x5a>
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	82 34       	cpi	r24, 0x42	; 66
    1d7c:	91 05       	cpc	r25, r1
    1d7e:	b9 f1       	breq	.+110    	; 0x1dee <DIO_Write_High_Nibble+0xb0>
    1d80:	2b 81       	ldd	r18, Y+3	; 0x03
    1d82:	3c 81       	ldd	r19, Y+4	; 0x04
    1d84:	23 34       	cpi	r18, 0x43	; 67
    1d86:	31 05       	cpc	r19, r1
    1d88:	0c f0       	brlt	.+2      	; 0x1d8c <DIO_Write_High_Nibble+0x4e>
    1d8a:	41 c0       	rjmp	.+130    	; 0x1e0e <DIO_Write_High_Nibble+0xd0>
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d90:	81 34       	cpi	r24, 0x41	; 65
    1d92:	91 05       	cpc	r25, r1
    1d94:	e1 f0       	breq	.+56     	; 0x1dce <DIO_Write_High_Nibble+0x90>
    1d96:	5a c0       	rjmp	.+180    	; 0x1e4c <DIO_Write_High_Nibble+0x10e>
    1d98:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9c:	22 36       	cpi	r18, 0x62	; 98
    1d9e:	31 05       	cpc	r19, r1
    1da0:	31 f1       	breq	.+76     	; 0x1dee <DIO_Write_High_Nibble+0xb0>
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	83 36       	cpi	r24, 0x63	; 99
    1da8:	91 05       	cpc	r25, r1
    1daa:	34 f4       	brge	.+12     	; 0x1db8 <DIO_Write_High_Nibble+0x7a>
    1dac:	2b 81       	ldd	r18, Y+3	; 0x03
    1dae:	3c 81       	ldd	r19, Y+4	; 0x04
    1db0:	21 36       	cpi	r18, 0x61	; 97
    1db2:	31 05       	cpc	r19, r1
    1db4:	61 f0       	breq	.+24     	; 0x1dce <DIO_Write_High_Nibble+0x90>
    1db6:	4a c0       	rjmp	.+148    	; 0x1e4c <DIO_Write_High_Nibble+0x10e>
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbc:	83 36       	cpi	r24, 0x63	; 99
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	31 f1       	breq	.+76     	; 0x1e0e <DIO_Write_High_Nibble+0xd0>
    1dc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc6:	24 36       	cpi	r18, 0x64	; 100
    1dc8:	31 05       	cpc	r19, r1
    1dca:	89 f1       	breq	.+98     	; 0x1e2e <DIO_Write_High_Nibble+0xf0>
    1dcc:	3f c0       	rjmp	.+126    	; 0x1e4c <DIO_Write_High_Nibble+0x10e>
	{
	case 'A':
	case 'a':
		PORTA&=0x0f;
    1dce:	ab e3       	ldi	r26, 0x3B	; 59
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	eb e3       	ldi	r30, 0x3B	; 59
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	8f 70       	andi	r24, 0x0F	; 15
    1dda:	8c 93       	st	X, r24
		PORTA|=HIGH_NIBBLE_VALUE;
    1ddc:	ab e3       	ldi	r26, 0x3B	; 59
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	eb e3       	ldi	r30, 0x3B	; 59
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	90 81       	ld	r25, Z
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	89 2b       	or	r24, r25
    1dea:	8c 93       	st	X, r24
    1dec:	2f c0       	rjmp	.+94     	; 0x1e4c <DIO_Write_High_Nibble+0x10e>
		break;
	case 'B':
	case 'b':
		PORTB&=0x0f;
    1dee:	a8 e3       	ldi	r26, 0x38	; 56
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e8 e3       	ldi	r30, 0x38	; 56
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	8f 70       	andi	r24, 0x0F	; 15
    1dfa:	8c 93       	st	X, r24
		PORTB|=HIGH_NIBBLE_VALUE;
    1dfc:	a8 e3       	ldi	r26, 0x38	; 56
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e8 e3       	ldi	r30, 0x38	; 56
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	90 81       	ld	r25, Z
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	89 2b       	or	r24, r25
    1e0a:	8c 93       	st	X, r24
    1e0c:	1f c0       	rjmp	.+62     	; 0x1e4c <DIO_Write_High_Nibble+0x10e>
		break;
	case 'C':
	case 'c':
		PORTC&=0x0f;
    1e0e:	a5 e3       	ldi	r26, 0x35	; 53
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e5 e3       	ldi	r30, 0x35	; 53
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	8f 70       	andi	r24, 0x0F	; 15
    1e1a:	8c 93       	st	X, r24
		PORTC|=HIGH_NIBBLE_VALUE;
    1e1c:	a5 e3       	ldi	r26, 0x35	; 53
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e5 e3       	ldi	r30, 0x35	; 53
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	90 81       	ld	r25, Z
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	89 2b       	or	r24, r25
    1e2a:	8c 93       	st	X, r24
    1e2c:	0f c0       	rjmp	.+30     	; 0x1e4c <DIO_Write_High_Nibble+0x10e>
		break;
	case 'D':
	case 'd':
		PORTD&=0x0f;
    1e2e:	a2 e3       	ldi	r26, 0x32	; 50
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e2 e3       	ldi	r30, 0x32	; 50
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	8f 70       	andi	r24, 0x0F	; 15
    1e3a:	8c 93       	st	X, r24
		PORTD|=HIGH_NIBBLE_VALUE;
    1e3c:	a2 e3       	ldi	r26, 0x32	; 50
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e2 e3       	ldi	r30, 0x32	; 50
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	90 81       	ld	r25, Z
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	89 2b       	or	r24, r25
    1e4a:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <DIO_Set_High_Nibble_Direction>:

void DIO_Set_High_Nibble_Direction(u8 PORT_NO,u8 HIGH_NIBBLE_DIRECTION)
{ // dir = 1 -> output , dir = 0 -> input
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <DIO_Set_High_Nibble_Direction+0x6>
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	6a 83       	std	Y+2, r22	; 0x02
	DIO_Set_Pin_Direction(PORT_NO,4,HIGH_NIBBLE_DIRECTION);
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	64 e0       	ldi	r22, 0x04	; 4
    1e6c:	4a 81       	ldd	r20, Y+2	; 0x02
    1e6e:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(PORT_NO,5,HIGH_NIBBLE_DIRECTION);
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	65 e0       	ldi	r22, 0x05	; 5
    1e76:	4a 81       	ldd	r20, Y+2	; 0x02
    1e78:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(PORT_NO,6,HIGH_NIBBLE_DIRECTION);
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	66 e0       	ldi	r22, 0x06	; 6
    1e80:	4a 81       	ldd	r20, Y+2	; 0x02
    1e82:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(PORT_NO,7,HIGH_NIBBLE_DIRECTION);
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	67 e0       	ldi	r22, 0x07	; 7
    1e8a:	4a 81       	ldd	r20, Y+2	; 0x02
    1e8c:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
}
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <DIO_Set_Low_Nibble_Direction>:
void DIO_Set_Low_Nibble_Direction(u8 PORT_NO,u8 LOW_NIBBLE_DIRECTION)
{ // dir = 1 -> output , dir = 0 -> input
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <DIO_Set_Low_Nibble_Direction+0x6>
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_Set_Pin_Direction(PORT_NO,0,LOW_NIBBLE_DIRECTION);
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	4a 81       	ldd	r20, Y+2	; 0x02
    1eae:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(PORT_NO,1,LOW_NIBBLE_DIRECTION);
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	61 e0       	ldi	r22, 0x01	; 1
    1eb6:	4a 81       	ldd	r20, Y+2	; 0x02
    1eb8:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(PORT_NO,2,LOW_NIBBLE_DIRECTION);
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	62 e0       	ldi	r22, 0x02	; 2
    1ec0:	4a 81       	ldd	r20, Y+2	; 0x02
    1ec2:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(PORT_NO,3,LOW_NIBBLE_DIRECTION);
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	63 e0       	ldi	r22, 0x03	; 3
    1eca:	4a 81       	ldd	r20, Y+2	; 0x02
    1ecc:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
}
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <Set_Global_Interrupt>:
#include "External_Interrupt.h"

/* Enable Global Interrupt */

void Set_Global_Interrupt()
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I_BIT); // Enable Interrupt
    1ee2:	af e5       	ldi	r26, 0x5F	; 95
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	ef e5       	ldi	r30, 0x5F	; 95
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	80 68       	ori	r24, 0x80	; 128
    1eee:	8c 93       	st	X, r24
}
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <Clear_Global_Interrupt>:

/* Disable Global Interrupt */

void Clear_Global_Interrupt()
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,I_BIT); // Disable Interrupt
    1efe:	af e5       	ldi	r26, 0x5F	; 95
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	ef e5       	ldi	r30, 0x5F	; 95
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	8f 77       	andi	r24, 0x7F	; 127
    1f0a:	8c 93       	st	X, r24
}
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <INT0_INIT>:

/* Initialize External INT0 */

void INT0_INIT(u8 SENSING_MODE)
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	0f 92       	push	r0
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_2,INPUT);
    1f1e:	84 e4       	ldi	r24, 0x44	; 68
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	62 e0       	ldi	r22, 0x02	; 2
    1f24:	70 e0       	ldi	r23, 0x00	; 0
    1f26:	40 e0       	ldi	r20, 0x00	; 0
    1f28:	50 e0       	ldi	r21, 0x00	; 0
    1f2a:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	MCUCR |= SENSING_MODE; // Set the pin to sense the interrupt as there's 4 ways to sense
    1f2e:	a5 e5       	ldi	r26, 0x55	; 85
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e5 e5       	ldi	r30, 0x55	; 85
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	90 81       	ld	r25, Z
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	89 2b       	or	r24, r25
    1f3c:	8c 93       	st	X, r24
	SET_BIT(GICR,INT0); // Enable the INT0 To Interrupt the MC  ( 6 Is the location of it in GICR ) ( Open The Data Sheet )
    1f3e:	ab e5       	ldi	r26, 0x5B	; 91
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	eb e5       	ldi	r30, 0x5B	; 91
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	80 64       	ori	r24, 0x40	; 64
    1f4a:	8c 93       	st	X, r24
}
    1f4c:	0f 90       	pop	r0
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <INT1_INIT>:

/* Initialize External INT1 */

void INT1_INIT(u8 SENSING_MODE)
{
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	0f 92       	push	r0
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_3,INPUT); // Set Pin As Input to sense the interrupt
    1f60:	84 e4       	ldi	r24, 0x44	; 68
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	63 e0       	ldi	r22, 0x03	; 3
    1f66:	70 e0       	ldi	r23, 0x00	; 0
    1f68:	40 e0       	ldi	r20, 0x00	; 0
    1f6a:	50 e0       	ldi	r21, 0x00	; 0
    1f6c:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	MCUCR |= (SENSING_MODE<<TWO); // Set the pin to sense the interrupt as there's 4 ways to sense
    1f70:	a5 e5       	ldi	r26, 0x55	; 85
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e5 e5       	ldi	r30, 0x55	; 85
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	82 2b       	or	r24, r18
    1f8c:	8c 93       	st	X, r24
	SET_BIT(GICR,INT1); // Enable the INT1 To Interrupt the MC ( 7 Is the location of it in GICR ) ( Open The Data Sheet )
    1f8e:	ab e5       	ldi	r26, 0x5B	; 91
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	eb e5       	ldi	r30, 0x5B	; 91
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	80 68       	ori	r24, 0x80	; 128
    1f9a:	8c 93       	st	X, r24
}
    1f9c:	0f 90       	pop	r0
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <INT2_INIT>:

/* Initialize External INT2 */

void INT2_INIT(u8 SENSING_MODE)
{
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	0f 92       	push	r0
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_B,PIN_NO_2,INPUT); // Set Pin As Input to sense the interrupt
    1fb0:	82 e4       	ldi	r24, 0x42	; 66
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	62 e0       	ldi	r22, 0x02	; 2
    1fb6:	70 e0       	ldi	r23, 0x00	; 0
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	if(SENSING_MODE == RISE_EDGE){
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	83 30       	cpi	r24, 0x03	; 3
    1fc4:	39 f4       	brne	.+14     	; 0x1fd4 <INT2_INIT+0x30>
		SET_BIT(MCUCSR,SIX); // Set The Sense of interrupt as Rising edge
    1fc6:	a4 e5       	ldi	r26, 0x54	; 84
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e4 e5       	ldi	r30, 0x54	; 84
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	80 64       	ori	r24, 0x40	; 64
    1fd2:	8c 93       	st	X, r24
	}
	if(SENSING_MODE == FALLING_EDGE){
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	82 30       	cpi	r24, 0x02	; 2
    1fd8:	39 f4       	brne	.+14     	; 0x1fe8 <INT2_INIT+0x44>
		CLEAR_BIT(MCUCSR,SIX); // Set The Sense of interrupt as Falling edge
    1fda:	a4 e5       	ldi	r26, 0x54	; 84
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e4 e5       	ldi	r30, 0x54	; 84
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	8f 7b       	andi	r24, 0xBF	; 191
    1fe6:	8c 93       	st	X, r24
	}
	SET_BIT(GICR,INT2); // Enable the INT2 To Interrupt the MC ( 5 Is the location of it in GICR ) ( Open The Data Sheet )
    1fe8:	ab e5       	ldi	r26, 0x5B	; 91
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	eb e5       	ldi	r30, 0x5B	; 91
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	80 62       	ori	r24, 0x20	; 32
    1ff4:	8c 93       	st	X, r24
}
    1ff6:	0f 90       	pop	r0
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <CheckIRQ0>:

/* Extra Function */
/* Check Interrupt Request of INT0 */ /* I Can Read It from Watching Window In Proteus */ 

u8 CheckIRQ0()
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
	return READ_BIT(GIFR,INTF0);
    2006:	ea e5       	ldi	r30, 0x5A	; 90
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	88 2f       	mov	r24, r24
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	80 74       	andi	r24, 0x40	; 64
    2012:	90 70       	andi	r25, 0x00	; 0
    2014:	08 2e       	mov	r0, r24
    2016:	89 2f       	mov	r24, r25
    2018:	00 0c       	add	r0, r0
    201a:	88 1f       	adc	r24, r24
    201c:	99 0b       	sbc	r25, r25
    201e:	00 0c       	add	r0, r0
    2020:	88 1f       	adc	r24, r24
    2022:	99 1f       	adc	r25, r25
}
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <CheckIRQ1>:

/* Check Interrupt Request of INT1 */

u8 CheckIRQ1()
{
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
	return READ_BIT(GIFR,INTF1);
    2032:	ea e5       	ldi	r30, 0x5A	; 90
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	88 1f       	adc	r24, r24
    203a:	88 27       	eor	r24, r24
    203c:	88 1f       	adc	r24, r24
}
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <CheckIRQ2>:

/* Check Interrupt Request of INT2 */

u8 CheckIRQ2()
{
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
	return READ_BIT(GIFR,INTF2);
    204c:	ea e5       	ldi	r30, 0x5A	; 90
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	88 2f       	mov	r24, r24
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	80 72       	andi	r24, 0x20	; 32
    2058:	90 70       	andi	r25, 0x00	; 0
    205a:	95 95       	asr	r25
    205c:	87 95       	ror	r24
    205e:	95 95       	asr	r25
    2060:	87 95       	ror	r24
    2062:	95 95       	asr	r25
    2064:	87 95       	ror	r24
    2066:	95 95       	asr	r25
    2068:	87 95       	ror	r24
    206a:	95 95       	asr	r25
    206c:	87 95       	ror	r24
}
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <SET_ENINT0>:
/* Needed Functions For Applying the Nested Interrupt */

/* Set the INT0 Enable bit */

void SET_ENINT0()
{
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,INT0);
    207c:	ab e5       	ldi	r26, 0x5B	; 91
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	eb e5       	ldi	r30, 0x5B	; 91
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	80 64       	ori	r24, 0x40	; 64
    2088:	8c 93       	st	X, r24
}
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <SET_ENINT1>:

/* Set the INT1 Enable bit */

void SET_ENINT1()
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,INT1);
    2098:	ab e5       	ldi	r26, 0x5B	; 91
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	eb e5       	ldi	r30, 0x5B	; 91
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	80 68       	ori	r24, 0x80	; 128
    20a4:	8c 93       	st	X, r24
}
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <SET_ENABLE_INT2>:

/* Set the INT2 Enable bit */

void SET_ENABLE_INT2()
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,INT2);
    20b4:	ab e5       	ldi	r26, 0x5B	; 91
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	eb e5       	ldi	r30, 0x5B	; 91
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	80 62       	ori	r24, 0x20	; 32
    20c0:	8c 93       	st	X, r24
}
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <Clear_ENABLE_INT0>:

/* Clear the INT0 Enable bit */

void Clear_ENABLE_INT0()
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR,INT0);
    20d0:	ab e5       	ldi	r26, 0x5B	; 91
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	eb e5       	ldi	r30, 0x5B	; 91
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	8f 7b       	andi	r24, 0xBF	; 191
    20dc:	8c 93       	st	X, r24
}
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <Clear_ENABLE_INT1>:

/* Clear the INT1 Enable bit */

void Clear_ENABLE_INT1()
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR,INT1);
    20ec:	ab e5       	ldi	r26, 0x5B	; 91
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	eb e5       	ldi	r30, 0x5B	; 91
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	8f 77       	andi	r24, 0x7F	; 127
    20f8:	8c 93       	st	X, r24
}
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <Clear_ENABLE_INT2>:

/* Clear the INT2 Enable bit */

void Clear_ENABLE_INT2()
{
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR,INT2);
    2108:	ab e5       	ldi	r26, 0x5B	; 91
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	eb e5       	ldi	r30, 0x5B	; 91
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	8f 7d       	andi	r24, 0xDF	; 223
    2114:	8c 93       	st	X, r24
}
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <__vector_1>:
/***************************************/
ISR(INT0_vect)
{
    211c:	1f 92       	push	r1
    211e:	0f 92       	push	r0
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	0f 92       	push	r0
    2124:	11 24       	eor	r1, r1
    2126:	2f 93       	push	r18
    2128:	3f 93       	push	r19
    212a:	4f 93       	push	r20
    212c:	5f 93       	push	r21
    212e:	6f 93       	push	r22
    2130:	7f 93       	push	r23
    2132:	8f 93       	push	r24
    2134:	9f 93       	push	r25
    2136:	af 93       	push	r26
    2138:	bf 93       	push	r27
    213a:	ef 93       	push	r30
    213c:	ff 93       	push	r31
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
	INT0_ISR();
    2146:	e0 91 84 01 	lds	r30, 0x0184
    214a:	f0 91 85 01 	lds	r31, 0x0185
    214e:	09 95       	icall
}
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	ff 91       	pop	r31
    2156:	ef 91       	pop	r30
    2158:	bf 91       	pop	r27
    215a:	af 91       	pop	r26
    215c:	9f 91       	pop	r25
    215e:	8f 91       	pop	r24
    2160:	7f 91       	pop	r23
    2162:	6f 91       	pop	r22
    2164:	5f 91       	pop	r21
    2166:	4f 91       	pop	r20
    2168:	3f 91       	pop	r19
    216a:	2f 91       	pop	r18
    216c:	0f 90       	pop	r0
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	0f 90       	pop	r0
    2172:	1f 90       	pop	r1
    2174:	18 95       	reti

00002176 <__vector_2>:



/***************************************/
ISR(INT1_vect)
{
    2176:	1f 92       	push	r1
    2178:	0f 92       	push	r0
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	0f 92       	push	r0
    217e:	11 24       	eor	r1, r1
    2180:	2f 93       	push	r18
    2182:	3f 93       	push	r19
    2184:	4f 93       	push	r20
    2186:	5f 93       	push	r21
    2188:	6f 93       	push	r22
    218a:	7f 93       	push	r23
    218c:	8f 93       	push	r24
    218e:	9f 93       	push	r25
    2190:	af 93       	push	r26
    2192:	bf 93       	push	r27
    2194:	ef 93       	push	r30
    2196:	ff 93       	push	r31
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
	INT1_ISR();
    21a0:	e0 91 86 01 	lds	r30, 0x0186
    21a4:	f0 91 87 01 	lds	r31, 0x0187
    21a8:	09 95       	icall
}
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	ff 91       	pop	r31
    21b0:	ef 91       	pop	r30
    21b2:	bf 91       	pop	r27
    21b4:	af 91       	pop	r26
    21b6:	9f 91       	pop	r25
    21b8:	8f 91       	pop	r24
    21ba:	7f 91       	pop	r23
    21bc:	6f 91       	pop	r22
    21be:	5f 91       	pop	r21
    21c0:	4f 91       	pop	r20
    21c2:	3f 91       	pop	r19
    21c4:	2f 91       	pop	r18
    21c6:	0f 90       	pop	r0
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	0f 90       	pop	r0
    21cc:	1f 90       	pop	r1
    21ce:	18 95       	reti

000021d0 <__vector_18>:



/***************************************/
ISR(INT2_vect)
{
    21d0:	1f 92       	push	r1
    21d2:	0f 92       	push	r0
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	0f 92       	push	r0
    21d8:	11 24       	eor	r1, r1
    21da:	2f 93       	push	r18
    21dc:	3f 93       	push	r19
    21de:	4f 93       	push	r20
    21e0:	5f 93       	push	r21
    21e2:	6f 93       	push	r22
    21e4:	7f 93       	push	r23
    21e6:	8f 93       	push	r24
    21e8:	9f 93       	push	r25
    21ea:	af 93       	push	r26
    21ec:	bf 93       	push	r27
    21ee:	ef 93       	push	r30
    21f0:	ff 93       	push	r31
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
	INT2_ISR();
    21fa:	e0 91 82 01 	lds	r30, 0x0182
    21fe:	f0 91 83 01 	lds	r31, 0x0183
    2202:	09 95       	icall
}
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	ff 91       	pop	r31
    220a:	ef 91       	pop	r30
    220c:	bf 91       	pop	r27
    220e:	af 91       	pop	r26
    2210:	9f 91       	pop	r25
    2212:	8f 91       	pop	r24
    2214:	7f 91       	pop	r23
    2216:	6f 91       	pop	r22
    2218:	5f 91       	pop	r21
    221a:	4f 91       	pop	r20
    221c:	3f 91       	pop	r19
    221e:	2f 91       	pop	r18
    2220:	0f 90       	pop	r0
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	0f 90       	pop	r0
    2226:	1f 90       	pop	r1
    2228:	18 95       	reti

0000222a <enable>:
#include "LCD.h"
// Sending Pulse with 2 m sec Width To make the LCD take the data and store it or take the command and do it
void enable()
{
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	6c 97       	sbiw	r28, 0x1c	; 28
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
	DIO_Write_Pin(CONTROL_PORT,EN,HIGH);
    223e:	81 e4       	ldi	r24, 0x41	; 65
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	41 e0       	ldi	r20, 0x01	; 1
    2244:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_Write_Pin>
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	a0 e0       	ldi	r26, 0x00	; 0
    224e:	b0 e4       	ldi	r27, 0x40	; 64
    2250:	89 8f       	std	Y+25, r24	; 0x19
    2252:	9a 8f       	std	Y+26, r25	; 0x1a
    2254:	ab 8f       	std	Y+27, r26	; 0x1b
    2256:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2258:	69 8d       	ldd	r22, Y+25	; 0x19
    225a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    225c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    225e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	4a ef       	ldi	r20, 0xFA	; 250
    2266:	54 e4       	ldi	r21, 0x44	; 68
    2268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	8d 8b       	std	Y+21, r24	; 0x15
    2272:	9e 8b       	std	Y+22, r25	; 0x16
    2274:	af 8b       	std	Y+23, r26	; 0x17
    2276:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2278:	6d 89       	ldd	r22, Y+21	; 0x15
    227a:	7e 89       	ldd	r23, Y+22	; 0x16
    227c:	8f 89       	ldd	r24, Y+23	; 0x17
    227e:	98 8d       	ldd	r25, Y+24	; 0x18
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e8       	ldi	r20, 0x80	; 128
    2286:	5f e3       	ldi	r21, 0x3F	; 63
    2288:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    228c:	88 23       	and	r24, r24
    228e:	2c f4       	brge	.+10     	; 0x229a <enable+0x70>
		__ticks = 1;
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	9c 8b       	std	Y+20, r25	; 0x14
    2296:	8b 8b       	std	Y+19, r24	; 0x13
    2298:	3f c0       	rjmp	.+126    	; 0x2318 <enable+0xee>
	else if (__tmp > 65535)
    229a:	6d 89       	ldd	r22, Y+21	; 0x15
    229c:	7e 89       	ldd	r23, Y+22	; 0x16
    229e:	8f 89       	ldd	r24, Y+23	; 0x17
    22a0:	98 8d       	ldd	r25, Y+24	; 0x18
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	3f ef       	ldi	r19, 0xFF	; 255
    22a6:	4f e7       	ldi	r20, 0x7F	; 127
    22a8:	57 e4       	ldi	r21, 0x47	; 71
    22aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ae:	18 16       	cp	r1, r24
    22b0:	4c f5       	brge	.+82     	; 0x2304 <enable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b2:	69 8d       	ldd	r22, Y+25	; 0x19
    22b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e2       	ldi	r20, 0x20	; 32
    22c0:	51 e4       	ldi	r21, 0x41	; 65
    22c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	bc 01       	movw	r22, r24
    22cc:	cd 01       	movw	r24, r26
    22ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	9c 8b       	std	Y+20, r25	; 0x14
    22d8:	8b 8b       	std	Y+19, r24	; 0x13
    22da:	0f c0       	rjmp	.+30     	; 0x22fa <enable+0xd0>
    22dc:	88 ec       	ldi	r24, 0xC8	; 200
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	9a 8b       	std	Y+18, r25	; 0x12
    22e2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22e4:	89 89       	ldd	r24, Y+17	; 0x11
    22e6:	9a 89       	ldd	r25, Y+18	; 0x12
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	f1 f7       	brne	.-4      	; 0x22e8 <enable+0xbe>
    22ec:	9a 8b       	std	Y+18, r25	; 0x12
    22ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f0:	8b 89       	ldd	r24, Y+19	; 0x13
    22f2:	9c 89       	ldd	r25, Y+20	; 0x14
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	9c 8b       	std	Y+20, r25	; 0x14
    22f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fa:	8b 89       	ldd	r24, Y+19	; 0x13
    22fc:	9c 89       	ldd	r25, Y+20	; 0x14
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	69 f7       	brne	.-38     	; 0x22dc <enable+0xb2>
    2302:	14 c0       	rjmp	.+40     	; 0x232c <enable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2304:	6d 89       	ldd	r22, Y+21	; 0x15
    2306:	7e 89       	ldd	r23, Y+22	; 0x16
    2308:	8f 89       	ldd	r24, Y+23	; 0x17
    230a:	98 8d       	ldd	r25, Y+24	; 0x18
    230c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	9c 8b       	std	Y+20, r25	; 0x14
    2316:	8b 8b       	std	Y+19, r24	; 0x13
    2318:	8b 89       	ldd	r24, Y+19	; 0x13
    231a:	9c 89       	ldd	r25, Y+20	; 0x14
    231c:	98 8b       	std	Y+16, r25	; 0x10
    231e:	8f 87       	std	Y+15, r24	; 0x0f
    2320:	8f 85       	ldd	r24, Y+15	; 0x0f
    2322:	98 89       	ldd	r25, Y+16	; 0x10
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	f1 f7       	brne	.-4      	; 0x2324 <enable+0xfa>
    2328:	98 8b       	std	Y+16, r25	; 0x10
    232a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_Write_Pin(CONTROL_PORT,EN,LOW);
    232c:	81 e4       	ldi	r24, 0x41	; 65
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_Write_Pin>
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	a0 e0       	ldi	r26, 0x00	; 0
    233c:	b0 e4       	ldi	r27, 0x40	; 64
    233e:	8b 87       	std	Y+11, r24	; 0x0b
    2340:	9c 87       	std	Y+12, r25	; 0x0c
    2342:	ad 87       	std	Y+13, r26	; 0x0d
    2344:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2346:	6b 85       	ldd	r22, Y+11	; 0x0b
    2348:	7c 85       	ldd	r23, Y+12	; 0x0c
    234a:	8d 85       	ldd	r24, Y+13	; 0x0d
    234c:	9e 85       	ldd	r25, Y+14	; 0x0e
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	4a ef       	ldi	r20, 0xFA	; 250
    2354:	54 e4       	ldi	r21, 0x44	; 68
    2356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	8f 83       	std	Y+7, r24	; 0x07
    2360:	98 87       	std	Y+8, r25	; 0x08
    2362:	a9 87       	std	Y+9, r26	; 0x09
    2364:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2366:	6f 81       	ldd	r22, Y+7	; 0x07
    2368:	78 85       	ldd	r23, Y+8	; 0x08
    236a:	89 85       	ldd	r24, Y+9	; 0x09
    236c:	9a 85       	ldd	r25, Y+10	; 0x0a
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e8       	ldi	r20, 0x80	; 128
    2374:	5f e3       	ldi	r21, 0x3F	; 63
    2376:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    237a:	88 23       	and	r24, r24
    237c:	2c f4       	brge	.+10     	; 0x2388 <enable+0x15e>
		__ticks = 1;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	9e 83       	std	Y+6, r25	; 0x06
    2384:	8d 83       	std	Y+5, r24	; 0x05
    2386:	3f c0       	rjmp	.+126    	; 0x2406 <enable+0x1dc>
	else if (__tmp > 65535)
    2388:	6f 81       	ldd	r22, Y+7	; 0x07
    238a:	78 85       	ldd	r23, Y+8	; 0x08
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	3f ef       	ldi	r19, 0xFF	; 255
    2394:	4f e7       	ldi	r20, 0x7F	; 127
    2396:	57 e4       	ldi	r21, 0x47	; 71
    2398:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    239c:	18 16       	cp	r1, r24
    239e:	4c f5       	brge	.+82     	; 0x23f2 <enable+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e2       	ldi	r20, 0x20	; 32
    23ae:	51 e4       	ldi	r21, 0x41	; 65
    23b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	bc 01       	movw	r22, r24
    23ba:	cd 01       	movw	r24, r26
    23bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	9e 83       	std	Y+6, r25	; 0x06
    23c6:	8d 83       	std	Y+5, r24	; 0x05
    23c8:	0f c0       	rjmp	.+30     	; 0x23e8 <enable+0x1be>
    23ca:	88 ec       	ldi	r24, 0xC8	; 200
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	9c 83       	std	Y+4, r25	; 0x04
    23d0:	8b 83       	std	Y+3, r24	; 0x03
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	9c 81       	ldd	r25, Y+4	; 0x04
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <enable+0x1ac>
    23da:	9c 83       	std	Y+4, r25	; 0x04
    23dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23de:	8d 81       	ldd	r24, Y+5	; 0x05
    23e0:	9e 81       	ldd	r25, Y+6	; 0x06
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	9e 83       	std	Y+6, r25	; 0x06
    23e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ea:	9e 81       	ldd	r25, Y+6	; 0x06
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	69 f7       	brne	.-38     	; 0x23ca <enable+0x1a0>
    23f0:	14 c0       	rjmp	.+40     	; 0x241a <enable+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f2:	6f 81       	ldd	r22, Y+7	; 0x07
    23f4:	78 85       	ldd	r23, Y+8	; 0x08
    23f6:	89 85       	ldd	r24, Y+9	; 0x09
    23f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	9e 83       	std	Y+6, r25	; 0x06
    2404:	8d 83       	std	Y+5, r24	; 0x05
    2406:	8d 81       	ldd	r24, Y+5	; 0x05
    2408:	9e 81       	ldd	r25, Y+6	; 0x06
    240a:	9a 83       	std	Y+2, r25	; 0x02
    240c:	89 83       	std	Y+1, r24	; 0x01
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	9a 81       	ldd	r25, Y+2	; 0x02
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	f1 f7       	brne	.-4      	; 0x2412 <enable+0x1e8>
    2416:	9a 83       	std	Y+2, r25	; 0x02
    2418:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    241a:	6c 96       	adiw	r28, 0x1c	; 28
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <Data_Register_Select>:
// Write on Data Register ( Receive from data pins as a data to print )
void Data_Register_Select()
{
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
	DIO_Write_Pin(CONTROL_PORT,RS,HIGH);
    2434:	81 e4       	ldi	r24, 0x41	; 65
    2436:	61 e0       	ldi	r22, 0x01	; 1
    2438:	41 e0       	ldi	r20, 0x01	; 1
    243a:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_Write_Pin>
}
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	08 95       	ret

00002444 <Cmd_Register_Select>:
// // Write on Instruction Register ( Receive from data pins as a CMD to do )
void Cmd_Register_Select()
{
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
	DIO_Write_Pin(CONTROL_PORT,RS,LOW);
    244c:	81 e4       	ldi	r24, 0x41	; 65
    244e:	61 e0       	ldi	r22, 0x01	; 1
    2450:	40 e0       	ldi	r20, 0x00	; 0
    2452:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_Write_Pin>
}
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <LCD_Data_Direction>:
// Set the Direction of data ( Read == 1 ) ( Write == 0 ) ( Pin 5 in LCD ) ( In case of connecting R/W With MC )
void LCD_Data_Direction(u8 DIRECTION)
{
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	0f 92       	push	r0
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	89 83       	std	Y+1, r24	; 0x01
	DIO_Write_Pin(CONTROL_PORT,RW,DIRECTION);
    2468:	81 e4       	ldi	r24, 0x41	; 65
    246a:	62 e0       	ldi	r22, 0x02	; 2
    246c:	49 81       	ldd	r20, Y+1	; 0x01
    246e:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_Write_Pin>
}
    2472:	0f 90       	pop	r0
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <LCD_Send_Cmd>:
// Send Command to LCD to do
void LCD_Send_Cmd(u8 COMMAND)
{
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	0f 92       	push	r0
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	89 83       	std	Y+1, r24	; 0x01
	Cmd_Register_Select();
    2486:	0e 94 22 12 	call	0x2444	; 0x2444 <Cmd_Register_Select>
#if defined EIGHT_BIT_MODE
	DIO_WritePort(DATA_PORT,COMMAND);
	enable();
#elif defined FOUR_BIT_MODE
#if defined HIGH_NIBBLE
	DIO_Write_High_Nibble(DATA_PORT,COMMAND>>FOUR);
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	98 2f       	mov	r25, r24
    248e:	92 95       	swap	r25
    2490:	9f 70       	andi	r25, 0x0F	; 15
    2492:	81 e4       	ldi	r24, 0x41	; 65
    2494:	69 2f       	mov	r22, r25
    2496:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <DIO_Write_High_Nibble>
	enable();
    249a:	0e 94 15 11 	call	0x222a	; 0x222a <enable>
	DIO_Write_High_Nibble(DATA_PORT,COMMAND);
    249e:	81 e4       	ldi	r24, 0x41	; 65
    24a0:	69 81       	ldd	r22, Y+1	; 0x01
    24a2:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <DIO_Write_High_Nibble>
	enable();
    24a6:	0e 94 15 11 	call	0x222a	; 0x222a <enable>
	enable();
	DIO_Write_Low_Nibble(DATA_PORT,COMMAND);
	enable();
#endif // for Nibble
#endif // For Mode
}
    24aa:	0f 90       	pop	r0
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <LCD_Clear_Screen>:
// Clear LCD Screen
void LCD_Clear_Screen()
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	2e 97       	sbiw	r28, 0x0e	; 14
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
	LCD_Send_Cmd(CLR_SCREEN);
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_Send_Cmd>
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	a0 e2       	ldi	r26, 0x20	; 32
    24d2:	b1 e4       	ldi	r27, 0x41	; 65
    24d4:	8b 87       	std	Y+11, r24	; 0x0b
    24d6:	9c 87       	std	Y+12, r25	; 0x0c
    24d8:	ad 87       	std	Y+13, r26	; 0x0d
    24da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24de:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	4a ef       	ldi	r20, 0xFA	; 250
    24ea:	54 e4       	ldi	r21, 0x44	; 68
    24ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	8f 83       	std	Y+7, r24	; 0x07
    24f6:	98 87       	std	Y+8, r25	; 0x08
    24f8:	a9 87       	std	Y+9, r26	; 0x09
    24fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24fc:	6f 81       	ldd	r22, Y+7	; 0x07
    24fe:	78 85       	ldd	r23, Y+8	; 0x08
    2500:	89 85       	ldd	r24, Y+9	; 0x09
    2502:	9a 85       	ldd	r25, Y+10	; 0x0a
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e8       	ldi	r20, 0x80	; 128
    250a:	5f e3       	ldi	r21, 0x3F	; 63
    250c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2510:	88 23       	and	r24, r24
    2512:	2c f4       	brge	.+10     	; 0x251e <LCD_Clear_Screen+0x6c>
		__ticks = 1;
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	9e 83       	std	Y+6, r25	; 0x06
    251a:	8d 83       	std	Y+5, r24	; 0x05
    251c:	3f c0       	rjmp	.+126    	; 0x259c <LCD_Clear_Screen+0xea>
	else if (__tmp > 65535)
    251e:	6f 81       	ldd	r22, Y+7	; 0x07
    2520:	78 85       	ldd	r23, Y+8	; 0x08
    2522:	89 85       	ldd	r24, Y+9	; 0x09
    2524:	9a 85       	ldd	r25, Y+10	; 0x0a
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	3f ef       	ldi	r19, 0xFF	; 255
    252a:	4f e7       	ldi	r20, 0x7F	; 127
    252c:	57 e4       	ldi	r21, 0x47	; 71
    252e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2532:	18 16       	cp	r1, r24
    2534:	4c f5       	brge	.+82     	; 0x2588 <LCD_Clear_Screen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2536:	6b 85       	ldd	r22, Y+11	; 0x0b
    2538:	7c 85       	ldd	r23, Y+12	; 0x0c
    253a:	8d 85       	ldd	r24, Y+13	; 0x0d
    253c:	9e 85       	ldd	r25, Y+14	; 0x0e
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e2       	ldi	r20, 0x20	; 32
    2544:	51 e4       	ldi	r21, 0x41	; 65
    2546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	bc 01       	movw	r22, r24
    2550:	cd 01       	movw	r24, r26
    2552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	9e 83       	std	Y+6, r25	; 0x06
    255c:	8d 83       	std	Y+5, r24	; 0x05
    255e:	0f c0       	rjmp	.+30     	; 0x257e <LCD_Clear_Screen+0xcc>
    2560:	88 ec       	ldi	r24, 0xC8	; 200
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	9c 83       	std	Y+4, r25	; 0x04
    2566:	8b 83       	std	Y+3, r24	; 0x03
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	9c 81       	ldd	r25, Y+4	; 0x04
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <LCD_Clear_Screen+0xba>
    2570:	9c 83       	std	Y+4, r25	; 0x04
    2572:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2574:	8d 81       	ldd	r24, Y+5	; 0x05
    2576:	9e 81       	ldd	r25, Y+6	; 0x06
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	9e 83       	std	Y+6, r25	; 0x06
    257c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257e:	8d 81       	ldd	r24, Y+5	; 0x05
    2580:	9e 81       	ldd	r25, Y+6	; 0x06
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	69 f7       	brne	.-38     	; 0x2560 <LCD_Clear_Screen+0xae>
    2586:	14 c0       	rjmp	.+40     	; 0x25b0 <LCD_Clear_Screen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2588:	6f 81       	ldd	r22, Y+7	; 0x07
    258a:	78 85       	ldd	r23, Y+8	; 0x08
    258c:	89 85       	ldd	r24, Y+9	; 0x09
    258e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	9e 83       	std	Y+6, r25	; 0x06
    259a:	8d 83       	std	Y+5, r24	; 0x05
    259c:	8d 81       	ldd	r24, Y+5	; 0x05
    259e:	9e 81       	ldd	r25, Y+6	; 0x06
    25a0:	9a 83       	std	Y+2, r25	; 0x02
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
    25a6:	9a 81       	ldd	r25, Y+2	; 0x02
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <LCD_Clear_Screen+0xf6>
    25ac:	9a 83       	std	Y+2, r25	; 0x02
    25ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    25b0:	2e 96       	adiw	r28, 0x0e	; 14
    25b2:	0f b6       	in	r0, 0x3f	; 63
    25b4:	f8 94       	cli
    25b6:	de bf       	out	0x3e, r29	; 62
    25b8:	0f be       	out	0x3f, r0	; 63
    25ba:	cd bf       	out	0x3d, r28	; 61
    25bc:	cf 91       	pop	r28
    25be:	df 91       	pop	r29
    25c0:	08 95       	ret

000025c2 <LCD_Return_Home>:
//Return The Cursor at the beginning of LCD
void LCD_Return_Home()
{
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	2e 97       	sbiw	r28, 0x0e	; 14
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
	LCD_Send_Cmd(RETURN_HOME);
    25d6:	82 e0       	ldi	r24, 0x02	; 2
    25d8:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_Send_Cmd>
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	a0 e2       	ldi	r26, 0x20	; 32
    25e2:	b1 e4       	ldi	r27, 0x41	; 65
    25e4:	8b 87       	std	Y+11, r24	; 0x0b
    25e6:	9c 87       	std	Y+12, r25	; 0x0c
    25e8:	ad 87       	std	Y+13, r26	; 0x0d
    25ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	4a ef       	ldi	r20, 0xFA	; 250
    25fa:	54 e4       	ldi	r21, 0x44	; 68
    25fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	8f 83       	std	Y+7, r24	; 0x07
    2606:	98 87       	std	Y+8, r25	; 0x08
    2608:	a9 87       	std	Y+9, r26	; 0x09
    260a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    260c:	6f 81       	ldd	r22, Y+7	; 0x07
    260e:	78 85       	ldd	r23, Y+8	; 0x08
    2610:	89 85       	ldd	r24, Y+9	; 0x09
    2612:	9a 85       	ldd	r25, Y+10	; 0x0a
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e8       	ldi	r20, 0x80	; 128
    261a:	5f e3       	ldi	r21, 0x3F	; 63
    261c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2620:	88 23       	and	r24, r24
    2622:	2c f4       	brge	.+10     	; 0x262e <LCD_Return_Home+0x6c>
		__ticks = 1;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	9e 83       	std	Y+6, r25	; 0x06
    262a:	8d 83       	std	Y+5, r24	; 0x05
    262c:	3f c0       	rjmp	.+126    	; 0x26ac <LCD_Return_Home+0xea>
	else if (__tmp > 65535)
    262e:	6f 81       	ldd	r22, Y+7	; 0x07
    2630:	78 85       	ldd	r23, Y+8	; 0x08
    2632:	89 85       	ldd	r24, Y+9	; 0x09
    2634:	9a 85       	ldd	r25, Y+10	; 0x0a
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	3f ef       	ldi	r19, 0xFF	; 255
    263a:	4f e7       	ldi	r20, 0x7F	; 127
    263c:	57 e4       	ldi	r21, 0x47	; 71
    263e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2642:	18 16       	cp	r1, r24
    2644:	4c f5       	brge	.+82     	; 0x2698 <LCD_Return_Home+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2646:	6b 85       	ldd	r22, Y+11	; 0x0b
    2648:	7c 85       	ldd	r23, Y+12	; 0x0c
    264a:	8d 85       	ldd	r24, Y+13	; 0x0d
    264c:	9e 85       	ldd	r25, Y+14	; 0x0e
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e2       	ldi	r20, 0x20	; 32
    2654:	51 e4       	ldi	r21, 0x41	; 65
    2656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	bc 01       	movw	r22, r24
    2660:	cd 01       	movw	r24, r26
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	9e 83       	std	Y+6, r25	; 0x06
    266c:	8d 83       	std	Y+5, r24	; 0x05
    266e:	0f c0       	rjmp	.+30     	; 0x268e <LCD_Return_Home+0xcc>
    2670:	88 ec       	ldi	r24, 0xC8	; 200
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	9c 83       	std	Y+4, r25	; 0x04
    2676:	8b 83       	std	Y+3, r24	; 0x03
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	9c 81       	ldd	r25, Y+4	; 0x04
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <LCD_Return_Home+0xba>
    2680:	9c 83       	std	Y+4, r25	; 0x04
    2682:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2684:	8d 81       	ldd	r24, Y+5	; 0x05
    2686:	9e 81       	ldd	r25, Y+6	; 0x06
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	9e 83       	std	Y+6, r25	; 0x06
    268c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
    2690:	9e 81       	ldd	r25, Y+6	; 0x06
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	69 f7       	brne	.-38     	; 0x2670 <LCD_Return_Home+0xae>
    2696:	14 c0       	rjmp	.+40     	; 0x26c0 <LCD_Return_Home+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2698:	6f 81       	ldd	r22, Y+7	; 0x07
    269a:	78 85       	ldd	r23, Y+8	; 0x08
    269c:	89 85       	ldd	r24, Y+9	; 0x09
    269e:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	9e 83       	std	Y+6, r25	; 0x06
    26aa:	8d 83       	std	Y+5, r24	; 0x05
    26ac:	8d 81       	ldd	r24, Y+5	; 0x05
    26ae:	9e 81       	ldd	r25, Y+6	; 0x06
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	f1 f7       	brne	.-4      	; 0x26b8 <LCD_Return_Home+0xf6>
    26bc:	9a 83       	std	Y+2, r25	; 0x02
    26be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    26c0:	2e 96       	adiw	r28, 0x0e	; 14
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	08 95       	ret

000026d2 <EntryMode>:
// Make the cursor Move Right After writing a Char in the place where the Cursor stand
void EntryMode()
{
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	2e 97       	sbiw	r28, 0x0e	; 14
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	f8 94       	cli
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	cd bf       	out	0x3d, r28	; 61
	LCD_Send_Cmd(ENTRY_MODE);
    26e6:	86 e0       	ldi	r24, 0x06	; 6
    26e8:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_Send_Cmd>
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	a0 e8       	ldi	r26, 0x80	; 128
    26f2:	bf e3       	ldi	r27, 0x3F	; 63
    26f4:	8b 87       	std	Y+11, r24	; 0x0b
    26f6:	9c 87       	std	Y+12, r25	; 0x0c
    26f8:	ad 87       	std	Y+13, r26	; 0x0d
    26fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2700:	8d 85       	ldd	r24, Y+13	; 0x0d
    2702:	9e 85       	ldd	r25, Y+14	; 0x0e
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	4a ef       	ldi	r20, 0xFA	; 250
    270a:	54 e4       	ldi	r21, 0x44	; 68
    270c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	8f 83       	std	Y+7, r24	; 0x07
    2716:	98 87       	std	Y+8, r25	; 0x08
    2718:	a9 87       	std	Y+9, r26	; 0x09
    271a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    271c:	6f 81       	ldd	r22, Y+7	; 0x07
    271e:	78 85       	ldd	r23, Y+8	; 0x08
    2720:	89 85       	ldd	r24, Y+9	; 0x09
    2722:	9a 85       	ldd	r25, Y+10	; 0x0a
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e8       	ldi	r20, 0x80	; 128
    272a:	5f e3       	ldi	r21, 0x3F	; 63
    272c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2730:	88 23       	and	r24, r24
    2732:	2c f4       	brge	.+10     	; 0x273e <EntryMode+0x6c>
		__ticks = 1;
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9e 83       	std	Y+6, r25	; 0x06
    273a:	8d 83       	std	Y+5, r24	; 0x05
    273c:	3f c0       	rjmp	.+126    	; 0x27bc <EntryMode+0xea>
	else if (__tmp > 65535)
    273e:	6f 81       	ldd	r22, Y+7	; 0x07
    2740:	78 85       	ldd	r23, Y+8	; 0x08
    2742:	89 85       	ldd	r24, Y+9	; 0x09
    2744:	9a 85       	ldd	r25, Y+10	; 0x0a
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	3f ef       	ldi	r19, 0xFF	; 255
    274a:	4f e7       	ldi	r20, 0x7F	; 127
    274c:	57 e4       	ldi	r21, 0x47	; 71
    274e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2752:	18 16       	cp	r1, r24
    2754:	4c f5       	brge	.+82     	; 0x27a8 <EntryMode+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2756:	6b 85       	ldd	r22, Y+11	; 0x0b
    2758:	7c 85       	ldd	r23, Y+12	; 0x0c
    275a:	8d 85       	ldd	r24, Y+13	; 0x0d
    275c:	9e 85       	ldd	r25, Y+14	; 0x0e
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e2       	ldi	r20, 0x20	; 32
    2764:	51 e4       	ldi	r21, 0x41	; 65
    2766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	bc 01       	movw	r22, r24
    2770:	cd 01       	movw	r24, r26
    2772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	9e 83       	std	Y+6, r25	; 0x06
    277c:	8d 83       	std	Y+5, r24	; 0x05
    277e:	0f c0       	rjmp	.+30     	; 0x279e <EntryMode+0xcc>
    2780:	88 ec       	ldi	r24, 0xC8	; 200
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	9c 83       	std	Y+4, r25	; 0x04
    2786:	8b 83       	std	Y+3, r24	; 0x03
    2788:	8b 81       	ldd	r24, Y+3	; 0x03
    278a:	9c 81       	ldd	r25, Y+4	; 0x04
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	f1 f7       	brne	.-4      	; 0x278c <EntryMode+0xba>
    2790:	9c 83       	std	Y+4, r25	; 0x04
    2792:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2794:	8d 81       	ldd	r24, Y+5	; 0x05
    2796:	9e 81       	ldd	r25, Y+6	; 0x06
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	9e 83       	std	Y+6, r25	; 0x06
    279c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279e:	8d 81       	ldd	r24, Y+5	; 0x05
    27a0:	9e 81       	ldd	r25, Y+6	; 0x06
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	69 f7       	brne	.-38     	; 0x2780 <EntryMode+0xae>
    27a6:	14 c0       	rjmp	.+40     	; 0x27d0 <EntryMode+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a8:	6f 81       	ldd	r22, Y+7	; 0x07
    27aa:	78 85       	ldd	r23, Y+8	; 0x08
    27ac:	89 85       	ldd	r24, Y+9	; 0x09
    27ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	9e 83       	std	Y+6, r25	; 0x06
    27ba:	8d 83       	std	Y+5, r24	; 0x05
    27bc:	8d 81       	ldd	r24, Y+5	; 0x05
    27be:	9e 81       	ldd	r25, Y+6	; 0x06
    27c0:	9a 83       	std	Y+2, r25	; 0x02
    27c2:	89 83       	std	Y+1, r24	; 0x01
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	9a 81       	ldd	r25, Y+2	; 0x02
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	f1 f7       	brne	.-4      	; 0x27c8 <EntryMode+0xf6>
    27cc:	9a 83       	std	Y+2, r25	; 0x02
    27ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    27d0:	2e 96       	adiw	r28, 0x0e	; 14
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	f8 94       	cli
    27d6:	de bf       	out	0x3e, r29	; 62
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	cd bf       	out	0x3d, r28	; 61
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <LCD_DiplayON_CursorON>:
void LCD_DiplayON_CursorON()
{
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	2e 97       	sbiw	r28, 0x0e	; 14
    27ec:	0f b6       	in	r0, 0x3f	; 63
    27ee:	f8 94       	cli
    27f0:	de bf       	out	0x3e, r29	; 62
    27f2:	0f be       	out	0x3f, r0	; 63
    27f4:	cd bf       	out	0x3d, r28	; 61
	LCD_Send_Cmd(DISPLAYON_CURSORON);
    27f6:	8e e0       	ldi	r24, 0x0E	; 14
    27f8:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_Send_Cmd>
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	a0 e8       	ldi	r26, 0x80	; 128
    2802:	bf e3       	ldi	r27, 0x3F	; 63
    2804:	8b 87       	std	Y+11, r24	; 0x0b
    2806:	9c 87       	std	Y+12, r25	; 0x0c
    2808:	ad 87       	std	Y+13, r26	; 0x0d
    280a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    280c:	6b 85       	ldd	r22, Y+11	; 0x0b
    280e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2810:	8d 85       	ldd	r24, Y+13	; 0x0d
    2812:	9e 85       	ldd	r25, Y+14	; 0x0e
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	4a ef       	ldi	r20, 0xFA	; 250
    281a:	54 e4       	ldi	r21, 0x44	; 68
    281c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	8f 83       	std	Y+7, r24	; 0x07
    2826:	98 87       	std	Y+8, r25	; 0x08
    2828:	a9 87       	std	Y+9, r26	; 0x09
    282a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    282c:	6f 81       	ldd	r22, Y+7	; 0x07
    282e:	78 85       	ldd	r23, Y+8	; 0x08
    2830:	89 85       	ldd	r24, Y+9	; 0x09
    2832:	9a 85       	ldd	r25, Y+10	; 0x0a
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e8       	ldi	r20, 0x80	; 128
    283a:	5f e3       	ldi	r21, 0x3F	; 63
    283c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2840:	88 23       	and	r24, r24
    2842:	2c f4       	brge	.+10     	; 0x284e <LCD_DiplayON_CursorON+0x6c>
		__ticks = 1;
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	9e 83       	std	Y+6, r25	; 0x06
    284a:	8d 83       	std	Y+5, r24	; 0x05
    284c:	3f c0       	rjmp	.+126    	; 0x28cc <LCD_DiplayON_CursorON+0xea>
	else if (__tmp > 65535)
    284e:	6f 81       	ldd	r22, Y+7	; 0x07
    2850:	78 85       	ldd	r23, Y+8	; 0x08
    2852:	89 85       	ldd	r24, Y+9	; 0x09
    2854:	9a 85       	ldd	r25, Y+10	; 0x0a
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	3f ef       	ldi	r19, 0xFF	; 255
    285a:	4f e7       	ldi	r20, 0x7F	; 127
    285c:	57 e4       	ldi	r21, 0x47	; 71
    285e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2862:	18 16       	cp	r1, r24
    2864:	4c f5       	brge	.+82     	; 0x28b8 <LCD_DiplayON_CursorON+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2866:	6b 85       	ldd	r22, Y+11	; 0x0b
    2868:	7c 85       	ldd	r23, Y+12	; 0x0c
    286a:	8d 85       	ldd	r24, Y+13	; 0x0d
    286c:	9e 85       	ldd	r25, Y+14	; 0x0e
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	40 e2       	ldi	r20, 0x20	; 32
    2874:	51 e4       	ldi	r21, 0x41	; 65
    2876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	9e 83       	std	Y+6, r25	; 0x06
    288c:	8d 83       	std	Y+5, r24	; 0x05
    288e:	0f c0       	rjmp	.+30     	; 0x28ae <LCD_DiplayON_CursorON+0xcc>
    2890:	88 ec       	ldi	r24, 0xC8	; 200
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	9c 83       	std	Y+4, r25	; 0x04
    2896:	8b 83       	std	Y+3, r24	; 0x03
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	9c 81       	ldd	r25, Y+4	; 0x04
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	f1 f7       	brne	.-4      	; 0x289c <LCD_DiplayON_CursorON+0xba>
    28a0:	9c 83       	std	Y+4, r25	; 0x04
    28a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a4:	8d 81       	ldd	r24, Y+5	; 0x05
    28a6:	9e 81       	ldd	r25, Y+6	; 0x06
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	9e 83       	std	Y+6, r25	; 0x06
    28ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ae:	8d 81       	ldd	r24, Y+5	; 0x05
    28b0:	9e 81       	ldd	r25, Y+6	; 0x06
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	69 f7       	brne	.-38     	; 0x2890 <LCD_DiplayON_CursorON+0xae>
    28b6:	14 c0       	rjmp	.+40     	; 0x28e0 <LCD_DiplayON_CursorON+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ba:	78 85       	ldd	r23, Y+8	; 0x08
    28bc:	89 85       	ldd	r24, Y+9	; 0x09
    28be:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	9e 83       	std	Y+6, r25	; 0x06
    28ca:	8d 83       	std	Y+5, r24	; 0x05
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	9e 81       	ldd	r25, Y+6	; 0x06
    28d0:	9a 83       	std	Y+2, r25	; 0x02
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	9a 81       	ldd	r25, Y+2	; 0x02
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	f1 f7       	brne	.-4      	; 0x28d8 <LCD_DiplayON_CursorON+0xf6>
    28dc:	9a 83       	std	Y+2, r25	; 0x02
    28de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    28e0:	2e 96       	adiw	r28, 0x0e	; 14
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	de bf       	out	0x3e, r29	; 62
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	cd bf       	out	0x3d, r28	; 61
    28ec:	cf 91       	pop	r28
    28ee:	df 91       	pop	r29
    28f0:	08 95       	ret

000028f2 <LCD_DiplayON_CursorOff>:
void LCD_DiplayON_CursorOff()
{
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	2e 97       	sbiw	r28, 0x0e	; 14
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	cd bf       	out	0x3d, r28	; 61
	LCD_Send_Cmd(DISPLAYON_CURSOROFF);
    2906:	8c e0       	ldi	r24, 0x0C	; 12
    2908:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_Send_Cmd>
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	a0 e8       	ldi	r26, 0x80	; 128
    2912:	bf e3       	ldi	r27, 0x3F	; 63
    2914:	8b 87       	std	Y+11, r24	; 0x0b
    2916:	9c 87       	std	Y+12, r25	; 0x0c
    2918:	ad 87       	std	Y+13, r26	; 0x0d
    291a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291c:	6b 85       	ldd	r22, Y+11	; 0x0b
    291e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2920:	8d 85       	ldd	r24, Y+13	; 0x0d
    2922:	9e 85       	ldd	r25, Y+14	; 0x0e
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	4a ef       	ldi	r20, 0xFA	; 250
    292a:	54 e4       	ldi	r21, 0x44	; 68
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	8f 83       	std	Y+7, r24	; 0x07
    2936:	98 87       	std	Y+8, r25	; 0x08
    2938:	a9 87       	std	Y+9, r26	; 0x09
    293a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    293c:	6f 81       	ldd	r22, Y+7	; 0x07
    293e:	78 85       	ldd	r23, Y+8	; 0x08
    2940:	89 85       	ldd	r24, Y+9	; 0x09
    2942:	9a 85       	ldd	r25, Y+10	; 0x0a
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e8       	ldi	r20, 0x80	; 128
    294a:	5f e3       	ldi	r21, 0x3F	; 63
    294c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2950:	88 23       	and	r24, r24
    2952:	2c f4       	brge	.+10     	; 0x295e <LCD_DiplayON_CursorOff+0x6c>
		__ticks = 1;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	9e 83       	std	Y+6, r25	; 0x06
    295a:	8d 83       	std	Y+5, r24	; 0x05
    295c:	3f c0       	rjmp	.+126    	; 0x29dc <LCD_DiplayON_CursorOff+0xea>
	else if (__tmp > 65535)
    295e:	6f 81       	ldd	r22, Y+7	; 0x07
    2960:	78 85       	ldd	r23, Y+8	; 0x08
    2962:	89 85       	ldd	r24, Y+9	; 0x09
    2964:	9a 85       	ldd	r25, Y+10	; 0x0a
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	3f ef       	ldi	r19, 0xFF	; 255
    296a:	4f e7       	ldi	r20, 0x7F	; 127
    296c:	57 e4       	ldi	r21, 0x47	; 71
    296e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2972:	18 16       	cp	r1, r24
    2974:	4c f5       	brge	.+82     	; 0x29c8 <LCD_DiplayON_CursorOff+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2976:	6b 85       	ldd	r22, Y+11	; 0x0b
    2978:	7c 85       	ldd	r23, Y+12	; 0x0c
    297a:	8d 85       	ldd	r24, Y+13	; 0x0d
    297c:	9e 85       	ldd	r25, Y+14	; 0x0e
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e2       	ldi	r20, 0x20	; 32
    2984:	51 e4       	ldi	r21, 0x41	; 65
    2986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9e 83       	std	Y+6, r25	; 0x06
    299c:	8d 83       	std	Y+5, r24	; 0x05
    299e:	0f c0       	rjmp	.+30     	; 0x29be <LCD_DiplayON_CursorOff+0xcc>
    29a0:	88 ec       	ldi	r24, 0xC8	; 200
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9c 83       	std	Y+4, r25	; 0x04
    29a6:	8b 83       	std	Y+3, r24	; 0x03
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	9c 81       	ldd	r25, Y+4	; 0x04
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <LCD_DiplayON_CursorOff+0xba>
    29b0:	9c 83       	std	Y+4, r25	; 0x04
    29b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b4:	8d 81       	ldd	r24, Y+5	; 0x05
    29b6:	9e 81       	ldd	r25, Y+6	; 0x06
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	9e 83       	std	Y+6, r25	; 0x06
    29bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29be:	8d 81       	ldd	r24, Y+5	; 0x05
    29c0:	9e 81       	ldd	r25, Y+6	; 0x06
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	69 f7       	brne	.-38     	; 0x29a0 <LCD_DiplayON_CursorOff+0xae>
    29c6:	14 c0       	rjmp	.+40     	; 0x29f0 <LCD_DiplayON_CursorOff+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ca:	78 85       	ldd	r23, Y+8	; 0x08
    29cc:	89 85       	ldd	r24, Y+9	; 0x09
    29ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	9e 83       	std	Y+6, r25	; 0x06
    29da:	8d 83       	std	Y+5, r24	; 0x05
    29dc:	8d 81       	ldd	r24, Y+5	; 0x05
    29de:	9e 81       	ldd	r25, Y+6	; 0x06
    29e0:	9a 83       	std	Y+2, r25	; 0x02
    29e2:	89 83       	std	Y+1, r24	; 0x01
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	9a 81       	ldd	r25, Y+2	; 0x02
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <LCD_DiplayON_CursorOff+0xf6>
    29ec:	9a 83       	std	Y+2, r25	; 0x02
    29ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    29f0:	2e 96       	adiw	r28, 0x0e	; 14
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	cd bf       	out	0x3d, r28	; 61
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <LCD_DiplayON_CursorBlink>:
void LCD_DiplayON_CursorBlink()
{
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	2e 97       	sbiw	r28, 0x0e	; 14
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
	LCD_Send_Cmd(DISPLAYON_CURSORBLINK);
    2a16:	8f e0       	ldi	r24, 0x0F	; 15
    2a18:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_Send_Cmd>
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	a0 e8       	ldi	r26, 0x80	; 128
    2a22:	bf e3       	ldi	r27, 0x3F	; 63
    2a24:	8b 87       	std	Y+11, r24	; 0x0b
    2a26:	9c 87       	std	Y+12, r25	; 0x0c
    2a28:	ad 87       	std	Y+13, r26	; 0x0d
    2a2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	4a ef       	ldi	r20, 0xFA	; 250
    2a3a:	54 e4       	ldi	r21, 0x44	; 68
    2a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	8f 83       	std	Y+7, r24	; 0x07
    2a46:	98 87       	std	Y+8, r25	; 0x08
    2a48:	a9 87       	std	Y+9, r26	; 0x09
    2a4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4e:	78 85       	ldd	r23, Y+8	; 0x08
    2a50:	89 85       	ldd	r24, Y+9	; 0x09
    2a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e8       	ldi	r20, 0x80	; 128
    2a5a:	5f e3       	ldi	r21, 0x3F	; 63
    2a5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a60:	88 23       	and	r24, r24
    2a62:	2c f4       	brge	.+10     	; 0x2a6e <LCD_DiplayON_CursorBlink+0x6c>
		__ticks = 1;
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	9e 83       	std	Y+6, r25	; 0x06
    2a6a:	8d 83       	std	Y+5, r24	; 0x05
    2a6c:	3f c0       	rjmp	.+126    	; 0x2aec <LCD_DiplayON_CursorBlink+0xea>
	else if (__tmp > 65535)
    2a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a70:	78 85       	ldd	r23, Y+8	; 0x08
    2a72:	89 85       	ldd	r24, Y+9	; 0x09
    2a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	3f ef       	ldi	r19, 0xFF	; 255
    2a7a:	4f e7       	ldi	r20, 0x7F	; 127
    2a7c:	57 e4       	ldi	r21, 0x47	; 71
    2a7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a82:	18 16       	cp	r1, r24
    2a84:	4c f5       	brge	.+82     	; 0x2ad8 <LCD_DiplayON_CursorBlink+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e2       	ldi	r20, 0x20	; 32
    2a94:	51 e4       	ldi	r21, 0x41	; 65
    2a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	bc 01       	movw	r22, r24
    2aa0:	cd 01       	movw	r24, r26
    2aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	9e 83       	std	Y+6, r25	; 0x06
    2aac:	8d 83       	std	Y+5, r24	; 0x05
    2aae:	0f c0       	rjmp	.+30     	; 0x2ace <LCD_DiplayON_CursorBlink+0xcc>
    2ab0:	88 ec       	ldi	r24, 0xC8	; 200
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	9c 83       	std	Y+4, r25	; 0x04
    2ab6:	8b 83       	std	Y+3, r24	; 0x03
    2ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aba:	9c 81       	ldd	r25, Y+4	; 0x04
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <LCD_DiplayON_CursorBlink+0xba>
    2ac0:	9c 83       	std	Y+4, r25	; 0x04
    2ac2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	9e 83       	std	Y+6, r25	; 0x06
    2acc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ace:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	69 f7       	brne	.-38     	; 0x2ab0 <LCD_DiplayON_CursorBlink+0xae>
    2ad6:	14 c0       	rjmp	.+40     	; 0x2b00 <LCD_DiplayON_CursorBlink+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    2ada:	78 85       	ldd	r23, Y+8	; 0x08
    2adc:	89 85       	ldd	r24, Y+9	; 0x09
    2ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	9e 83       	std	Y+6, r25	; 0x06
    2aea:	8d 83       	std	Y+5, r24	; 0x05
    2aec:	8d 81       	ldd	r24, Y+5	; 0x05
    2aee:	9e 81       	ldd	r25, Y+6	; 0x06
    2af0:	9a 83       	std	Y+2, r25	; 0x02
    2af2:	89 83       	std	Y+1, r24	; 0x01
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	9a 81       	ldd	r25, Y+2	; 0x02
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	f1 f7       	brne	.-4      	; 0x2af8 <LCD_DiplayON_CursorBlink+0xf6>
    2afc:	9a 83       	std	Y+2, r25	; 0x02
    2afe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2b00:	2e 96       	adiw	r28, 0x0e	; 14
    2b02:	0f b6       	in	r0, 0x3f	; 63
    2b04:	f8 94       	cli
    2b06:	de bf       	out	0x3e, r29	; 62
    2b08:	0f be       	out	0x3f, r0	; 63
    2b0a:	cd bf       	out	0x3d, r28	; 61
    2b0c:	cf 91       	pop	r28
    2b0e:	df 91       	pop	r29
    2b10:	08 95       	ret

00002b12 <LCD_CursorToLeft>:
void LCD_CursorToLeft()
{
    2b12:	df 93       	push	r29
    2b14:	cf 93       	push	r28
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_Cmd(CURSOR_TO_LEFT);
    2b1a:	84 e1       	ldi	r24, 0x14	; 20
    2b1c:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_Send_Cmd>
}
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	08 95       	ret

00002b26 <LCD_CursorToRight>:
void LCD_CursorToRight()
{
    2b26:	df 93       	push	r29
    2b28:	cf 93       	push	r28
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_Cmd(CURSOR_TO_RIGHT);
    2b2e:	80 e1       	ldi	r24, 0x10	; 16
    2b30:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_Send_Cmd>
}
    2b34:	cf 91       	pop	r28
    2b36:	df 91       	pop	r29
    2b38:	08 95       	ret

00002b3a <LCD_Writing_To_Left>:
void LCD_Writing_To_Left()
{
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
    2b42:	2e 97       	sbiw	r28, 0x0e	; 14
    2b44:	0f b6       	in	r0, 0x3f	; 63
    2b46:	f8 94       	cli
    2b48:	de bf       	out	0x3e, r29	; 62
    2b4a:	0f be       	out	0x3f, r0	; 63
    2b4c:	cd bf       	out	0x3d, r28	; 61
	LCD_Send_Cmd(WRITING_TO_LEFT);
    2b4e:	84 e0       	ldi	r24, 0x04	; 4
    2b50:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_Send_Cmd>
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	a0 e8       	ldi	r26, 0x80	; 128
    2b5a:	bf e3       	ldi	r27, 0x3F	; 63
    2b5c:	8b 87       	std	Y+11, r24	; 0x0b
    2b5e:	9c 87       	std	Y+12, r25	; 0x0c
    2b60:	ad 87       	std	Y+13, r26	; 0x0d
    2b62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	4a ef       	ldi	r20, 0xFA	; 250
    2b72:	54 e4       	ldi	r21, 0x44	; 68
    2b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	8f 83       	std	Y+7, r24	; 0x07
    2b7e:	98 87       	std	Y+8, r25	; 0x08
    2b80:	a9 87       	std	Y+9, r26	; 0x09
    2b82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b84:	6f 81       	ldd	r22, Y+7	; 0x07
    2b86:	78 85       	ldd	r23, Y+8	; 0x08
    2b88:	89 85       	ldd	r24, Y+9	; 0x09
    2b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	40 e8       	ldi	r20, 0x80	; 128
    2b92:	5f e3       	ldi	r21, 0x3F	; 63
    2b94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b98:	88 23       	and	r24, r24
    2b9a:	2c f4       	brge	.+10     	; 0x2ba6 <LCD_Writing_To_Left+0x6c>
		__ticks = 1;
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	9e 83       	std	Y+6, r25	; 0x06
    2ba2:	8d 83       	std	Y+5, r24	; 0x05
    2ba4:	3f c0       	rjmp	.+126    	; 0x2c24 <LCD_Writing_To_Left+0xea>
	else if (__tmp > 65535)
    2ba6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba8:	78 85       	ldd	r23, Y+8	; 0x08
    2baa:	89 85       	ldd	r24, Y+9	; 0x09
    2bac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	3f ef       	ldi	r19, 0xFF	; 255
    2bb2:	4f e7       	ldi	r20, 0x7F	; 127
    2bb4:	57 e4       	ldi	r21, 0x47	; 71
    2bb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bba:	18 16       	cp	r1, r24
    2bbc:	4c f5       	brge	.+82     	; 0x2c10 <LCD_Writing_To_Left+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e2       	ldi	r20, 0x20	; 32
    2bcc:	51 e4       	ldi	r21, 0x41	; 65
    2bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	bc 01       	movw	r22, r24
    2bd8:	cd 01       	movw	r24, r26
    2bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	9e 83       	std	Y+6, r25	; 0x06
    2be4:	8d 83       	std	Y+5, r24	; 0x05
    2be6:	0f c0       	rjmp	.+30     	; 0x2c06 <LCD_Writing_To_Left+0xcc>
    2be8:	88 ec       	ldi	r24, 0xC8	; 200
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	9c 83       	std	Y+4, r25	; 0x04
    2bee:	8b 83       	std	Y+3, r24	; 0x03
    2bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <LCD_Writing_To_Left+0xba>
    2bf8:	9c 83       	std	Y+4, r25	; 0x04
    2bfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	9e 83       	std	Y+6, r25	; 0x06
    2c04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c06:	8d 81       	ldd	r24, Y+5	; 0x05
    2c08:	9e 81       	ldd	r25, Y+6	; 0x06
    2c0a:	00 97       	sbiw	r24, 0x00	; 0
    2c0c:	69 f7       	brne	.-38     	; 0x2be8 <LCD_Writing_To_Left+0xae>
    2c0e:	14 c0       	rjmp	.+40     	; 0x2c38 <LCD_Writing_To_Left+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c10:	6f 81       	ldd	r22, Y+7	; 0x07
    2c12:	78 85       	ldd	r23, Y+8	; 0x08
    2c14:	89 85       	ldd	r24, Y+9	; 0x09
    2c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	9e 83       	std	Y+6, r25	; 0x06
    2c22:	8d 83       	std	Y+5, r24	; 0x05
    2c24:	8d 81       	ldd	r24, Y+5	; 0x05
    2c26:	9e 81       	ldd	r25, Y+6	; 0x06
    2c28:	9a 83       	std	Y+2, r25	; 0x02
    2c2a:	89 83       	std	Y+1, r24	; 0x01
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	f1 f7       	brne	.-4      	; 0x2c30 <LCD_Writing_To_Left+0xf6>
    2c34:	9a 83       	std	Y+2, r25	; 0x02
    2c36:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2c38:	2e 96       	adiw	r28, 0x0e	; 14
    2c3a:	0f b6       	in	r0, 0x3f	; 63
    2c3c:	f8 94       	cli
    2c3e:	de bf       	out	0x3e, r29	; 62
    2c40:	0f be       	out	0x3f, r0	; 63
    2c42:	cd bf       	out	0x3d, r28	; 61
    2c44:	cf 91       	pop	r28
    2c46:	df 91       	pop	r29
    2c48:	08 95       	ret

00002c4a <LCD_Shift_Display_Right>:
void LCD_Shift_Display_Right()
{
    2c4a:	df 93       	push	r29
    2c4c:	cf 93       	push	r28
    2c4e:	cd b7       	in	r28, 0x3d	; 61
    2c50:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_Cmd(SHIFT_DISPLAY_TO_RIGHT);
    2c52:	8c e1       	ldi	r24, 0x1C	; 28
    2c54:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_Send_Cmd>
}
    2c58:	cf 91       	pop	r28
    2c5a:	df 91       	pop	r29
    2c5c:	08 95       	ret

00002c5e <LCD_Shift_Display_Left>:
void LCD_Shift_Display_Left()
{
    2c5e:	df 93       	push	r29
    2c60:	cf 93       	push	r28
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_Cmd(SHIFT_DISPLAY_TO_LEFT);
    2c66:	88 e1       	ldi	r24, 0x18	; 24
    2c68:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_Send_Cmd>
}
    2c6c:	cf 91       	pop	r28
    2c6e:	df 91       	pop	r29
    2c70:	08 95       	ret

00002c72 <LCD_Move_Cursor>:
void LCD_Move_Cursor(u8 ROW, u8 COLUMN){
    2c72:	df 93       	push	r29
    2c74:	cf 93       	push	r28
    2c76:	00 d0       	rcall	.+0      	; 0x2c78 <LCD_Move_Cursor+0x6>
    2c78:	0f 92       	push	r0
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	8a 83       	std	Y+2, r24	; 0x02
    2c80:	6b 83       	std	Y+3, r22	; 0x03
	u8 COMMAND = 0x80;
    2c82:	80 e8       	ldi	r24, 0x80	; 128
    2c84:	89 83       	std	Y+1, r24	; 0x01
	if (ROW > LCD_ROWS || ROW < 1 || COLUMN > LCD_COLUMNS || COLUMN < 1)
    2c86:	8a 81       	ldd	r24, Y+2	; 0x02
    2c88:	83 30       	cpi	r24, 0x03	; 3
    2c8a:	48 f4       	brcc	.+18     	; 0x2c9e <LCD_Move_Cursor+0x2c>
    2c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8e:	88 23       	and	r24, r24
    2c90:	31 f0       	breq	.+12     	; 0x2c9e <LCD_Move_Cursor+0x2c>
    2c92:	8b 81       	ldd	r24, Y+3	; 0x03
    2c94:	81 31       	cpi	r24, 0x11	; 17
    2c96:	18 f4       	brcc	.+6      	; 0x2c9e <LCD_Move_Cursor+0x2c>
    2c98:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9a:	88 23       	and	r24, r24
    2c9c:	21 f4       	brne	.+8      	; 0x2ca6 <LCD_Move_Cursor+0x34>
	{
		LCD_Send_Cmd(COMMAND);
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_Send_Cmd>
    2ca4:	13 c0       	rjmp	.+38     	; 0x2ccc <LCD_Move_Cursor+0x5a>
	}
	else if (ROW == 1)
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca8:	81 30       	cpi	r24, 0x01	; 1
    2caa:	39 f4       	brne	.+14     	; 0x2cba <LCD_Move_Cursor+0x48>
	{
		COMMAND = 0x80 + (COLUMN - 1);
    2cac:	8b 81       	ldd	r24, Y+3	; 0x03
    2cae:	81 58       	subi	r24, 0x81	; 129
    2cb0:	89 83       	std	Y+1, r24	; 0x01
		LCD_Send_Cmd(COMMAND);
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_Send_Cmd>
    2cb8:	09 c0       	rjmp	.+18     	; 0x2ccc <LCD_Move_Cursor+0x5a>
	}
	else if (ROW == 2)
    2cba:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbc:	82 30       	cpi	r24, 0x02	; 2
    2cbe:	31 f4       	brne	.+12     	; 0x2ccc <LCD_Move_Cursor+0x5a>
	{
		COMMAND = 0xC0 + (COLUMN - 1);
    2cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc2:	81 54       	subi	r24, 0x41	; 65
    2cc4:	89 83       	std	Y+1, r24	; 0x01
		LCD_Send_Cmd(COMMAND);
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_Send_Cmd>
	/*
	 * else if tany lw el rows zado
	 * bt3dl el command w el equation lw el rows zado aw el columns mn el datasheet
	 */

}
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	08 95       	ret

00002cd8 <LCD_vSendChar>:
// Send character to LCD To display it
void LCD_vSendChar(u8 DATA)
{
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	0f 92       	push	r0
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62
    2ce2:	89 83       	std	Y+1, r24	; 0x01
	Data_Register_Select();
    2ce4:	0e 94 16 12 	call	0x242c	; 0x242c <Data_Register_Select>
#if defined EIGH_BIT_MODE
	DIO_WritePort(DATA_PORT,DATA);
	enable();
#elif defined FOUR_BIT_MODE
#if defined HIGH_NIBBLE
	DIO_Write_High_Nibble(DATA_PORT,DATA>>FOUR);
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	98 2f       	mov	r25, r24
    2cec:	92 95       	swap	r25
    2cee:	9f 70       	andi	r25, 0x0F	; 15
    2cf0:	81 e4       	ldi	r24, 0x41	; 65
    2cf2:	69 2f       	mov	r22, r25
    2cf4:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <DIO_Write_High_Nibble>
	enable();
    2cf8:	0e 94 15 11 	call	0x222a	; 0x222a <enable>
	DIO_Write_High_Nibble(DATA_PORT,DATA);
    2cfc:	81 e4       	ldi	r24, 0x41	; 65
    2cfe:	69 81       	ldd	r22, Y+1	; 0x01
    2d00:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <DIO_Write_High_Nibble>
	enable();
    2d04:	0e 94 15 11 	call	0x222a	; 0x222a <enable>
	enable();
	DIO_Write_Low_Nibble(DATA_PORT,DATA);
	enable();
#endif // for Nibble
#endif // for Mode
}
    2d08:	0f 90       	pop	r0
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	08 95       	ret

00002d10 <LCD_vSendString>:
// Send String To Print It
void LCD_vSendString(u8 *DATA)
{
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	00 d0       	rcall	.+0      	; 0x2d16 <LCD_vSendString+0x6>
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
    2d1a:	9a 83       	std	Y+2, r25	; 0x02
    2d1c:	89 83       	std	Y+1, r24	; 0x01
    2d1e:	0a c0       	rjmp	.+20     	; 0x2d34 <LCD_vSendString+0x24>
	while ((*DATA) != 0)
	{
		LCD_vSendChar(*DATA);
    2d20:	e9 81       	ldd	r30, Y+1	; 0x01
    2d22:	fa 81       	ldd	r31, Y+2	; 0x02
    2d24:	80 81       	ld	r24, Z
    2d26:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <LCD_vSendChar>
		DATA++;
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2e:	01 96       	adiw	r24, 0x01	; 1
    2d30:	9a 83       	std	Y+2, r25	; 0x02
    2d32:	89 83       	std	Y+1, r24	; 0x01
#endif // for Mode
}
// Send String To Print It
void LCD_vSendString(u8 *DATA)
{
	while ((*DATA) != 0)
    2d34:	e9 81       	ldd	r30, Y+1	; 0x01
    2d36:	fa 81       	ldd	r31, Y+2	; 0x02
    2d38:	80 81       	ld	r24, Z
    2d3a:	88 23       	and	r24, r24
    2d3c:	89 f7       	brne	.-30     	; 0x2d20 <LCD_vSendString+0x10>
	{
		LCD_vSendChar(*DATA);
		DATA++;
	}
}
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	08 95       	ret

00002d48 <LCD_vInit>:
//Initializing LCD
void LCD_vInit()
{
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    2d50:	aa 97       	sbiw	r28, 0x2a	; 42
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	f8 94       	cli
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	cd bf       	out	0x3d, r28	; 61
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	a8 e4       	ldi	r26, 0x48	; 72
    2d62:	b3 e4       	ldi	r27, 0x43	; 67
    2d64:	8f a3       	std	Y+39, r24	; 0x27
    2d66:	98 a7       	std	Y+40, r25	; 0x28
    2d68:	a9 a7       	std	Y+41, r26	; 0x29
    2d6a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d6e:	78 a5       	ldd	r23, Y+40	; 0x28
    2d70:	89 a5       	ldd	r24, Y+41	; 0x29
    2d72:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	4a ef       	ldi	r20, 0xFA	; 250
    2d7a:	54 e4       	ldi	r21, 0x44	; 68
    2d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	8b a3       	std	Y+35, r24	; 0x23
    2d86:	9c a3       	std	Y+36, r25	; 0x24
    2d88:	ad a3       	std	Y+37, r26	; 0x25
    2d8a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d8c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d8e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d90:	8d a1       	ldd	r24, Y+37	; 0x25
    2d92:	9e a1       	ldd	r25, Y+38	; 0x26
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	40 e8       	ldi	r20, 0x80	; 128
    2d9a:	5f e3       	ldi	r21, 0x3F	; 63
    2d9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2da0:	88 23       	and	r24, r24
    2da2:	2c f4       	brge	.+10     	; 0x2dae <LCD_vInit+0x66>
		__ticks = 1;
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	9a a3       	std	Y+34, r25	; 0x22
    2daa:	89 a3       	std	Y+33, r24	; 0x21
    2dac:	3f c0       	rjmp	.+126    	; 0x2e2c <LCD_vInit+0xe4>
	else if (__tmp > 65535)
    2dae:	6b a1       	ldd	r22, Y+35	; 0x23
    2db0:	7c a1       	ldd	r23, Y+36	; 0x24
    2db2:	8d a1       	ldd	r24, Y+37	; 0x25
    2db4:	9e a1       	ldd	r25, Y+38	; 0x26
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	3f ef       	ldi	r19, 0xFF	; 255
    2dba:	4f e7       	ldi	r20, 0x7F	; 127
    2dbc:	57 e4       	ldi	r21, 0x47	; 71
    2dbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dc2:	18 16       	cp	r1, r24
    2dc4:	4c f5       	brge	.+82     	; 0x2e18 <LCD_vInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc6:	6f a1       	ldd	r22, Y+39	; 0x27
    2dc8:	78 a5       	ldd	r23, Y+40	; 0x28
    2dca:	89 a5       	ldd	r24, Y+41	; 0x29
    2dcc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	40 e2       	ldi	r20, 0x20	; 32
    2dd4:	51 e4       	ldi	r21, 0x41	; 65
    2dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	bc 01       	movw	r22, r24
    2de0:	cd 01       	movw	r24, r26
    2de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	9a a3       	std	Y+34, r25	; 0x22
    2dec:	89 a3       	std	Y+33, r24	; 0x21
    2dee:	0f c0       	rjmp	.+30     	; 0x2e0e <LCD_vInit+0xc6>
    2df0:	88 ec       	ldi	r24, 0xC8	; 200
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	98 a3       	std	Y+32, r25	; 0x20
    2df6:	8f 8f       	std	Y+31, r24	; 0x1f
    2df8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dfa:	98 a1       	ldd	r25, Y+32	; 0x20
    2dfc:	01 97       	sbiw	r24, 0x01	; 1
    2dfe:	f1 f7       	brne	.-4      	; 0x2dfc <LCD_vInit+0xb4>
    2e00:	98 a3       	std	Y+32, r25	; 0x20
    2e02:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e04:	89 a1       	ldd	r24, Y+33	; 0x21
    2e06:	9a a1       	ldd	r25, Y+34	; 0x22
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	9a a3       	std	Y+34, r25	; 0x22
    2e0c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e10:	9a a1       	ldd	r25, Y+34	; 0x22
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	69 f7       	brne	.-38     	; 0x2df0 <LCD_vInit+0xa8>
    2e16:	14 c0       	rjmp	.+40     	; 0x2e40 <LCD_vInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e18:	6b a1       	ldd	r22, Y+35	; 0x23
    2e1a:	7c a1       	ldd	r23, Y+36	; 0x24
    2e1c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e1e:	9e a1       	ldd	r25, Y+38	; 0x26
    2e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	9a a3       	std	Y+34, r25	; 0x22
    2e2a:	89 a3       	std	Y+33, r24	; 0x21
    2e2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2e30:	9e 8f       	std	Y+30, r25	; 0x1e
    2e32:	8d 8f       	std	Y+29, r24	; 0x1d
    2e34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e38:	01 97       	sbiw	r24, 0x01	; 1
    2e3a:	f1 f7       	brne	.-4      	; 0x2e38 <LCD_vInit+0xf0>
    2e3c:	9e 8f       	std	Y+30, r25	; 0x1e
    2e3e:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_DiplayON_CursorON();
	LCD_Clear_Screen();
	EntryMode();
#elif defined FOUR_BIT_MODE
#if defined HIGH_NIBBLE
	DIO_Set_High_Nibble_Direction(DATA_PORT,OUTPUT);
    2e40:	81 e4       	ldi	r24, 0x41	; 65
    2e42:	61 e0       	ldi	r22, 0x01	; 1
    2e44:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <DIO_Set_High_Nibble_Direction>
#elif defined LOW_NIBBLE
	DIO_Set_Low_Nibble_Direction(DATA_PORT,OUTPUT);
#endif // For Nibble
	DIO_Set_Pin_Direction(CONTROL_PORT,RS,OUTPUT);
    2e48:	81 e4       	ldi	r24, 0x41	; 65
    2e4a:	61 e0       	ldi	r22, 0x01	; 1
    2e4c:	41 e0       	ldi	r20, 0x01	; 1
    2e4e:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(CONTROL_PORT,RW,OUTPUT);
    2e52:	81 e4       	ldi	r24, 0x41	; 65
    2e54:	62 e0       	ldi	r22, 0x02	; 2
    2e56:	41 e0       	ldi	r20, 0x01	; 1
    2e58:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(CONTROL_PORT,EN,OUTPUT);
    2e5c:	81 e4       	ldi	r24, 0x41	; 65
    2e5e:	60 e0       	ldi	r22, 0x00	; 0
    2e60:	41 e0       	ldi	r20, 0x01	; 1
    2e62:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	//LCD_Data_Direction(0);
	LCD_Send_Cmd(FOUR_BITS_1);
    2e66:	82 e0       	ldi	r24, 0x02	; 2
    2e68:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_Send_Cmd>
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	a0 e8       	ldi	r26, 0x80	; 128
    2e72:	bf e3       	ldi	r27, 0x3F	; 63
    2e74:	89 8f       	std	Y+25, r24	; 0x19
    2e76:	9a 8f       	std	Y+26, r25	; 0x1a
    2e78:	ab 8f       	std	Y+27, r26	; 0x1b
    2e7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	4a ef       	ldi	r20, 0xFA	; 250
    2e8a:	54 e4       	ldi	r21, 0x44	; 68
    2e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	8d 8b       	std	Y+21, r24	; 0x15
    2e96:	9e 8b       	std	Y+22, r25	; 0x16
    2e98:	af 8b       	std	Y+23, r26	; 0x17
    2e9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2ea0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e8       	ldi	r20, 0x80	; 128
    2eaa:	5f e3       	ldi	r21, 0x3F	; 63
    2eac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eb0:	88 23       	and	r24, r24
    2eb2:	2c f4       	brge	.+10     	; 0x2ebe <LCD_vInit+0x176>
		__ticks = 1;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	9c 8b       	std	Y+20, r25	; 0x14
    2eba:	8b 8b       	std	Y+19, r24	; 0x13
    2ebc:	3f c0       	rjmp	.+126    	; 0x2f3c <LCD_vInit+0x1f4>
	else if (__tmp > 65535)
    2ebe:	6d 89       	ldd	r22, Y+21	; 0x15
    2ec0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ec2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ec4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	3f ef       	ldi	r19, 0xFF	; 255
    2eca:	4f e7       	ldi	r20, 0x7F	; 127
    2ecc:	57 e4       	ldi	r21, 0x47	; 71
    2ece:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ed2:	18 16       	cp	r1, r24
    2ed4:	4c f5       	brge	.+82     	; 0x2f28 <LCD_vInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ed8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2edc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	40 e2       	ldi	r20, 0x20	; 32
    2ee4:	51 e4       	ldi	r21, 0x41	; 65
    2ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	bc 01       	movw	r22, r24
    2ef0:	cd 01       	movw	r24, r26
    2ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	9c 8b       	std	Y+20, r25	; 0x14
    2efc:	8b 8b       	std	Y+19, r24	; 0x13
    2efe:	0f c0       	rjmp	.+30     	; 0x2f1e <LCD_vInit+0x1d6>
    2f00:	88 ec       	ldi	r24, 0xC8	; 200
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	9a 8b       	std	Y+18, r25	; 0x12
    2f06:	89 8b       	std	Y+17, r24	; 0x11
    2f08:	89 89       	ldd	r24, Y+17	; 0x11
    2f0a:	9a 89       	ldd	r25, Y+18	; 0x12
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <LCD_vInit+0x1c4>
    2f10:	9a 8b       	std	Y+18, r25	; 0x12
    2f12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f14:	8b 89       	ldd	r24, Y+19	; 0x13
    2f16:	9c 89       	ldd	r25, Y+20	; 0x14
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	9c 8b       	std	Y+20, r25	; 0x14
    2f1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f20:	9c 89       	ldd	r25, Y+20	; 0x14
    2f22:	00 97       	sbiw	r24, 0x00	; 0
    2f24:	69 f7       	brne	.-38     	; 0x2f00 <LCD_vInit+0x1b8>
    2f26:	14 c0       	rjmp	.+40     	; 0x2f50 <LCD_vInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f28:	6d 89       	ldd	r22, Y+21	; 0x15
    2f2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	9c 8b       	std	Y+20, r25	; 0x14
    2f3a:	8b 8b       	std	Y+19, r24	; 0x13
    2f3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f40:	98 8b       	std	Y+16, r25	; 0x10
    2f42:	8f 87       	std	Y+15, r24	; 0x0f
    2f44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f46:	98 89       	ldd	r25, Y+16	; 0x10
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	f1 f7       	brne	.-4      	; 0x2f48 <LCD_vInit+0x200>
    2f4c:	98 8b       	std	Y+16, r25	; 0x10
    2f4e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_Send_Cmd(FOUR_BITS_2);
    2f50:	88 e2       	ldi	r24, 0x28	; 40
    2f52:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_Send_Cmd>
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	a0 e8       	ldi	r26, 0x80	; 128
    2f5c:	bf e3       	ldi	r27, 0x3F	; 63
    2f5e:	8b 87       	std	Y+11, r24	; 0x0b
    2f60:	9c 87       	std	Y+12, r25	; 0x0c
    2f62:	ad 87       	std	Y+13, r26	; 0x0d
    2f64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	4a ef       	ldi	r20, 0xFA	; 250
    2f74:	54 e4       	ldi	r21, 0x44	; 68
    2f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	8f 83       	std	Y+7, r24	; 0x07
    2f80:	98 87       	std	Y+8, r25	; 0x08
    2f82:	a9 87       	std	Y+9, r26	; 0x09
    2f84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f86:	6f 81       	ldd	r22, Y+7	; 0x07
    2f88:	78 85       	ldd	r23, Y+8	; 0x08
    2f8a:	89 85       	ldd	r24, Y+9	; 0x09
    2f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	40 e8       	ldi	r20, 0x80	; 128
    2f94:	5f e3       	ldi	r21, 0x3F	; 63
    2f96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f9a:	88 23       	and	r24, r24
    2f9c:	2c f4       	brge	.+10     	; 0x2fa8 <LCD_vInit+0x260>
		__ticks = 1;
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	9e 83       	std	Y+6, r25	; 0x06
    2fa4:	8d 83       	std	Y+5, r24	; 0x05
    2fa6:	3f c0       	rjmp	.+126    	; 0x3026 <LCD_vInit+0x2de>
	else if (__tmp > 65535)
    2fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    2faa:	78 85       	ldd	r23, Y+8	; 0x08
    2fac:	89 85       	ldd	r24, Y+9	; 0x09
    2fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	3f ef       	ldi	r19, 0xFF	; 255
    2fb4:	4f e7       	ldi	r20, 0x7F	; 127
    2fb6:	57 e4       	ldi	r21, 0x47	; 71
    2fb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fbc:	18 16       	cp	r1, r24
    2fbe:	4c f5       	brge	.+82     	; 0x3012 <LCD_vInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	40 e2       	ldi	r20, 0x20	; 32
    2fce:	51 e4       	ldi	r21, 0x41	; 65
    2fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	bc 01       	movw	r22, r24
    2fda:	cd 01       	movw	r24, r26
    2fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	9e 83       	std	Y+6, r25	; 0x06
    2fe6:	8d 83       	std	Y+5, r24	; 0x05
    2fe8:	0f c0       	rjmp	.+30     	; 0x3008 <LCD_vInit+0x2c0>
    2fea:	88 ec       	ldi	r24, 0xC8	; 200
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	9c 83       	std	Y+4, r25	; 0x04
    2ff0:	8b 83       	std	Y+3, r24	; 0x03
    2ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	f1 f7       	brne	.-4      	; 0x2ff6 <LCD_vInit+0x2ae>
    2ffa:	9c 83       	std	Y+4, r25	; 0x04
    2ffc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    3000:	9e 81       	ldd	r25, Y+6	; 0x06
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	9e 83       	std	Y+6, r25	; 0x06
    3006:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3008:	8d 81       	ldd	r24, Y+5	; 0x05
    300a:	9e 81       	ldd	r25, Y+6	; 0x06
    300c:	00 97       	sbiw	r24, 0x00	; 0
    300e:	69 f7       	brne	.-38     	; 0x2fea <LCD_vInit+0x2a2>
    3010:	14 c0       	rjmp	.+40     	; 0x303a <LCD_vInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3012:	6f 81       	ldd	r22, Y+7	; 0x07
    3014:	78 85       	ldd	r23, Y+8	; 0x08
    3016:	89 85       	ldd	r24, Y+9	; 0x09
    3018:	9a 85       	ldd	r25, Y+10	; 0x0a
    301a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	9e 83       	std	Y+6, r25	; 0x06
    3024:	8d 83       	std	Y+5, r24	; 0x05
    3026:	8d 81       	ldd	r24, Y+5	; 0x05
    3028:	9e 81       	ldd	r25, Y+6	; 0x06
    302a:	9a 83       	std	Y+2, r25	; 0x02
    302c:	89 83       	std	Y+1, r24	; 0x01
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	9a 81       	ldd	r25, Y+2	; 0x02
    3032:	01 97       	sbiw	r24, 0x01	; 1
    3034:	f1 f7       	brne	.-4      	; 0x3032 <LCD_vInit+0x2ea>
    3036:	9a 83       	std	Y+2, r25	; 0x02
    3038:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_Return_Home();
    303a:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <LCD_Return_Home>
	LCD_DiplayON_CursorON();
    303e:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_DiplayON_CursorON>
	LCD_Clear_Screen();
    3042:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_Clear_Screen>
	EntryMode();
    3046:	0e 94 69 13 	call	0x26d2	; 0x26d2 <EntryMode>
#endif // For Mode
}
    304a:	aa 96       	adiw	r28, 0x2a	; 42
    304c:	0f b6       	in	r0, 0x3f	; 63
    304e:	f8 94       	cli
    3050:	de bf       	out	0x3e, r29	; 62
    3052:	0f be       	out	0x3f, r0	; 63
    3054:	cd bf       	out	0x3d, r28	; 61
    3056:	cf 91       	pop	r28
    3058:	df 91       	pop	r29
    305a:	08 95       	ret

0000305c <LCD_Integer_To_String>:
void LCD_Integer_To_String(uint16 DATA)
{
    305c:	df 93       	push	r29
    305e:	cf 93       	push	r28
    3060:	cd b7       	in	r28, 0x3d	; 61
    3062:	de b7       	in	r29, 0x3e	; 62
    3064:	62 97       	sbiw	r28, 0x12	; 18
    3066:	0f b6       	in	r0, 0x3f	; 63
    3068:	f8 94       	cli
    306a:	de bf       	out	0x3e, r29	; 62
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	cd bf       	out	0x3d, r28	; 61
    3070:	9a 8b       	std	Y+18, r25	; 0x12
    3072:	89 8b       	std	Y+17, r24	; 0x11
	char BUFF[16]; /* String to hold the ascii result */
	itoa(DATA,BUFF,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3074:	89 89       	ldd	r24, Y+17	; 0x11
    3076:	9a 89       	ldd	r25, Y+18	; 0x12
    3078:	9e 01       	movw	r18, r28
    307a:	2f 5f       	subi	r18, 0xFF	; 255
    307c:	3f 4f       	sbci	r19, 0xFF	; 255
    307e:	b9 01       	movw	r22, r18
    3080:	4a e0       	ldi	r20, 0x0A	; 10
    3082:	50 e0       	ldi	r21, 0x00	; 0
    3084:	0e 94 25 22 	call	0x444a	; 0x444a <itoa>
	LCD_vSendString(BUFF); /* Display the string */
    3088:	ce 01       	movw	r24, r28
    308a:	01 96       	adiw	r24, 0x01	; 1
    308c:	0e 94 88 16 	call	0x2d10	; 0x2d10 <LCD_vSendString>
}
    3090:	62 96       	adiw	r28, 0x12	; 18
    3092:	0f b6       	in	r0, 0x3f	; 63
    3094:	f8 94       	cli
    3096:	de bf       	out	0x3e, r29	; 62
    3098:	0f be       	out	0x3f, r0	; 63
    309a:	cd bf       	out	0x3d, r28	; 61
    309c:	cf 91       	pop	r28
    309e:	df 91       	pop	r29
    30a0:	08 95       	ret

000030a2 <Timer0_Set_Clk>:
/*====================================================================================*/
/* Timer0 Funtions */
/*====================================================================================*/

void Timer0_Set_Clk()
{
    30a2:	df 93       	push	r29
    30a4:	cf 93       	push	r28
    30a6:	cd b7       	in	r28, 0x3d	; 61
    30a8:	de b7       	in	r29, 0x3e	; 62
#elif TIMER0_DIVIDE_CLK_BY_256
	CLEAR_BIT(TCCR0,CS00);
	CLEAR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS02);
#elif TIMER0_DIVIDE_CLK_BY_1024
	SET_BIT(TCCR0,CS00);
    30aa:	a3 e5       	ldi	r26, 0x53	; 83
    30ac:	b0 e0       	ldi	r27, 0x00	; 0
    30ae:	e3 e5       	ldi	r30, 0x53	; 83
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	80 81       	ld	r24, Z
    30b4:	81 60       	ori	r24, 0x01	; 1
    30b6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS01);
    30b8:	a3 e5       	ldi	r26, 0x53	; 83
    30ba:	b0 e0       	ldi	r27, 0x00	; 0
    30bc:	e3 e5       	ldi	r30, 0x53	; 83
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	80 81       	ld	r24, Z
    30c2:	8d 7f       	andi	r24, 0xFD	; 253
    30c4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
    30c6:	a3 e5       	ldi	r26, 0x53	; 83
    30c8:	b0 e0       	ldi	r27, 0x00	; 0
    30ca:	e3 e5       	ldi	r30, 0x53	; 83
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	80 81       	ld	r24, Z
    30d0:	84 60       	ori	r24, 0x04	; 4
    30d2:	8c 93       	st	X, r24
#endif
}
    30d4:	cf 91       	pop	r28
    30d6:	df 91       	pop	r29
    30d8:	08 95       	ret

000030da <Timer0_Stop_Count>:
void Timer0_Stop_Count()
{
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR0,CS00);
    30e2:	a3 e5       	ldi	r26, 0x53	; 83
    30e4:	b0 e0       	ldi	r27, 0x00	; 0
    30e6:	e3 e5       	ldi	r30, 0x53	; 83
    30e8:	f0 e0       	ldi	r31, 0x00	; 0
    30ea:	80 81       	ld	r24, Z
    30ec:	8e 7f       	andi	r24, 0xFE	; 254
    30ee:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS01);
    30f0:	a3 e5       	ldi	r26, 0x53	; 83
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
    30f4:	e3 e5       	ldi	r30, 0x53	; 83
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	80 81       	ld	r24, Z
    30fa:	8d 7f       	andi	r24, 0xFD	; 253
    30fc:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS02);
    30fe:	a3 e5       	ldi	r26, 0x53	; 83
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	e3 e5       	ldi	r30, 0x53	; 83
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 81       	ld	r24, Z
    3108:	8b 7f       	andi	r24, 0xFB	; 251
    310a:	8c 93       	st	X, r24
}
    310c:	cf 91       	pop	r28
    310e:	df 91       	pop	r29
    3110:	08 95       	ret

00003112 <Timer0_Start_Count>:
void Timer0_Start_Count()
{
    3112:	df 93       	push	r29
    3114:	cf 93       	push	r28
    3116:	cd b7       	in	r28, 0x3d	; 61
    3118:	de b7       	in	r29, 0x3e	; 62
	Timer0_Set_Clk();
    311a:	0e 94 51 18 	call	0x30a2	; 0x30a2 <Timer0_Set_Clk>
}
    311e:	cf 91       	pop	r28
    3120:	df 91       	pop	r29
    3122:	08 95       	ret

00003124 <Timer0_Pin_T0_Sense>:
void Timer0_Pin_T0_Sense()
{
    3124:	df 93       	push	r29
    3126:	cf 93       	push	r28
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_EXTERNAL_FALLING_EDGE
	CLEAR_BIT(TCCR0,CS00);
	SET_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS02);
#elif TIMER0_EXTERNAL_RISING_EDGE
	SET_BIT(TCCR0,CS00);
    312c:	a3 e5       	ldi	r26, 0x53	; 83
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	e3 e5       	ldi	r30, 0x53	; 83
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	81 60       	ori	r24, 0x01	; 1
    3138:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    313a:	a3 e5       	ldi	r26, 0x53	; 83
    313c:	b0 e0       	ldi	r27, 0x00	; 0
    313e:	e3 e5       	ldi	r30, 0x53	; 83
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	80 81       	ld	r24, Z
    3144:	82 60       	ori	r24, 0x02	; 2
    3146:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
    3148:	a3 e5       	ldi	r26, 0x53	; 83
    314a:	b0 e0       	ldi	r27, 0x00	; 0
    314c:	e3 e5       	ldi	r30, 0x53	; 83
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	80 81       	ld	r24, Z
    3152:	84 60       	ori	r24, 0x04	; 4
    3154:	8c 93       	st	X, r24
#endif
}
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <Timer0_Set_OverFlow_Mode>:
void Timer0_Set_OverFlow_Mode()
{
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	cd b7       	in	r28, 0x3d	; 61
    3162:	de b7       	in	r29, 0x3e	; 62
	/* Set the Timer Mode to overflow mode */
	CLEAR_BIT(TCCR0,WGM00);
    3164:	a3 e5       	ldi	r26, 0x53	; 83
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	e3 e5       	ldi	r30, 0x53	; 83
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	8f 7b       	andi	r24, 0xBF	; 191
    3170:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,WGM01);
    3172:	a3 e5       	ldi	r26, 0x53	; 83
    3174:	b0 e0       	ldi	r27, 0x00	; 0
    3176:	e3 e5       	ldi	r30, 0x53	; 83
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	80 81       	ld	r24, Z
    317c:	87 7f       	andi	r24, 0xF7	; 247
    317e:	8c 93       	st	X, r24
	/* Set Global Interrupt */
	Set_Global_Interrupt();
    3180:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <Set_Global_Interrupt>
	/* Set TOIE0 BIT */
	SET_BIT(TIMSK,TOIE0);
    3184:	a9 e5       	ldi	r26, 0x59	; 89
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	e9 e5       	ldi	r30, 0x59	; 89
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	81 60       	ori	r24, 0x01	; 1
    3190:	8c 93       	st	X, r24
	/* Set the Timer Clk */
	Timer0_Start_Count();
    3192:	0e 94 89 18 	call	0x3112	; 0x3112 <Timer0_Start_Count>
}
    3196:	cf 91       	pop	r28
    3198:	df 91       	pop	r29
    319a:	08 95       	ret

0000319c <Timer0_Set_CTC_Mode>:
void Timer0_Set_CTC_Mode(u8 OCRO_VALUE)
{
    319c:	df 93       	push	r29
    319e:	cf 93       	push	r28
    31a0:	0f 92       	push	r0
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62
    31a6:	89 83       	std	Y+1, r24	; 0x01
	/* Set the Timer Mode to CTC mode */
	CLEAR_BIT(TCCR0,WGM00);
    31a8:	a3 e5       	ldi	r26, 0x53	; 83
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	e3 e5       	ldi	r30, 0x53	; 83
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	8f 7b       	andi	r24, 0xBF	; 191
    31b4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    31b6:	a3 e5       	ldi	r26, 0x53	; 83
    31b8:	b0 e0       	ldi	r27, 0x00	; 0
    31ba:	e3 e5       	ldi	r30, 0x53	; 83
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	80 81       	ld	r24, Z
    31c0:	88 60       	ori	r24, 0x08	; 8
    31c2:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0 = OCRO_VALUE;
    31c4:	ec e5       	ldi	r30, 0x5C	; 92
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	80 83       	st	Z, r24
	/* Set Global Interrupt */
	Set_Global_Interrupt();
    31cc:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <Set_Global_Interrupt>
	/* Set OCIE0 BIT */
	SET_BIT(TIMSK,OCIE0);
    31d0:	a9 e5       	ldi	r26, 0x59	; 89
    31d2:	b0 e0       	ldi	r27, 0x00	; 0
    31d4:	e9 e5       	ldi	r30, 0x59	; 89
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	80 81       	ld	r24, Z
    31da:	82 60       	ori	r24, 0x02	; 2
    31dc:	8c 93       	st	X, r24
	/* Set the Timer Clk */
	Timer0_Start_Count();
    31de:	0e 94 89 18 	call	0x3112	; 0x3112 <Timer0_Start_Count>
}
    31e2:	0f 90       	pop	r0
    31e4:	cf 91       	pop	r28
    31e6:	df 91       	pop	r29
    31e8:	08 95       	ret

000031ea <Timer0_CTC_Generate_Signal>:
void Timer0_CTC_Generate_Signal(u8 OCRO_VALUE)
{
    31ea:	df 93       	push	r29
    31ec:	cf 93       	push	r28
    31ee:	0f 92       	push	r0
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
    31f4:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_B,PIN_NO_3,OUTPUT);
    31f6:	82 e4       	ldi	r24, 0x42	; 66
    31f8:	63 e0       	ldi	r22, 0x03	; 3
    31fa:	41 e0       	ldi	r20, 0x01	; 1
    31fc:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to CTC mode */
	CLEAR_BIT(TCCR0,WGM00);
    3200:	a3 e5       	ldi	r26, 0x53	; 83
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	e3 e5       	ldi	r30, 0x53	; 83
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	80 81       	ld	r24, Z
    320a:	8f 7b       	andi	r24, 0xBF	; 191
    320c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    320e:	a3 e5       	ldi	r26, 0x53	; 83
    3210:	b0 e0       	ldi	r27, 0x00	; 0
    3212:	e3 e5       	ldi	r30, 0x53	; 83
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	80 81       	ld	r24, Z
    3218:	88 60       	ori	r24, 0x08	; 8
    321a:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0 = OCRO_VALUE;
    321c:	ec e5       	ldi	r30, 0x5C	; 92
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	89 81       	ldd	r24, Y+1	; 0x01
    3222:	80 83       	st	Z, r24
	/* Set Signal to be Toggle at Compare Match*/
	/* Pin PB3 ( OCO ) */
	SET_BIT(TCCR0,COM00);
    3224:	a3 e5       	ldi	r26, 0x53	; 83
    3226:	b0 e0       	ldi	r27, 0x00	; 0
    3228:	e3 e5       	ldi	r30, 0x53	; 83
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	80 81       	ld	r24, Z
    322e:	80 61       	ori	r24, 0x10	; 16
    3230:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,COM01);
    3232:	a3 e5       	ldi	r26, 0x53	; 83
    3234:	b0 e0       	ldi	r27, 0x00	; 0
    3236:	e3 e5       	ldi	r30, 0x53	; 83
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	80 81       	ld	r24, Z
    323c:	8f 7d       	andi	r24, 0xDF	; 223
    323e:	8c 93       	st	X, r24
	/* Set the Timer Clk */
	Timer0_Start_Count();
    3240:	0e 94 89 18 	call	0x3112	; 0x3112 <Timer0_Start_Count>
}
    3244:	0f 90       	pop	r0
    3246:	cf 91       	pop	r28
    3248:	df 91       	pop	r29
    324a:	08 95       	ret

0000324c <Timer0_Set_FastPWM_Mode>:
void Timer0_Set_FastPWM_Mode(u8 OCRO_VALUE)
{
    324c:	df 93       	push	r29
    324e:	cf 93       	push	r28
    3250:	0f 92       	push	r0
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_B,PIN_NO_3,OUTPUT);
    3258:	82 e4       	ldi	r24, 0x42	; 66
    325a:	63 e0       	ldi	r22, 0x03	; 3
    325c:	41 e0       	ldi	r20, 0x01	; 1
    325e:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Fast PWM mode */
	SET_BIT(TCCR0,WGM00);
    3262:	a3 e5       	ldi	r26, 0x53	; 83
    3264:	b0 e0       	ldi	r27, 0x00	; 0
    3266:	e3 e5       	ldi	r30, 0x53	; 83
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	80 81       	ld	r24, Z
    326c:	80 64       	ori	r24, 0x40	; 64
    326e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    3270:	a3 e5       	ldi	r26, 0x53	; 83
    3272:	b0 e0       	ldi	r27, 0x00	; 0
    3274:	e3 e5       	ldi	r30, 0x53	; 83
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	88 60       	ori	r24, 0x08	; 8
    327c:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0 = OCRO_VALUE;
    327e:	ec e5       	ldi	r30, 0x5C	; 92
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	89 81       	ldd	r24, Y+1	; 0x01
    3284:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer0_Set_Clk();
    3286:	0e 94 51 18 	call	0x30a2	; 0x30a2 <Timer0_Set_Clk>
	/* Set PWM On / Off  */
#if TIMER0_SET_OCO_ON_BOTTOM
	CLEAR_BIT(TCCR0,COM00);
    328a:	a3 e5       	ldi	r26, 0x53	; 83
    328c:	b0 e0       	ldi	r27, 0x00	; 0
    328e:	e3 e5       	ldi	r30, 0x53	; 83
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	80 81       	ld	r24, Z
    3294:	8f 7e       	andi	r24, 0xEF	; 239
    3296:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    3298:	a3 e5       	ldi	r26, 0x53	; 83
    329a:	b0 e0       	ldi	r27, 0x00	; 0
    329c:	e3 e5       	ldi	r30, 0x53	; 83
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	80 81       	ld	r24, Z
    32a2:	80 62       	ori	r24, 0x20	; 32
    32a4:	8c 93       	st	X, r24
#elif TIMER0_SET_OCO_ON_COMPARE_MATCH
	SET_BIT(TCCR0,COM00);
	SET_BIT(TCCR0,COM01);
#endif
}
    32a6:	0f 90       	pop	r0
    32a8:	cf 91       	pop	r28
    32aa:	df 91       	pop	r29
    32ac:	08 95       	ret

000032ae <PWM_Timer0_Generate>:
void PWM_Timer0_Generate(u8 SPEED_PERCENT)
{
    32ae:	df 93       	push	r29
    32b0:	cf 93       	push	r28
    32b2:	0f 92       	push	r0
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
    32b8:	89 83       	std	Y+1, r24	; 0x01
	Timer0_Set_FastPWM_Mode((SPEED_PERCENT * 2.55));
    32ba:	89 81       	ldd	r24, Y+1	; 0x01
    32bc:	88 2f       	mov	r24, r24
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	aa 27       	eor	r26, r26
    32c2:	97 fd       	sbrc	r25, 7
    32c4:	a0 95       	com	r26
    32c6:	ba 2f       	mov	r27, r26
    32c8:	bc 01       	movw	r22, r24
    32ca:	cd 01       	movw	r24, r26
    32cc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	bc 01       	movw	r22, r24
    32d6:	cd 01       	movw	r24, r26
    32d8:	23 e3       	ldi	r18, 0x33	; 51
    32da:	33 e3       	ldi	r19, 0x33	; 51
    32dc:	43 e2       	ldi	r20, 0x23	; 35
    32de:	50 e4       	ldi	r21, 0x40	; 64
    32e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	bc 01       	movw	r22, r24
    32ea:	cd 01       	movw	r24, r26
    32ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	0e 94 26 19 	call	0x324c	; 0x324c <Timer0_Set_FastPWM_Mode>
}
    32f8:	0f 90       	pop	r0
    32fa:	cf 91       	pop	r28
    32fc:	df 91       	pop	r29
    32fe:	08 95       	ret

00003300 <Timer0_Set_PhaseCorrect_PWM_Mode>:
void Timer0_Set_PhaseCorrect_PWM_Mode(u8 OCRO_VALUE)
{
    3300:	df 93       	push	r29
    3302:	cf 93       	push	r28
    3304:	0f 92       	push	r0
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_B,PIN_NO_3,OUTPUT);
    330c:	82 e4       	ldi	r24, 0x42	; 66
    330e:	63 e0       	ldi	r22, 0x03	; 3
    3310:	41 e0       	ldi	r20, 0x01	; 1
    3312:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Phase Correct PWM mode */
	SET_BIT(TCCR0,WGM00);
    3316:	a3 e5       	ldi	r26, 0x53	; 83
    3318:	b0 e0       	ldi	r27, 0x00	; 0
    331a:	e3 e5       	ldi	r30, 0x53	; 83
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	80 81       	ld	r24, Z
    3320:	80 64       	ori	r24, 0x40	; 64
    3322:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,WGM01);
    3324:	a3 e5       	ldi	r26, 0x53	; 83
    3326:	b0 e0       	ldi	r27, 0x00	; 0
    3328:	e3 e5       	ldi	r30, 0x53	; 83
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	80 81       	ld	r24, Z
    332e:	87 7f       	andi	r24, 0xF7	; 247
    3330:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0 = OCRO_VALUE;
    3332:	ec e5       	ldi	r30, 0x5C	; 92
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer0_Set_Clk();
    333a:	0e 94 51 18 	call	0x30a2	; 0x30a2 <Timer0_Set_Clk>
#if TIMER0_SET_OCO_ON_DOWN_COUNTING
	CLEAR_BIT(TCCR0,COM00);
    333e:	a3 e5       	ldi	r26, 0x53	; 83
    3340:	b0 e0       	ldi	r27, 0x00	; 0
    3342:	e3 e5       	ldi	r30, 0x53	; 83
    3344:	f0 e0       	ldi	r31, 0x00	; 0
    3346:	80 81       	ld	r24, Z
    3348:	8f 7e       	andi	r24, 0xEF	; 239
    334a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    334c:	a3 e5       	ldi	r26, 0x53	; 83
    334e:	b0 e0       	ldi	r27, 0x00	; 0
    3350:	e3 e5       	ldi	r30, 0x53	; 83
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	80 81       	ld	r24, Z
    3356:	80 62       	ori	r24, 0x20	; 32
    3358:	8c 93       	st	X, r24
#elif TIMER0_SET_OCO_ON_UP_COUNTING
	SET_BIT(TCCR0,COM00);
	SET_BIT(TCCR0,COM01);
#endif
}
    335a:	0f 90       	pop	r0
    335c:	cf 91       	pop	r28
    335e:	df 91       	pop	r29
    3360:	08 95       	ret

00003362 <Timer0_Clear_TCNT0>:
void Timer0_Clear_TCNT0()
{
    3362:	df 93       	push	r29
    3364:	cf 93       	push	r28
    3366:	cd b7       	in	r28, 0x3d	; 61
    3368:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    336a:	e2 e5       	ldi	r30, 0x52	; 82
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	10 82       	st	Z, r1
}
    3370:	cf 91       	pop	r28
    3372:	df 91       	pop	r29
    3374:	08 95       	ret

00003376 <Timer1_Set_Clk>:
/*====================================================================================*/
/* Timer 1 Functions*/
/*====================================================================================*/

void Timer1_Set_Clk()
{
    3376:	df 93       	push	r29
    3378:	cf 93       	push	r28
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
#elif TIMER1_DIVIDE_CLK_BY_256
	CLEAR_BIT(TCCR1B,CS10);
	CLEAR_BIT(TCCR1B,CS11);
	SET_BIT(TCCR1B,CS12);
#elif TIMER1_DIVIDE_CLK_BY_1024
	SET_BIT(TCCR1B,CS10);
    337e:	ae e4       	ldi	r26, 0x4E	; 78
    3380:	b0 e0       	ldi	r27, 0x00	; 0
    3382:	ee e4       	ldi	r30, 0x4E	; 78
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	80 81       	ld	r24, Z
    3388:	81 60       	ori	r24, 0x01	; 1
    338a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS11);
    338c:	ae e4       	ldi	r26, 0x4E	; 78
    338e:	b0 e0       	ldi	r27, 0x00	; 0
    3390:	ee e4       	ldi	r30, 0x4E	; 78
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	80 81       	ld	r24, Z
    3396:	8d 7f       	andi	r24, 0xFD	; 253
    3398:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS12);
    339a:	ae e4       	ldi	r26, 0x4E	; 78
    339c:	b0 e0       	ldi	r27, 0x00	; 0
    339e:	ee e4       	ldi	r30, 0x4E	; 78
    33a0:	f0 e0       	ldi	r31, 0x00	; 0
    33a2:	80 81       	ld	r24, Z
    33a4:	84 60       	ori	r24, 0x04	; 4
    33a6:	8c 93       	st	X, r24
#endif
}
    33a8:	cf 91       	pop	r28
    33aa:	df 91       	pop	r29
    33ac:	08 95       	ret

000033ae <Timer1_Stop_Count>:
void Timer1_Stop_Count()
{
    33ae:	df 93       	push	r29
    33b0:	cf 93       	push	r28
    33b2:	cd b7       	in	r28, 0x3d	; 61
    33b4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1B,CS10);
    33b6:	ae e4       	ldi	r26, 0x4E	; 78
    33b8:	b0 e0       	ldi	r27, 0x00	; 0
    33ba:	ee e4       	ldi	r30, 0x4E	; 78
    33bc:	f0 e0       	ldi	r31, 0x00	; 0
    33be:	80 81       	ld	r24, Z
    33c0:	8e 7f       	andi	r24, 0xFE	; 254
    33c2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS11);
    33c4:	ae e4       	ldi	r26, 0x4E	; 78
    33c6:	b0 e0       	ldi	r27, 0x00	; 0
    33c8:	ee e4       	ldi	r30, 0x4E	; 78
    33ca:	f0 e0       	ldi	r31, 0x00	; 0
    33cc:	80 81       	ld	r24, Z
    33ce:	8d 7f       	andi	r24, 0xFD	; 253
    33d0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS12);
    33d2:	ae e4       	ldi	r26, 0x4E	; 78
    33d4:	b0 e0       	ldi	r27, 0x00	; 0
    33d6:	ee e4       	ldi	r30, 0x4E	; 78
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	80 81       	ld	r24, Z
    33dc:	8b 7f       	andi	r24, 0xFB	; 251
    33de:	8c 93       	st	X, r24
}
    33e0:	cf 91       	pop	r28
    33e2:	df 91       	pop	r29
    33e4:	08 95       	ret

000033e6 <Timer1_Start_Count>:
void Timer1_Start_Count()
{
    33e6:	df 93       	push	r29
    33e8:	cf 93       	push	r28
    33ea:	cd b7       	in	r28, 0x3d	; 61
    33ec:	de b7       	in	r29, 0x3e	; 62
	Timer1_Set_Clk();
    33ee:	0e 94 bb 19 	call	0x3376	; 0x3376 <Timer1_Set_Clk>
}
    33f2:	cf 91       	pop	r28
    33f4:	df 91       	pop	r29
    33f6:	08 95       	ret

000033f8 <Timer1_Pin_T1_Sense>:
void Timer1_Pin_T1_Sense()
{
    33f8:	df 93       	push	r29
    33fa:	cf 93       	push	r28
    33fc:	cd b7       	in	r28, 0x3d	; 61
    33fe:	de b7       	in	r29, 0x3e	; 62
#if TIMER1_EXTERNAL_FALLING_EDGE
	CLEAR_BIT(TCCR1B,CS10);
	SET_BIT(TCCR1B,CS11);
	SET_BIT(TCCR1B,CS12);
#elif TIMER1_EXTERNAL_RISING_EDGE
	SET_BIT(TCCR1B,CS10);
    3400:	ae e4       	ldi	r26, 0x4E	; 78
    3402:	b0 e0       	ldi	r27, 0x00	; 0
    3404:	ee e4       	ldi	r30, 0x4E	; 78
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	80 81       	ld	r24, Z
    340a:	81 60       	ori	r24, 0x01	; 1
    340c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    340e:	ae e4       	ldi	r26, 0x4E	; 78
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	ee e4       	ldi	r30, 0x4E	; 78
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	80 81       	ld	r24, Z
    3418:	82 60       	ori	r24, 0x02	; 2
    341a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS12);
    341c:	ae e4       	ldi	r26, 0x4E	; 78
    341e:	b0 e0       	ldi	r27, 0x00	; 0
    3420:	ee e4       	ldi	r30, 0x4E	; 78
    3422:	f0 e0       	ldi	r31, 0x00	; 0
    3424:	80 81       	ld	r24, Z
    3426:	84 60       	ori	r24, 0x04	; 4
    3428:	8c 93       	st	X, r24
#endif
}
    342a:	cf 91       	pop	r28
    342c:	df 91       	pop	r29
    342e:	08 95       	ret

00003430 <Timer1_Set_OverFlow_Mode>:
void Timer1_Set_OverFlow_Mode()
{
    3430:	df 93       	push	r29
    3432:	cf 93       	push	r28
    3434:	cd b7       	in	r28, 0x3d	; 61
    3436:	de b7       	in	r29, 0x3e	; 62
	/* Set the Timer Mode to overflow mode */
	CLEAR_BIT(TCCR1A,WGM10);
    3438:	af e4       	ldi	r26, 0x4F	; 79
    343a:	b0 e0       	ldi	r27, 0x00	; 0
    343c:	ef e4       	ldi	r30, 0x4F	; 79
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	80 81       	ld	r24, Z
    3442:	8e 7f       	andi	r24, 0xFE	; 254
    3444:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    3446:	af e4       	ldi	r26, 0x4F	; 79
    3448:	b0 e0       	ldi	r27, 0x00	; 0
    344a:	ef e4       	ldi	r30, 0x4F	; 79
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	80 81       	ld	r24, Z
    3450:	8d 7f       	andi	r24, 0xFD	; 253
    3452:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM12);
    3454:	ae e4       	ldi	r26, 0x4E	; 78
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	ee e4       	ldi	r30, 0x4E	; 78
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	80 81       	ld	r24, Z
    345e:	87 7f       	andi	r24, 0xF7	; 247
    3460:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    3462:	ae e4       	ldi	r26, 0x4E	; 78
    3464:	b0 e0       	ldi	r27, 0x00	; 0
    3466:	ee e4       	ldi	r30, 0x4E	; 78
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	80 81       	ld	r24, Z
    346c:	8f 7e       	andi	r24, 0xEF	; 239
    346e:	8c 93       	st	X, r24
	/* Set Global Interrupt */
	Set_Global_Interrupt();
    3470:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <Set_Global_Interrupt>
	/* Set TOIE0 BIT */
	SET_BIT(TIMSK,TOIE1);
    3474:	a9 e5       	ldi	r26, 0x59	; 89
    3476:	b0 e0       	ldi	r27, 0x00	; 0
    3478:	e9 e5       	ldi	r30, 0x59	; 89
    347a:	f0 e0       	ldi	r31, 0x00	; 0
    347c:	80 81       	ld	r24, Z
    347e:	84 60       	ori	r24, 0x04	; 4
    3480:	8c 93       	st	X, r24
	/* Set the Timer Clk */
	Timer1_Start_Count();
    3482:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <Timer1_Start_Count>
}
    3486:	cf 91       	pop	r28
    3488:	df 91       	pop	r29
    348a:	08 95       	ret

0000348c <Timer1_Set_OCRA_CTC_Mode>:
void Timer1_Set_OCRA_CTC_Mode(u16 OCR1A_VALUE)
{
    348c:	df 93       	push	r29
    348e:	cf 93       	push	r28
    3490:	00 d0       	rcall	.+0      	; 0x3492 <Timer1_Set_OCRA_CTC_Mode+0x6>
    3492:	cd b7       	in	r28, 0x3d	; 61
    3494:	de b7       	in	r29, 0x3e	; 62
    3496:	9a 83       	std	Y+2, r25	; 0x02
    3498:	89 83       	std	Y+1, r24	; 0x01
	/* Set the Timer Mode to CTC A mode */
	CLEAR_BIT(TCCR1A,WGM10);
    349a:	af e4       	ldi	r26, 0x4F	; 79
    349c:	b0 e0       	ldi	r27, 0x00	; 0
    349e:	ef e4       	ldi	r30, 0x4F	; 79
    34a0:	f0 e0       	ldi	r31, 0x00	; 0
    34a2:	80 81       	ld	r24, Z
    34a4:	8e 7f       	andi	r24, 0xFE	; 254
    34a6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    34a8:	af e4       	ldi	r26, 0x4F	; 79
    34aa:	b0 e0       	ldi	r27, 0x00	; 0
    34ac:	ef e4       	ldi	r30, 0x4F	; 79
    34ae:	f0 e0       	ldi	r31, 0x00	; 0
    34b0:	80 81       	ld	r24, Z
    34b2:	8d 7f       	andi	r24, 0xFD	; 253
    34b4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    34b6:	ae e4       	ldi	r26, 0x4E	; 78
    34b8:	b0 e0       	ldi	r27, 0x00	; 0
    34ba:	ee e4       	ldi	r30, 0x4E	; 78
    34bc:	f0 e0       	ldi	r31, 0x00	; 0
    34be:	80 81       	ld	r24, Z
    34c0:	88 60       	ori	r24, 0x08	; 8
    34c2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    34c4:	ae e4       	ldi	r26, 0x4E	; 78
    34c6:	b0 e0       	ldi	r27, 0x00	; 0
    34c8:	ee e4       	ldi	r30, 0x4E	; 78
    34ca:	f0 e0       	ldi	r31, 0x00	; 0
    34cc:	80 81       	ld	r24, Z
    34ce:	8f 7e       	andi	r24, 0xEF	; 239
    34d0:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR1A = OCR1A_VALUE;
    34d2:	ea e4       	ldi	r30, 0x4A	; 74
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	89 81       	ldd	r24, Y+1	; 0x01
    34d8:	9a 81       	ldd	r25, Y+2	; 0x02
    34da:	91 83       	std	Z+1, r25	; 0x01
    34dc:	80 83       	st	Z, r24
	/* Set Global Interrupt */
	Set_Global_Interrupt();
    34de:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <Set_Global_Interrupt>
	/* Set OCIE0 BIT */
	SET_BIT(TIMSK,OCIE1A);
    34e2:	a9 e5       	ldi	r26, 0x59	; 89
    34e4:	b0 e0       	ldi	r27, 0x00	; 0
    34e6:	e9 e5       	ldi	r30, 0x59	; 89
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	80 81       	ld	r24, Z
    34ec:	80 61       	ori	r24, 0x10	; 16
    34ee:	8c 93       	st	X, r24
	/* Set the Timer Clk */
	Timer1_Start_Count();
    34f0:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <Timer1_Start_Count>
}
    34f4:	0f 90       	pop	r0
    34f6:	0f 90       	pop	r0
    34f8:	cf 91       	pop	r28
    34fa:	df 91       	pop	r29
    34fc:	08 95       	ret

000034fe <Timer1_Set_ICR_CTC_Mode>:
void Timer1_Set_ICR_CTC_Mode(u16 ICR1_VALUE)
{
    34fe:	df 93       	push	r29
    3500:	cf 93       	push	r28
    3502:	00 d0       	rcall	.+0      	; 0x3504 <Timer1_Set_ICR_CTC_Mode+0x6>
    3504:	cd b7       	in	r28, 0x3d	; 61
    3506:	de b7       	in	r29, 0x3e	; 62
    3508:	9a 83       	std	Y+2, r25	; 0x02
    350a:	89 83       	std	Y+1, r24	; 0x01
	/* Set the Timer Mode to CTC ICR mode */
	CLEAR_BIT(TCCR1A,WGM10);
    350c:	af e4       	ldi	r26, 0x4F	; 79
    350e:	b0 e0       	ldi	r27, 0x00	; 0
    3510:	ef e4       	ldi	r30, 0x4F	; 79
    3512:	f0 e0       	ldi	r31, 0x00	; 0
    3514:	80 81       	ld	r24, Z
    3516:	8e 7f       	andi	r24, 0xFE	; 254
    3518:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    351a:	af e4       	ldi	r26, 0x4F	; 79
    351c:	b0 e0       	ldi	r27, 0x00	; 0
    351e:	ef e4       	ldi	r30, 0x4F	; 79
    3520:	f0 e0       	ldi	r31, 0x00	; 0
    3522:	80 81       	ld	r24, Z
    3524:	8d 7f       	andi	r24, 0xFD	; 253
    3526:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    3528:	ae e4       	ldi	r26, 0x4E	; 78
    352a:	b0 e0       	ldi	r27, 0x00	; 0
    352c:	ee e4       	ldi	r30, 0x4E	; 78
    352e:	f0 e0       	ldi	r31, 0x00	; 0
    3530:	80 81       	ld	r24, Z
    3532:	88 60       	ori	r24, 0x08	; 8
    3534:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    3536:	ae e4       	ldi	r26, 0x4E	; 78
    3538:	b0 e0       	ldi	r27, 0x00	; 0
    353a:	ee e4       	ldi	r30, 0x4E	; 78
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	80 81       	ld	r24, Z
    3540:	80 61       	ori	r24, 0x10	; 16
    3542:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	ICR1 = ICR1_VALUE;
    3544:	e6 e4       	ldi	r30, 0x46	; 70
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	9a 81       	ldd	r25, Y+2	; 0x02
    354c:	91 83       	std	Z+1, r25	; 0x01
    354e:	80 83       	st	Z, r24
	/* Set Global Interrupt */
	Set_Global_Interrupt();
    3550:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <Set_Global_Interrupt>
	/* Set OCIE0 BIT */
	SET_BIT(TIMSK,TICIE1);
    3554:	a9 e5       	ldi	r26, 0x59	; 89
    3556:	b0 e0       	ldi	r27, 0x00	; 0
    3558:	e9 e5       	ldi	r30, 0x59	; 89
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	80 81       	ld	r24, Z
    355e:	80 62       	ori	r24, 0x20	; 32
    3560:	8c 93       	st	X, r24
	/* Set the Timer Clk */
	Timer1_Start_Count();
    3562:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <Timer1_Start_Count>
}
    3566:	0f 90       	pop	r0
    3568:	0f 90       	pop	r0
    356a:	cf 91       	pop	r28
    356c:	df 91       	pop	r29
    356e:	08 95       	ret

00003570 <Timer1_Set_OCRB_CTC_Mode>:
void Timer1_Set_OCRB_CTC_Mode(u16 OCR1B_VALUE)
{
    3570:	df 93       	push	r29
    3572:	cf 93       	push	r28
    3574:	00 d0       	rcall	.+0      	; 0x3576 <Timer1_Set_OCRB_CTC_Mode+0x6>
    3576:	cd b7       	in	r28, 0x3d	; 61
    3578:	de b7       	in	r29, 0x3e	; 62
    357a:	9a 83       	std	Y+2, r25	; 0x02
    357c:	89 83       	std	Y+1, r24	; 0x01
	/* Set the Timer Mode to CTC B mode */
	CLEAR_BIT(TCCR1A,WGM10);
    357e:	af e4       	ldi	r26, 0x4F	; 79
    3580:	b0 e0       	ldi	r27, 0x00	; 0
    3582:	ef e4       	ldi	r30, 0x4F	; 79
    3584:	f0 e0       	ldi	r31, 0x00	; 0
    3586:	80 81       	ld	r24, Z
    3588:	8e 7f       	andi	r24, 0xFE	; 254
    358a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    358c:	af e4       	ldi	r26, 0x4F	; 79
    358e:	b0 e0       	ldi	r27, 0x00	; 0
    3590:	ef e4       	ldi	r30, 0x4F	; 79
    3592:	f0 e0       	ldi	r31, 0x00	; 0
    3594:	80 81       	ld	r24, Z
    3596:	8d 7f       	andi	r24, 0xFD	; 253
    3598:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    359a:	ae e4       	ldi	r26, 0x4E	; 78
    359c:	b0 e0       	ldi	r27, 0x00	; 0
    359e:	ee e4       	ldi	r30, 0x4E	; 78
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	80 81       	ld	r24, Z
    35a4:	88 60       	ori	r24, 0x08	; 8
    35a6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    35a8:	ae e4       	ldi	r26, 0x4E	; 78
    35aa:	b0 e0       	ldi	r27, 0x00	; 0
    35ac:	ee e4       	ldi	r30, 0x4E	; 78
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	80 81       	ld	r24, Z
    35b2:	8f 7e       	andi	r24, 0xEF	; 239
    35b4:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR1B = OCR1B_VALUE;
    35b6:	e8 e4       	ldi	r30, 0x48	; 72
    35b8:	f0 e0       	ldi	r31, 0x00	; 0
    35ba:	89 81       	ldd	r24, Y+1	; 0x01
    35bc:	9a 81       	ldd	r25, Y+2	; 0x02
    35be:	91 83       	std	Z+1, r25	; 0x01
    35c0:	80 83       	st	Z, r24
	/* Set Global Interrupt */
	Set_Global_Interrupt();
    35c2:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <Set_Global_Interrupt>
	/* Set OCIE0 BIT */
	SET_BIT(TIMSK,OCIE1B);
    35c6:	a9 e5       	ldi	r26, 0x59	; 89
    35c8:	b0 e0       	ldi	r27, 0x00	; 0
    35ca:	e9 e5       	ldi	r30, 0x59	; 89
    35cc:	f0 e0       	ldi	r31, 0x00	; 0
    35ce:	80 81       	ld	r24, Z
    35d0:	88 60       	ori	r24, 0x08	; 8
    35d2:	8c 93       	st	X, r24
	/* Set the Timer Clk */
	Timer1_Start_Count();
    35d4:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <Timer1_Start_Count>
	 * In ISR Make TCNT1 = 0 As this mode doesn't clear the TCNT1 Automatically
	 * ISR(TIMER1_COMPB_vect){
	 * TCNT1 = 0;
	 * }
	 */
}
    35d8:	0f 90       	pop	r0
    35da:	0f 90       	pop	r0
    35dc:	cf 91       	pop	r28
    35de:	df 91       	pop	r29
    35e0:	08 95       	ret

000035e2 <Timer1_CTC_OCRA_Generate_Signal>:
void Timer1_CTC_OCRA_Generate_Signal(u16 OCR1A_VALUE)
{
    35e2:	df 93       	push	r29
    35e4:	cf 93       	push	r28
    35e6:	00 d0       	rcall	.+0      	; 0x35e8 <Timer1_CTC_OCRA_Generate_Signal+0x6>
    35e8:	cd b7       	in	r28, 0x3d	; 61
    35ea:	de b7       	in	r29, 0x3e	; 62
    35ec:	9a 83       	std	Y+2, r25	; 0x02
    35ee:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_5,OUTPUT);
    35f0:	84 e4       	ldi	r24, 0x44	; 68
    35f2:	65 e0       	ldi	r22, 0x05	; 5
    35f4:	41 e0       	ldi	r20, 0x01	; 1
    35f6:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to CTC mode */
	CLEAR_BIT(TCCR1A,WGM10);
    35fa:	af e4       	ldi	r26, 0x4F	; 79
    35fc:	b0 e0       	ldi	r27, 0x00	; 0
    35fe:	ef e4       	ldi	r30, 0x4F	; 79
    3600:	f0 e0       	ldi	r31, 0x00	; 0
    3602:	80 81       	ld	r24, Z
    3604:	8e 7f       	andi	r24, 0xFE	; 254
    3606:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    3608:	af e4       	ldi	r26, 0x4F	; 79
    360a:	b0 e0       	ldi	r27, 0x00	; 0
    360c:	ef e4       	ldi	r30, 0x4F	; 79
    360e:	f0 e0       	ldi	r31, 0x00	; 0
    3610:	80 81       	ld	r24, Z
    3612:	8d 7f       	andi	r24, 0xFD	; 253
    3614:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    3616:	ae e4       	ldi	r26, 0x4E	; 78
    3618:	b0 e0       	ldi	r27, 0x00	; 0
    361a:	ee e4       	ldi	r30, 0x4E	; 78
    361c:	f0 e0       	ldi	r31, 0x00	; 0
    361e:	80 81       	ld	r24, Z
    3620:	88 60       	ori	r24, 0x08	; 8
    3622:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    3624:	ae e4       	ldi	r26, 0x4E	; 78
    3626:	b0 e0       	ldi	r27, 0x00	; 0
    3628:	ee e4       	ldi	r30, 0x4E	; 78
    362a:	f0 e0       	ldi	r31, 0x00	; 0
    362c:	80 81       	ld	r24, Z
    362e:	8f 7e       	andi	r24, 0xEF	; 239
    3630:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR1A = OCR1A_VALUE;
    3632:	ea e4       	ldi	r30, 0x4A	; 74
    3634:	f0 e0       	ldi	r31, 0x00	; 0
    3636:	89 81       	ldd	r24, Y+1	; 0x01
    3638:	9a 81       	ldd	r25, Y+2	; 0x02
    363a:	91 83       	std	Z+1, r25	; 0x01
    363c:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    363e:	0e 94 bb 19 	call	0x3376	; 0x3376 <Timer1_Set_Clk>
	/* Set Signal to be Toggle at Compare Match*/
	/* Pin PD5 ( OC1A ) */
	SET_BIT(TCCR1A,COM1A0);
    3642:	af e4       	ldi	r26, 0x4F	; 79
    3644:	b0 e0       	ldi	r27, 0x00	; 0
    3646:	ef e4       	ldi	r30, 0x4F	; 79
    3648:	f0 e0       	ldi	r31, 0x00	; 0
    364a:	80 81       	ld	r24, Z
    364c:	80 64       	ori	r24, 0x40	; 64
    364e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,COM1A1);
    3650:	af e4       	ldi	r26, 0x4F	; 79
    3652:	b0 e0       	ldi	r27, 0x00	; 0
    3654:	ef e4       	ldi	r30, 0x4F	; 79
    3656:	f0 e0       	ldi	r31, 0x00	; 0
    3658:	80 81       	ld	r24, Z
    365a:	8f 77       	andi	r24, 0x7F	; 127
    365c:	8c 93       	st	X, r24

}
    365e:	0f 90       	pop	r0
    3660:	0f 90       	pop	r0
    3662:	cf 91       	pop	r28
    3664:	df 91       	pop	r29
    3666:	08 95       	ret

00003668 <Timer1_CTC_OCRB_Generate_Signal>:
void Timer1_CTC_OCRB_Generate_Signal(u16 OCR1B_VALUE)
{
    3668:	df 93       	push	r29
    366a:	cf 93       	push	r28
    366c:	00 d0       	rcall	.+0      	; 0x366e <Timer1_CTC_OCRB_Generate_Signal+0x6>
    366e:	cd b7       	in	r28, 0x3d	; 61
    3670:	de b7       	in	r29, 0x3e	; 62
    3672:	9a 83       	std	Y+2, r25	; 0x02
    3674:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_4,OUTPUT);
    3676:	84 e4       	ldi	r24, 0x44	; 68
    3678:	64 e0       	ldi	r22, 0x04	; 4
    367a:	41 e0       	ldi	r20, 0x01	; 1
    367c:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to CTC mode */
	CLEAR_BIT(TCCR1A,WGM10);
    3680:	af e4       	ldi	r26, 0x4F	; 79
    3682:	b0 e0       	ldi	r27, 0x00	; 0
    3684:	ef e4       	ldi	r30, 0x4F	; 79
    3686:	f0 e0       	ldi	r31, 0x00	; 0
    3688:	80 81       	ld	r24, Z
    368a:	8e 7f       	andi	r24, 0xFE	; 254
    368c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    368e:	af e4       	ldi	r26, 0x4F	; 79
    3690:	b0 e0       	ldi	r27, 0x00	; 0
    3692:	ef e4       	ldi	r30, 0x4F	; 79
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	80 81       	ld	r24, Z
    3698:	8d 7f       	andi	r24, 0xFD	; 253
    369a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    369c:	ae e4       	ldi	r26, 0x4E	; 78
    369e:	b0 e0       	ldi	r27, 0x00	; 0
    36a0:	ee e4       	ldi	r30, 0x4E	; 78
    36a2:	f0 e0       	ldi	r31, 0x00	; 0
    36a4:	80 81       	ld	r24, Z
    36a6:	88 60       	ori	r24, 0x08	; 8
    36a8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    36aa:	ae e4       	ldi	r26, 0x4E	; 78
    36ac:	b0 e0       	ldi	r27, 0x00	; 0
    36ae:	ee e4       	ldi	r30, 0x4E	; 78
    36b0:	f0 e0       	ldi	r31, 0x00	; 0
    36b2:	80 81       	ld	r24, Z
    36b4:	8f 7e       	andi	r24, 0xEF	; 239
    36b6:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR1B = OCR1B_VALUE;
    36b8:	e8 e4       	ldi	r30, 0x48	; 72
    36ba:	f0 e0       	ldi	r31, 0x00	; 0
    36bc:	89 81       	ldd	r24, Y+1	; 0x01
    36be:	9a 81       	ldd	r25, Y+2	; 0x02
    36c0:	91 83       	std	Z+1, r25	; 0x01
    36c2:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    36c4:	0e 94 bb 19 	call	0x3376	; 0x3376 <Timer1_Set_Clk>
	/* Set Signal to be Toggle at Compare Match*/
	/* Pin PD4 ( OC1b ) */
	SET_BIT(TCCR1A,COM1B0);
    36c8:	af e4       	ldi	r26, 0x4F	; 79
    36ca:	b0 e0       	ldi	r27, 0x00	; 0
    36cc:	ef e4       	ldi	r30, 0x4F	; 79
    36ce:	f0 e0       	ldi	r31, 0x00	; 0
    36d0:	80 81       	ld	r24, Z
    36d2:	80 61       	ori	r24, 0x10	; 16
    36d4:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,COM1B1);
    36d6:	af e4       	ldi	r26, 0x4F	; 79
    36d8:	b0 e0       	ldi	r27, 0x00	; 0
    36da:	ef e4       	ldi	r30, 0x4F	; 79
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	80 81       	ld	r24, Z
    36e0:	8f 7d       	andi	r24, 0xDF	; 223
    36e2:	8c 93       	st	X, r24
}
    36e4:	0f 90       	pop	r0
    36e6:	0f 90       	pop	r0
    36e8:	cf 91       	pop	r28
    36ea:	df 91       	pop	r29
    36ec:	08 95       	ret

000036ee <Timer1_Set_OCA_FastPWM_Mode>:
void Timer1_Set_OCA_FastPWM_Mode(u16 OCR1A_VALUE)
{
    36ee:	df 93       	push	r29
    36f0:	cf 93       	push	r28
    36f2:	00 d0       	rcall	.+0      	; 0x36f4 <Timer1_Set_OCA_FastPWM_Mode+0x6>
    36f4:	cd b7       	in	r28, 0x3d	; 61
    36f6:	de b7       	in	r29, 0x3e	; 62
    36f8:	9a 83       	std	Y+2, r25	; 0x02
    36fa:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_5,OUTPUT);
    36fc:	84 e4       	ldi	r24, 0x44	; 68
    36fe:	65 e0       	ldi	r22, 0x05	; 5
    3700:	41 e0       	ldi	r20, 0x01	; 1
    3702:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Fast PWM mode */
	SET_BIT(TCCR1A,WGM10);
    3706:	af e4       	ldi	r26, 0x4F	; 79
    3708:	b0 e0       	ldi	r27, 0x00	; 0
    370a:	ef e4       	ldi	r30, 0x4F	; 79
    370c:	f0 e0       	ldi	r31, 0x00	; 0
    370e:	80 81       	ld	r24, Z
    3710:	81 60       	ori	r24, 0x01	; 1
    3712:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    3714:	af e4       	ldi	r26, 0x4F	; 79
    3716:	b0 e0       	ldi	r27, 0x00	; 0
    3718:	ef e4       	ldi	r30, 0x4F	; 79
    371a:	f0 e0       	ldi	r31, 0x00	; 0
    371c:	80 81       	ld	r24, Z
    371e:	82 60       	ori	r24, 0x02	; 2
    3720:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    3722:	ae e4       	ldi	r26, 0x4E	; 78
    3724:	b0 e0       	ldi	r27, 0x00	; 0
    3726:	ee e4       	ldi	r30, 0x4E	; 78
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	80 81       	ld	r24, Z
    372c:	88 60       	ori	r24, 0x08	; 8
    372e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    3730:	ae e4       	ldi	r26, 0x4E	; 78
    3732:	b0 e0       	ldi	r27, 0x00	; 0
    3734:	ee e4       	ldi	r30, 0x4E	; 78
    3736:	f0 e0       	ldi	r31, 0x00	; 0
    3738:	80 81       	ld	r24, Z
    373a:	80 61       	ori	r24, 0x10	; 16
    373c:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR1A = OCR1A_VALUE;
    373e:	ea e4       	ldi	r30, 0x4A	; 74
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	89 81       	ldd	r24, Y+1	; 0x01
    3744:	9a 81       	ldd	r25, Y+2	; 0x02
    3746:	91 83       	std	Z+1, r25	; 0x01
    3748:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    374a:	0e 94 bb 19 	call	0x3376	; 0x3376 <Timer1_Set_Clk>
	/* Set PWM On / Off  */
#if TIMER1_SET_OC1A_ON_BOTTOM
	CLEAR_BIT(TCCR1A,COM1A0);
    374e:	af e4       	ldi	r26, 0x4F	; 79
    3750:	b0 e0       	ldi	r27, 0x00	; 0
    3752:	ef e4       	ldi	r30, 0x4F	; 79
    3754:	f0 e0       	ldi	r31, 0x00	; 0
    3756:	80 81       	ld	r24, Z
    3758:	8f 7b       	andi	r24, 0xBF	; 191
    375a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    375c:	af e4       	ldi	r26, 0x4F	; 79
    375e:	b0 e0       	ldi	r27, 0x00	; 0
    3760:	ef e4       	ldi	r30, 0x4F	; 79
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	80 81       	ld	r24, Z
    3766:	80 68       	ori	r24, 0x80	; 128
    3768:	8c 93       	st	X, r24
#elif TIMER1_SET_OC1A_ON_COMPARE_MATCH
	SET_BIT(TCCR1A,COM1A0);
	SET_BIT(TCCR1A,COM1A1);
#endif
}
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	cf 91       	pop	r28
    3770:	df 91       	pop	r29
    3772:	08 95       	ret

00003774 <PWM_Timer1A_Generate>:
void PWM_Timer1A_Generate(u8 SPEED_PERCENT)
{
    3774:	df 93       	push	r29
    3776:	cf 93       	push	r28
    3778:	0f 92       	push	r0
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
    377e:	89 83       	std	Y+1, r24	; 0x01
	Timer1_Set_OCA_FastPWM_Mode((SPEED_PERCENT * 655.35));
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	88 2f       	mov	r24, r24
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	aa 27       	eor	r26, r26
    3788:	97 fd       	sbrc	r25, 7
    378a:	a0 95       	com	r26
    378c:	ba 2f       	mov	r27, r26
    378e:	bc 01       	movw	r22, r24
    3790:	cd 01       	movw	r24, r26
    3792:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3796:	dc 01       	movw	r26, r24
    3798:	cb 01       	movw	r24, r22
    379a:	bc 01       	movw	r22, r24
    379c:	cd 01       	movw	r24, r26
    379e:	26 e6       	ldi	r18, 0x66	; 102
    37a0:	36 ed       	ldi	r19, 0xD6	; 214
    37a2:	43 e2       	ldi	r20, 0x23	; 35
    37a4:	54 e4       	ldi	r21, 0x44	; 68
    37a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	bc 01       	movw	r22, r24
    37b0:	cd 01       	movw	r24, r26
    37b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	0e 94 77 1b 	call	0x36ee	; 0x36ee <Timer1_Set_OCA_FastPWM_Mode>
}
    37be:	0f 90       	pop	r0
    37c0:	cf 91       	pop	r28
    37c2:	df 91       	pop	r29
    37c4:	08 95       	ret

000037c6 <Timer1_Set_OCB_FastPWM_Mode>:
void Timer1_Set_OCB_FastPWM_Mode(u16 OCR1B_VALUE)
{
    37c6:	df 93       	push	r29
    37c8:	cf 93       	push	r28
    37ca:	00 d0       	rcall	.+0      	; 0x37cc <Timer1_Set_OCB_FastPWM_Mode+0x6>
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    37d0:	9a 83       	std	Y+2, r25	; 0x02
    37d2:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_4,OUTPUT);
    37d4:	84 e4       	ldi	r24, 0x44	; 68
    37d6:	64 e0       	ldi	r22, 0x04	; 4
    37d8:	41 e0       	ldi	r20, 0x01	; 1
    37da:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Fast PWM mode */
	SET_BIT(TCCR1A,WGM10);
    37de:	af e4       	ldi	r26, 0x4F	; 79
    37e0:	b0 e0       	ldi	r27, 0x00	; 0
    37e2:	ef e4       	ldi	r30, 0x4F	; 79
    37e4:	f0 e0       	ldi	r31, 0x00	; 0
    37e6:	80 81       	ld	r24, Z
    37e8:	81 60       	ori	r24, 0x01	; 1
    37ea:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    37ec:	af e4       	ldi	r26, 0x4F	; 79
    37ee:	b0 e0       	ldi	r27, 0x00	; 0
    37f0:	ef e4       	ldi	r30, 0x4F	; 79
    37f2:	f0 e0       	ldi	r31, 0x00	; 0
    37f4:	80 81       	ld	r24, Z
    37f6:	82 60       	ori	r24, 0x02	; 2
    37f8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    37fa:	ae e4       	ldi	r26, 0x4E	; 78
    37fc:	b0 e0       	ldi	r27, 0x00	; 0
    37fe:	ee e4       	ldi	r30, 0x4E	; 78
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	88 60       	ori	r24, 0x08	; 8
    3806:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    3808:	ae e4       	ldi	r26, 0x4E	; 78
    380a:	b0 e0       	ldi	r27, 0x00	; 0
    380c:	ee e4       	ldi	r30, 0x4E	; 78
    380e:	f0 e0       	ldi	r31, 0x00	; 0
    3810:	80 81       	ld	r24, Z
    3812:	80 61       	ori	r24, 0x10	; 16
    3814:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR1B = OCR1B_VALUE;
    3816:	e8 e4       	ldi	r30, 0x48	; 72
    3818:	f0 e0       	ldi	r31, 0x00	; 0
    381a:	89 81       	ldd	r24, Y+1	; 0x01
    381c:	9a 81       	ldd	r25, Y+2	; 0x02
    381e:	91 83       	std	Z+1, r25	; 0x01
    3820:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    3822:	0e 94 bb 19 	call	0x3376	; 0x3376 <Timer1_Set_Clk>
	/* Set PWM On / Off  */
#if TIMER1_SET_OC1B_ON_BOTTOM
	CLEAR_BIT(TCCR1A,COM1B0);
    3826:	af e4       	ldi	r26, 0x4F	; 79
    3828:	b0 e0       	ldi	r27, 0x00	; 0
    382a:	ef e4       	ldi	r30, 0x4F	; 79
    382c:	f0 e0       	ldi	r31, 0x00	; 0
    382e:	80 81       	ld	r24, Z
    3830:	8f 7e       	andi	r24, 0xEF	; 239
    3832:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B1);
    3834:	af e4       	ldi	r26, 0x4F	; 79
    3836:	b0 e0       	ldi	r27, 0x00	; 0
    3838:	ef e4       	ldi	r30, 0x4F	; 79
    383a:	f0 e0       	ldi	r31, 0x00	; 0
    383c:	80 81       	ld	r24, Z
    383e:	80 62       	ori	r24, 0x20	; 32
    3840:	8c 93       	st	X, r24
#elif TIMER1_SET_OC1B_ON_COMPARE_MATCH
	SET_BIT(TCCR1A,COM1B0);
	SET_BIT(TCCR1A,COM1B1);
#endif
}
    3842:	0f 90       	pop	r0
    3844:	0f 90       	pop	r0
    3846:	cf 91       	pop	r28
    3848:	df 91       	pop	r29
    384a:	08 95       	ret

0000384c <PWM_Timer1B_Generate>:
void PWM_Timer1B_Generate(u8 SPEED_PERCENT)
{
    384c:	df 93       	push	r29
    384e:	cf 93       	push	r28
    3850:	0f 92       	push	r0
    3852:	cd b7       	in	r28, 0x3d	; 61
    3854:	de b7       	in	r29, 0x3e	; 62
    3856:	89 83       	std	Y+1, r24	; 0x01
	Timer1_Set_OCB_FastPWM_Mode((SPEED_PERCENT * 655.35));
    3858:	89 81       	ldd	r24, Y+1	; 0x01
    385a:	88 2f       	mov	r24, r24
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	aa 27       	eor	r26, r26
    3860:	97 fd       	sbrc	r25, 7
    3862:	a0 95       	com	r26
    3864:	ba 2f       	mov	r27, r26
    3866:	bc 01       	movw	r22, r24
    3868:	cd 01       	movw	r24, r26
    386a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	bc 01       	movw	r22, r24
    3874:	cd 01       	movw	r24, r26
    3876:	26 e6       	ldi	r18, 0x66	; 102
    3878:	36 ed       	ldi	r19, 0xD6	; 214
    387a:	43 e2       	ldi	r20, 0x23	; 35
    387c:	54 e4       	ldi	r21, 0x44	; 68
    387e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	bc 01       	movw	r22, r24
    3888:	cd 01       	movw	r24, r26
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <Timer1_Set_OCB_FastPWM_Mode>
}
    3896:	0f 90       	pop	r0
    3898:	cf 91       	pop	r28
    389a:	df 91       	pop	r29
    389c:	08 95       	ret

0000389e <Timer1_Set_OCA_FastPWM_Mode_Using_Bits>:
void Timer1_Set_OCA_FastPWM_Mode_Using_Bits()
{
    389e:	df 93       	push	r29
    38a0:	cf 93       	push	r28
    38a2:	cd b7       	in	r28, 0x3d	; 61
    38a4:	de b7       	in	r29, 0x3e	; 62
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_5,OUTPUT);
    38a6:	84 e4       	ldi	r24, 0x44	; 68
    38a8:	65 e0       	ldi	r22, 0x05	; 5
    38aa:	41 e0       	ldi	r20, 0x01	; 1
    38ac:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Fast PWM mode */
#if FAST_PWM_8_BIT
	SET_BIT(TCCR1A,WGM10);
    38b0:	af e4       	ldi	r26, 0x4F	; 79
    38b2:	b0 e0       	ldi	r27, 0x00	; 0
    38b4:	ef e4       	ldi	r30, 0x4F	; 79
    38b6:	f0 e0       	ldi	r31, 0x00	; 0
    38b8:	80 81       	ld	r24, Z
    38ba:	81 60       	ori	r24, 0x01	; 1
    38bc:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    38be:	af e4       	ldi	r26, 0x4F	; 79
    38c0:	b0 e0       	ldi	r27, 0x00	; 0
    38c2:	ef e4       	ldi	r30, 0x4F	; 79
    38c4:	f0 e0       	ldi	r31, 0x00	; 0
    38c6:	80 81       	ld	r24, Z
    38c8:	8d 7f       	andi	r24, 0xFD	; 253
    38ca:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    38cc:	ae e4       	ldi	r26, 0x4E	; 78
    38ce:	b0 e0       	ldi	r27, 0x00	; 0
    38d0:	ee e4       	ldi	r30, 0x4E	; 78
    38d2:	f0 e0       	ldi	r31, 0x00	; 0
    38d4:	80 81       	ld	r24, Z
    38d6:	88 60       	ori	r24, 0x08	; 8
    38d8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    38da:	ae e4       	ldi	r26, 0x4E	; 78
    38dc:	b0 e0       	ldi	r27, 0x00	; 0
    38de:	ee e4       	ldi	r30, 0x4E	; 78
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	80 81       	ld	r24, Z
    38e4:	8f 7e       	andi	r24, 0xEF	; 239
    38e6:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
	SET_BIT(TCCR1B,WGM12);
	CLEAR_BIT(TCCR1B,WGM13);
#endif
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    38e8:	0e 94 bb 19 	call	0x3376	; 0x3376 <Timer1_Set_Clk>
	/* Set PWM On / Off  */
#if TIMER1_SET_OC1A_ON_BOTTOM
	CLEAR_BIT(TCCR1A,COM1A0);
    38ec:	af e4       	ldi	r26, 0x4F	; 79
    38ee:	b0 e0       	ldi	r27, 0x00	; 0
    38f0:	ef e4       	ldi	r30, 0x4F	; 79
    38f2:	f0 e0       	ldi	r31, 0x00	; 0
    38f4:	80 81       	ld	r24, Z
    38f6:	8f 7b       	andi	r24, 0xBF	; 191
    38f8:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    38fa:	af e4       	ldi	r26, 0x4F	; 79
    38fc:	b0 e0       	ldi	r27, 0x00	; 0
    38fe:	ef e4       	ldi	r30, 0x4F	; 79
    3900:	f0 e0       	ldi	r31, 0x00	; 0
    3902:	80 81       	ld	r24, Z
    3904:	80 68       	ori	r24, 0x80	; 128
    3906:	8c 93       	st	X, r24
#elif TIMER1_SET_OC1A_ON_COMPARE_MATCH
	SET_BIT(TCCR1A,COM1A0);
	SET_BIT(TCCR1A,COM1A1);
#endif
}
    3908:	cf 91       	pop	r28
    390a:	df 91       	pop	r29
    390c:	08 95       	ret

0000390e <Timer1_Set_OCB_FastPWM_Mode_Using_Bits>:
void Timer1_Set_OCB_FastPWM_Mode_Using_Bits()
{
    390e:	df 93       	push	r29
    3910:	cf 93       	push	r28
    3912:	cd b7       	in	r28, 0x3d	; 61
    3914:	de b7       	in	r29, 0x3e	; 62
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_4,OUTPUT);
    3916:	84 e4       	ldi	r24, 0x44	; 68
    3918:	64 e0       	ldi	r22, 0x04	; 4
    391a:	41 e0       	ldi	r20, 0x01	; 1
    391c:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Fast PWM mode */
#if FAST_PWM_8_BIT
	SET_BIT(TCCR1A,WGM10);
    3920:	af e4       	ldi	r26, 0x4F	; 79
    3922:	b0 e0       	ldi	r27, 0x00	; 0
    3924:	ef e4       	ldi	r30, 0x4F	; 79
    3926:	f0 e0       	ldi	r31, 0x00	; 0
    3928:	80 81       	ld	r24, Z
    392a:	81 60       	ori	r24, 0x01	; 1
    392c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    392e:	af e4       	ldi	r26, 0x4F	; 79
    3930:	b0 e0       	ldi	r27, 0x00	; 0
    3932:	ef e4       	ldi	r30, 0x4F	; 79
    3934:	f0 e0       	ldi	r31, 0x00	; 0
    3936:	80 81       	ld	r24, Z
    3938:	8d 7f       	andi	r24, 0xFD	; 253
    393a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    393c:	ae e4       	ldi	r26, 0x4E	; 78
    393e:	b0 e0       	ldi	r27, 0x00	; 0
    3940:	ee e4       	ldi	r30, 0x4E	; 78
    3942:	f0 e0       	ldi	r31, 0x00	; 0
    3944:	80 81       	ld	r24, Z
    3946:	88 60       	ori	r24, 0x08	; 8
    3948:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    394a:	ae e4       	ldi	r26, 0x4E	; 78
    394c:	b0 e0       	ldi	r27, 0x00	; 0
    394e:	ee e4       	ldi	r30, 0x4E	; 78
    3950:	f0 e0       	ldi	r31, 0x00	; 0
    3952:	80 81       	ld	r24, Z
    3954:	8f 7e       	andi	r24, 0xEF	; 239
    3956:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
	SET_BIT(TCCR1B,WGM12);
	CLEAR_BIT(TCCR1B,WGM13);
#endif
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    3958:	0e 94 bb 19 	call	0x3376	; 0x3376 <Timer1_Set_Clk>
	/* Set PWM On / Off  */
#if TIMER1_SET_OC1B_ON_BOTTOM
	CLEAR_BIT(TCCR1A,COM1B0);
    395c:	af e4       	ldi	r26, 0x4F	; 79
    395e:	b0 e0       	ldi	r27, 0x00	; 0
    3960:	ef e4       	ldi	r30, 0x4F	; 79
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	80 81       	ld	r24, Z
    3966:	8f 7e       	andi	r24, 0xEF	; 239
    3968:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B1);
    396a:	af e4       	ldi	r26, 0x4F	; 79
    396c:	b0 e0       	ldi	r27, 0x00	; 0
    396e:	ef e4       	ldi	r30, 0x4F	; 79
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	80 81       	ld	r24, Z
    3974:	80 62       	ori	r24, 0x20	; 32
    3976:	8c 93       	st	X, r24
#elif TIMER1_SET_OC1B_ON_COMPARE_MATCH
	SET_BIT(TCCR1A,COM1B0);
	SET_BIT(TCCR1A,COM1B1);
#endif
}
    3978:	cf 91       	pop	r28
    397a:	df 91       	pop	r29
    397c:	08 95       	ret

0000397e <Timer1_Set_ICU_Rising_Edge>:
//void PWM_Timer1B_Generate(u8 SPEED_PERCENT)
//{
//	Timer1_Set_OCB_FastPWM_Mode((SPEED_PERCENT * 655.35));
//}
void Timer1_Set_ICU_Rising_Edge()
{
    397e:	df 93       	push	r29
    3980:	cf 93       	push	r28
    3982:	cd b7       	in	r28, 0x3d	; 61
    3984:	de b7       	in	r29, 0x3e	; 62
	// Set ICR1 Detect Rising Edge
	SET_2_BITS(TCCR1B,ICNC1,ICES1);
    3986:	ae e4       	ldi	r26, 0x4E	; 78
    3988:	b0 e0       	ldi	r27, 0x00	; 0
    398a:	ee e4       	ldi	r30, 0x4E	; 78
    398c:	f0 e0       	ldi	r31, 0x00	; 0
    398e:	80 81       	ld	r24, Z
    3990:	80 6c       	ori	r24, 0xC0	; 192
    3992:	8c 93       	st	X, r24
}
    3994:	cf 91       	pop	r28
    3996:	df 91       	pop	r29
    3998:	08 95       	ret

0000399a <Timer1_Set_ICU_Falling_Edge>:
void Timer1_Set_ICU_Falling_Edge()
{
    399a:	df 93       	push	r29
    399c:	cf 93       	push	r28
    399e:	cd b7       	in	r28, 0x3d	; 61
    39a0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B,ICNC1);
    39a2:	ae e4       	ldi	r26, 0x4E	; 78
    39a4:	b0 e0       	ldi	r27, 0x00	; 0
    39a6:	ee e4       	ldi	r30, 0x4E	; 78
    39a8:	f0 e0       	ldi	r31, 0x00	; 0
    39aa:	80 81       	ld	r24, Z
    39ac:	80 68       	ori	r24, 0x80	; 128
    39ae:	8c 93       	st	X, r24
	// Set ICR1 Detect Falling Edge
	CLEAR_BIT(TCCR1B,ICES1);
    39b0:	ae e4       	ldi	r26, 0x4E	; 78
    39b2:	b0 e0       	ldi	r27, 0x00	; 0
    39b4:	ee e4       	ldi	r30, 0x4E	; 78
    39b6:	f0 e0       	ldi	r31, 0x00	; 0
    39b8:	80 81       	ld	r24, Z
    39ba:	8f 7b       	andi	r24, 0xBF	; 191
    39bc:	8c 93       	st	X, r24
}
    39be:	cf 91       	pop	r28
    39c0:	df 91       	pop	r29
    39c2:	08 95       	ret

000039c4 <Timer1_Clear_ICF1_BIT>:
void Timer1_Clear_ICF1_BIT()
{
    39c4:	df 93       	push	r29
    39c6:	cf 93       	push	r28
    39c8:	cd b7       	in	r28, 0x3d	; 61
    39ca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIFR,ICF1);
    39cc:	a8 e5       	ldi	r26, 0x58	; 88
    39ce:	b0 e0       	ldi	r27, 0x00	; 0
    39d0:	e8 e5       	ldi	r30, 0x58	; 88
    39d2:	f0 e0       	ldi	r31, 0x00	; 0
    39d4:	80 81       	ld	r24, Z
    39d6:	80 62       	ori	r24, 0x20	; 32
    39d8:	8c 93       	st	X, r24
}
    39da:	cf 91       	pop	r28
    39dc:	df 91       	pop	r29
    39de:	08 95       	ret

000039e0 <Timer1_Check_ICF1_BIT>:
u8 Timer1_Check_ICF1_BIT()
{
    39e0:	df 93       	push	r29
    39e2:	cf 93       	push	r28
    39e4:	cd b7       	in	r28, 0x3d	; 61
    39e6:	de b7       	in	r29, 0x3e	; 62
	return READ_BIT(TIFR,ICF1);
    39e8:	e8 e5       	ldi	r30, 0x58	; 88
    39ea:	f0 e0       	ldi	r31, 0x00	; 0
    39ec:	80 81       	ld	r24, Z
    39ee:	88 2f       	mov	r24, r24
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	80 72       	andi	r24, 0x20	; 32
    39f4:	90 70       	andi	r25, 0x00	; 0
    39f6:	95 95       	asr	r25
    39f8:	87 95       	ror	r24
    39fa:	95 95       	asr	r25
    39fc:	87 95       	ror	r24
    39fe:	95 95       	asr	r25
    3a00:	87 95       	ror	r24
    3a02:	95 95       	asr	r25
    3a04:	87 95       	ror	r24
    3a06:	95 95       	asr	r25
    3a08:	87 95       	ror	r24
}
    3a0a:	cf 91       	pop	r28
    3a0c:	df 91       	pop	r29
    3a0e:	08 95       	ret

00003a10 <Timer1_Clear_TCNT1>:
void Timer1_Clear_TCNT1()
{
    3a10:	df 93       	push	r29
    3a12:	cf 93       	push	r28
    3a14:	cd b7       	in	r28, 0x3d	; 61
    3a16:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    3a18:	ec e4       	ldi	r30, 0x4C	; 76
    3a1a:	f0 e0       	ldi	r31, 0x00	; 0
    3a1c:	11 82       	std	Z+1, r1	; 0x01
    3a1e:	10 82       	st	Z, r1
}
    3a20:	cf 91       	pop	r28
    3a22:	df 91       	pop	r29
    3a24:	08 95       	ret

00003a26 <Timer1_Set_OCA_PhaseCorrect_PWM_Mode_Using_Bits>:
void Timer1_Set_OCA_PhaseCorrect_PWM_Mode_Using_Bits()
{
    3a26:	df 93       	push	r29
    3a28:	cf 93       	push	r28
    3a2a:	cd b7       	in	r28, 0x3d	; 61
    3a2c:	de b7       	in	r29, 0x3e	; 62
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_5,OUTPUT);
    3a2e:	84 e4       	ldi	r24, 0x44	; 68
    3a30:	65 e0       	ldi	r22, 0x05	; 5
    3a32:	41 e0       	ldi	r20, 0x01	; 1
    3a34:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Fast PWM mode */
#if PHASE_CORRECT_PWM_8_BIT
	SET_BIT(TCCR1A,WGM10);
    3a38:	af e4       	ldi	r26, 0x4F	; 79
    3a3a:	b0 e0       	ldi	r27, 0x00	; 0
    3a3c:	ef e4       	ldi	r30, 0x4F	; 79
    3a3e:	f0 e0       	ldi	r31, 0x00	; 0
    3a40:	80 81       	ld	r24, Z
    3a42:	81 60       	ori	r24, 0x01	; 1
    3a44:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    3a46:	af e4       	ldi	r26, 0x4F	; 79
    3a48:	b0 e0       	ldi	r27, 0x00	; 0
    3a4a:	ef e4       	ldi	r30, 0x4F	; 79
    3a4c:	f0 e0       	ldi	r31, 0x00	; 0
    3a4e:	80 81       	ld	r24, Z
    3a50:	8d 7f       	andi	r24, 0xFD	; 253
    3a52:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM12);
    3a54:	ae e4       	ldi	r26, 0x4E	; 78
    3a56:	b0 e0       	ldi	r27, 0x00	; 0
    3a58:	ee e4       	ldi	r30, 0x4E	; 78
    3a5a:	f0 e0       	ldi	r31, 0x00	; 0
    3a5c:	80 81       	ld	r24, Z
    3a5e:	87 7f       	andi	r24, 0xF7	; 247
    3a60:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    3a62:	ae e4       	ldi	r26, 0x4E	; 78
    3a64:	b0 e0       	ldi	r27, 0x00	; 0
    3a66:	ee e4       	ldi	r30, 0x4E	; 78
    3a68:	f0 e0       	ldi	r31, 0x00	; 0
    3a6a:	80 81       	ld	r24, Z
    3a6c:	8f 7e       	andi	r24, 0xEF	; 239
    3a6e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
	CLEAR_BIT(TCCR1B,WGM12);
	CLEAR_BIT(TCCR1B,WGM13);
#endif
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    3a70:	0e 94 bb 19 	call	0x3376	; 0x3376 <Timer1_Set_Clk>
	/* Set PWM On / Off  */
#if TIMER1_SET_OCRA_ON_DOWNCOUNTING
	CLEAR_BIT(TCCR1A,COM1A0);
    3a74:	af e4       	ldi	r26, 0x4F	; 79
    3a76:	b0 e0       	ldi	r27, 0x00	; 0
    3a78:	ef e4       	ldi	r30, 0x4F	; 79
    3a7a:	f0 e0       	ldi	r31, 0x00	; 0
    3a7c:	80 81       	ld	r24, Z
    3a7e:	8f 7b       	andi	r24, 0xBF	; 191
    3a80:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    3a82:	af e4       	ldi	r26, 0x4F	; 79
    3a84:	b0 e0       	ldi	r27, 0x00	; 0
    3a86:	ef e4       	ldi	r30, 0x4F	; 79
    3a88:	f0 e0       	ldi	r31, 0x00	; 0
    3a8a:	80 81       	ld	r24, Z
    3a8c:	80 68       	ori	r24, 0x80	; 128
    3a8e:	8c 93       	st	X, r24
#elif TIMER1_SET_OCRA_ON_UPCOUNTING
	SET_BIT(TCCR1A,COM1A0);
	SET_BIT(TCCR1A,COM1A1);
#endif
}
    3a90:	cf 91       	pop	r28
    3a92:	df 91       	pop	r29
    3a94:	08 95       	ret

00003a96 <Timer1_Set_OCB_PhaseCorrect_PWM_Mode_Using_Bits>:
void Timer1_Set_OCB_PhaseCorrect_PWM_Mode_Using_Bits()
{
    3a96:	df 93       	push	r29
    3a98:	cf 93       	push	r28
    3a9a:	cd b7       	in	r28, 0x3d	; 61
    3a9c:	de b7       	in	r29, 0x3e	; 62
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_4,OUTPUT);
    3a9e:	84 e4       	ldi	r24, 0x44	; 68
    3aa0:	64 e0       	ldi	r22, 0x04	; 4
    3aa2:	41 e0       	ldi	r20, 0x01	; 1
    3aa4:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Fast PWM mode */
#if PHASE_CORRECT_PWM_8_BIT
	SET_BIT(TCCR1A,WGM10);
    3aa8:	af e4       	ldi	r26, 0x4F	; 79
    3aaa:	b0 e0       	ldi	r27, 0x00	; 0
    3aac:	ef e4       	ldi	r30, 0x4F	; 79
    3aae:	f0 e0       	ldi	r31, 0x00	; 0
    3ab0:	80 81       	ld	r24, Z
    3ab2:	81 60       	ori	r24, 0x01	; 1
    3ab4:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    3ab6:	af e4       	ldi	r26, 0x4F	; 79
    3ab8:	b0 e0       	ldi	r27, 0x00	; 0
    3aba:	ef e4       	ldi	r30, 0x4F	; 79
    3abc:	f0 e0       	ldi	r31, 0x00	; 0
    3abe:	80 81       	ld	r24, Z
    3ac0:	8d 7f       	andi	r24, 0xFD	; 253
    3ac2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM12);
    3ac4:	ae e4       	ldi	r26, 0x4E	; 78
    3ac6:	b0 e0       	ldi	r27, 0x00	; 0
    3ac8:	ee e4       	ldi	r30, 0x4E	; 78
    3aca:	f0 e0       	ldi	r31, 0x00	; 0
    3acc:	80 81       	ld	r24, Z
    3ace:	87 7f       	andi	r24, 0xF7	; 247
    3ad0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    3ad2:	ae e4       	ldi	r26, 0x4E	; 78
    3ad4:	b0 e0       	ldi	r27, 0x00	; 0
    3ad6:	ee e4       	ldi	r30, 0x4E	; 78
    3ad8:	f0 e0       	ldi	r31, 0x00	; 0
    3ada:	80 81       	ld	r24, Z
    3adc:	8f 7e       	andi	r24, 0xEF	; 239
    3ade:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
	CLEAR_BIT(TCCR1B,WGM12);
	CLEAR_BIT(TCCR1B,WGM13);
#endif
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    3ae0:	0e 94 bb 19 	call	0x3376	; 0x3376 <Timer1_Set_Clk>
	/* Set PWM On / Off  */
#if TIMER1_SET_OCRB_ON_DOWNCOUNTING
	CLEAR_BIT(TCCR1A,COM1B0);
    3ae4:	af e4       	ldi	r26, 0x4F	; 79
    3ae6:	b0 e0       	ldi	r27, 0x00	; 0
    3ae8:	ef e4       	ldi	r30, 0x4F	; 79
    3aea:	f0 e0       	ldi	r31, 0x00	; 0
    3aec:	80 81       	ld	r24, Z
    3aee:	8f 7e       	andi	r24, 0xEF	; 239
    3af0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B1);
    3af2:	af e4       	ldi	r26, 0x4F	; 79
    3af4:	b0 e0       	ldi	r27, 0x00	; 0
    3af6:	ef e4       	ldi	r30, 0x4F	; 79
    3af8:	f0 e0       	ldi	r31, 0x00	; 0
    3afa:	80 81       	ld	r24, Z
    3afc:	80 62       	ori	r24, 0x20	; 32
    3afe:	8c 93       	st	X, r24
#elif TIMER1_SET_OCRB_ON_UPCOUNTING
	SET_BIT(TCCR1A,COM1B0);
	SET_BIT(TCCR1A,COM1B1);
#endif
}
    3b00:	cf 91       	pop	r28
    3b02:	df 91       	pop	r29
    3b04:	08 95       	ret

00003b06 <Timer1_Set_OCA_PhaseCorrect_PWM_Mode>:
void Timer1_Set_OCA_PhaseCorrect_PWM_Mode(u16 OCR1A_VALUE)
{
    3b06:	df 93       	push	r29
    3b08:	cf 93       	push	r28
    3b0a:	00 d0       	rcall	.+0      	; 0x3b0c <Timer1_Set_OCA_PhaseCorrect_PWM_Mode+0x6>
    3b0c:	cd b7       	in	r28, 0x3d	; 61
    3b0e:	de b7       	in	r29, 0x3e	; 62
    3b10:	9a 83       	std	Y+2, r25	; 0x02
    3b12:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_5,OUTPUT);
    3b14:	84 e4       	ldi	r24, 0x44	; 68
    3b16:	65 e0       	ldi	r22, 0x05	; 5
    3b18:	41 e0       	ldi	r20, 0x01	; 1
    3b1a:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Phase Correct PWM mode*/
	SET_BIT(TCCR1A,WGM10);
    3b1e:	af e4       	ldi	r26, 0x4F	; 79
    3b20:	b0 e0       	ldi	r27, 0x00	; 0
    3b22:	ef e4       	ldi	r30, 0x4F	; 79
    3b24:	f0 e0       	ldi	r31, 0x00	; 0
    3b26:	80 81       	ld	r24, Z
    3b28:	81 60       	ori	r24, 0x01	; 1
    3b2a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    3b2c:	af e4       	ldi	r26, 0x4F	; 79
    3b2e:	b0 e0       	ldi	r27, 0x00	; 0
    3b30:	ef e4       	ldi	r30, 0x4F	; 79
    3b32:	f0 e0       	ldi	r31, 0x00	; 0
    3b34:	80 81       	ld	r24, Z
    3b36:	82 60       	ori	r24, 0x02	; 2
    3b38:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM12);
    3b3a:	ae e4       	ldi	r26, 0x4E	; 78
    3b3c:	b0 e0       	ldi	r27, 0x00	; 0
    3b3e:	ee e4       	ldi	r30, 0x4E	; 78
    3b40:	f0 e0       	ldi	r31, 0x00	; 0
    3b42:	80 81       	ld	r24, Z
    3b44:	87 7f       	andi	r24, 0xF7	; 247
    3b46:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    3b48:	ae e4       	ldi	r26, 0x4E	; 78
    3b4a:	b0 e0       	ldi	r27, 0x00	; 0
    3b4c:	ee e4       	ldi	r30, 0x4E	; 78
    3b4e:	f0 e0       	ldi	r31, 0x00	; 0
    3b50:	80 81       	ld	r24, Z
    3b52:	80 61       	ori	r24, 0x10	; 16
    3b54:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR1A = OCR1A_VALUE;
    3b56:	ea e4       	ldi	r30, 0x4A	; 74
    3b58:	f0 e0       	ldi	r31, 0x00	; 0
    3b5a:	89 81       	ldd	r24, Y+1	; 0x01
    3b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b5e:	91 83       	std	Z+1, r25	; 0x01
    3b60:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    3b62:	0e 94 bb 19 	call	0x3376	; 0x3376 <Timer1_Set_Clk>
#if TIMER1_SET_OCRA_ON_DOWNCOUNTING
	CLEAR_BIT(TCCR1A,COM1A0);
    3b66:	af e4       	ldi	r26, 0x4F	; 79
    3b68:	b0 e0       	ldi	r27, 0x00	; 0
    3b6a:	ef e4       	ldi	r30, 0x4F	; 79
    3b6c:	f0 e0       	ldi	r31, 0x00	; 0
    3b6e:	80 81       	ld	r24, Z
    3b70:	8f 7b       	andi	r24, 0xBF	; 191
    3b72:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    3b74:	af e4       	ldi	r26, 0x4F	; 79
    3b76:	b0 e0       	ldi	r27, 0x00	; 0
    3b78:	ef e4       	ldi	r30, 0x4F	; 79
    3b7a:	f0 e0       	ldi	r31, 0x00	; 0
    3b7c:	80 81       	ld	r24, Z
    3b7e:	80 68       	ori	r24, 0x80	; 128
    3b80:	8c 93       	st	X, r24
#elif TIMER1_SET_OCRA_ON_UPCOUNTING
	SET_BIT(TCCR1A,COM1A0);
	SET_BIT(TCCR1A,COM1A1);
#endif
}
    3b82:	0f 90       	pop	r0
    3b84:	0f 90       	pop	r0
    3b86:	cf 91       	pop	r28
    3b88:	df 91       	pop	r29
    3b8a:	08 95       	ret

00003b8c <Timer1_Set_OCB_PhaseCorrect_PWM_Mode>:
void Timer1_Set_OCB_PhaseCorrect_PWM_Mode(u16 OCR1B_VALUE)
{
    3b8c:	df 93       	push	r29
    3b8e:	cf 93       	push	r28
    3b90:	00 d0       	rcall	.+0      	; 0x3b92 <Timer1_Set_OCB_PhaseCorrect_PWM_Mode+0x6>
    3b92:	cd b7       	in	r28, 0x3d	; 61
    3b94:	de b7       	in	r29, 0x3e	; 62
    3b96:	9a 83       	std	Y+2, r25	; 0x02
    3b98:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_5,OUTPUT);
    3b9a:	84 e4       	ldi	r24, 0x44	; 68
    3b9c:	65 e0       	ldi	r22, 0x05	; 5
    3b9e:	41 e0       	ldi	r20, 0x01	; 1
    3ba0:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Phase Correct PWM mode*/
	SET_BIT(TCCR1A,WGM10);
    3ba4:	af e4       	ldi	r26, 0x4F	; 79
    3ba6:	b0 e0       	ldi	r27, 0x00	; 0
    3ba8:	ef e4       	ldi	r30, 0x4F	; 79
    3baa:	f0 e0       	ldi	r31, 0x00	; 0
    3bac:	80 81       	ld	r24, Z
    3bae:	81 60       	ori	r24, 0x01	; 1
    3bb0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    3bb2:	af e4       	ldi	r26, 0x4F	; 79
    3bb4:	b0 e0       	ldi	r27, 0x00	; 0
    3bb6:	ef e4       	ldi	r30, 0x4F	; 79
    3bb8:	f0 e0       	ldi	r31, 0x00	; 0
    3bba:	80 81       	ld	r24, Z
    3bbc:	82 60       	ori	r24, 0x02	; 2
    3bbe:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM12);
    3bc0:	ae e4       	ldi	r26, 0x4E	; 78
    3bc2:	b0 e0       	ldi	r27, 0x00	; 0
    3bc4:	ee e4       	ldi	r30, 0x4E	; 78
    3bc6:	f0 e0       	ldi	r31, 0x00	; 0
    3bc8:	80 81       	ld	r24, Z
    3bca:	87 7f       	andi	r24, 0xF7	; 247
    3bcc:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    3bce:	ae e4       	ldi	r26, 0x4E	; 78
    3bd0:	b0 e0       	ldi	r27, 0x00	; 0
    3bd2:	ee e4       	ldi	r30, 0x4E	; 78
    3bd4:	f0 e0       	ldi	r31, 0x00	; 0
    3bd6:	80 81       	ld	r24, Z
    3bd8:	80 61       	ori	r24, 0x10	; 16
    3bda:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR1B = OCR1B_VALUE;
    3bdc:	e8 e4       	ldi	r30, 0x48	; 72
    3bde:	f0 e0       	ldi	r31, 0x00	; 0
    3be0:	89 81       	ldd	r24, Y+1	; 0x01
    3be2:	9a 81       	ldd	r25, Y+2	; 0x02
    3be4:	91 83       	std	Z+1, r25	; 0x01
    3be6:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    3be8:	0e 94 bb 19 	call	0x3376	; 0x3376 <Timer1_Set_Clk>
#if TIMER1_SET_OCRB_ON_DOWNCOUNTING
	CLEAR_BIT(TCCR1A,COM1B0);
    3bec:	af e4       	ldi	r26, 0x4F	; 79
    3bee:	b0 e0       	ldi	r27, 0x00	; 0
    3bf0:	ef e4       	ldi	r30, 0x4F	; 79
    3bf2:	f0 e0       	ldi	r31, 0x00	; 0
    3bf4:	80 81       	ld	r24, Z
    3bf6:	8f 7e       	andi	r24, 0xEF	; 239
    3bf8:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B1);
    3bfa:	af e4       	ldi	r26, 0x4F	; 79
    3bfc:	b0 e0       	ldi	r27, 0x00	; 0
    3bfe:	ef e4       	ldi	r30, 0x4F	; 79
    3c00:	f0 e0       	ldi	r31, 0x00	; 0
    3c02:	80 81       	ld	r24, Z
    3c04:	80 62       	ori	r24, 0x20	; 32
    3c06:	8c 93       	st	X, r24
#elif TIMER1_SET_OCRB_ON_UPCOUNTING
	SET_BIT(TCCR1A,COM1B0);
	SET_BIT(TCCR1A,COM1B1);
#endif
}
    3c08:	0f 90       	pop	r0
    3c0a:	0f 90       	pop	r0
    3c0c:	cf 91       	pop	r28
    3c0e:	df 91       	pop	r29
    3c10:	08 95       	ret

00003c12 <Timer2_Clk_Select>:
/*====================================================================================*/
/* Timer 2 Functions*/
/*====================================================================================*/

void Timer2_Clk_Select()
{
    3c12:	df 93       	push	r29
    3c14:	cf 93       	push	r28
    3c16:	cd b7       	in	r28, 0x3d	; 61
    3c18:	de b7       	in	r29, 0x3e	; 62
#if TIMER2_EXTERNAL
	SET_BIT(ASSR,AS2);
#elif TIMER2_INTERNAL
	CLEAR_BIT(ASSR,AS2);
    3c1a:	a2 e4       	ldi	r26, 0x42	; 66
    3c1c:	b0 e0       	ldi	r27, 0x00	; 0
    3c1e:	e2 e4       	ldi	r30, 0x42	; 66
    3c20:	f0 e0       	ldi	r31, 0x00	; 0
    3c22:	80 81       	ld	r24, Z
    3c24:	87 7f       	andi	r24, 0xF7	; 247
    3c26:	8c 93       	st	X, r24
#endif
}
    3c28:	cf 91       	pop	r28
    3c2a:	df 91       	pop	r29
    3c2c:	08 95       	ret

00003c2e <Timer2_Set_Clk>:
void Timer2_Set_Clk()
{
    3c2e:	df 93       	push	r29
    3c30:	cf 93       	push	r28
    3c32:	cd b7       	in	r28, 0x3d	; 61
    3c34:	de b7       	in	r29, 0x3e	; 62
	// Select the source of CLK
	Timer2_Clk_Select();
    3c36:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <Timer2_Clk_Select>
#elif TIMER2_DIVIDE_CLK_BY_256
	CLEAR_BIT(TCCR2,CS20);
	SET_BIT(TCCR2,CS21);
	SET_BIT(TCCR2,CS22);
#elif TIMER2_DIVIDE_CLK_BY_1024
	SET_BIT(TCCR2,CS20);
    3c3a:	a5 e4       	ldi	r26, 0x45	; 69
    3c3c:	b0 e0       	ldi	r27, 0x00	; 0
    3c3e:	e5 e4       	ldi	r30, 0x45	; 69
    3c40:	f0 e0       	ldi	r31, 0x00	; 0
    3c42:	80 81       	ld	r24, Z
    3c44:	81 60       	ori	r24, 0x01	; 1
    3c46:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS21);
    3c48:	a5 e4       	ldi	r26, 0x45	; 69
    3c4a:	b0 e0       	ldi	r27, 0x00	; 0
    3c4c:	e5 e4       	ldi	r30, 0x45	; 69
    3c4e:	f0 e0       	ldi	r31, 0x00	; 0
    3c50:	80 81       	ld	r24, Z
    3c52:	82 60       	ori	r24, 0x02	; 2
    3c54:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS22);
    3c56:	a5 e4       	ldi	r26, 0x45	; 69
    3c58:	b0 e0       	ldi	r27, 0x00	; 0
    3c5a:	e5 e4       	ldi	r30, 0x45	; 69
    3c5c:	f0 e0       	ldi	r31, 0x00	; 0
    3c5e:	80 81       	ld	r24, Z
    3c60:	84 60       	ori	r24, 0x04	; 4
    3c62:	8c 93       	st	X, r24
#endif
}
    3c64:	cf 91       	pop	r28
    3c66:	df 91       	pop	r29
    3c68:	08 95       	ret

00003c6a <Timer2_Stop_Count>:
void Timer2_Stop_Count()
{
    3c6a:	df 93       	push	r29
    3c6c:	cf 93       	push	r28
    3c6e:	cd b7       	in	r28, 0x3d	; 61
    3c70:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR2,CS20);
    3c72:	a5 e4       	ldi	r26, 0x45	; 69
    3c74:	b0 e0       	ldi	r27, 0x00	; 0
    3c76:	e5 e4       	ldi	r30, 0x45	; 69
    3c78:	f0 e0       	ldi	r31, 0x00	; 0
    3c7a:	80 81       	ld	r24, Z
    3c7c:	8e 7f       	andi	r24, 0xFE	; 254
    3c7e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,CS21);
    3c80:	a5 e4       	ldi	r26, 0x45	; 69
    3c82:	b0 e0       	ldi	r27, 0x00	; 0
    3c84:	e5 e4       	ldi	r30, 0x45	; 69
    3c86:	f0 e0       	ldi	r31, 0x00	; 0
    3c88:	80 81       	ld	r24, Z
    3c8a:	8d 7f       	andi	r24, 0xFD	; 253
    3c8c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,CS22);
    3c8e:	a5 e4       	ldi	r26, 0x45	; 69
    3c90:	b0 e0       	ldi	r27, 0x00	; 0
    3c92:	e5 e4       	ldi	r30, 0x45	; 69
    3c94:	f0 e0       	ldi	r31, 0x00	; 0
    3c96:	80 81       	ld	r24, Z
    3c98:	8b 7f       	andi	r24, 0xFB	; 251
    3c9a:	8c 93       	st	X, r24
}
    3c9c:	cf 91       	pop	r28
    3c9e:	df 91       	pop	r29
    3ca0:	08 95       	ret

00003ca2 <Timer2_Start_Count>:
void Timer2_Start_Count()
{
    3ca2:	df 93       	push	r29
    3ca4:	cf 93       	push	r28
    3ca6:	cd b7       	in	r28, 0x3d	; 61
    3ca8:	de b7       	in	r29, 0x3e	; 62
	Timer2_Set_Clk();
    3caa:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <Timer2_Set_Clk>
}
    3cae:	cf 91       	pop	r28
    3cb0:	df 91       	pop	r29
    3cb2:	08 95       	ret

00003cb4 <Timer2_Set_OverFlow_Mode>:
void Timer2_Set_OverFlow_Mode()
{
    3cb4:	df 93       	push	r29
    3cb6:	cf 93       	push	r28
    3cb8:	cd b7       	in	r28, 0x3d	; 61
    3cba:	de b7       	in	r29, 0x3e	; 62
	/* Set the Timer Mode to overflow mode */
	CLEAR_BIT(TCCR2,WGM20);
    3cbc:	a5 e4       	ldi	r26, 0x45	; 69
    3cbe:	b0 e0       	ldi	r27, 0x00	; 0
    3cc0:	e5 e4       	ldi	r30, 0x45	; 69
    3cc2:	f0 e0       	ldi	r31, 0x00	; 0
    3cc4:	80 81       	ld	r24, Z
    3cc6:	8f 7b       	andi	r24, 0xBF	; 191
    3cc8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,WGM21);
    3cca:	a5 e4       	ldi	r26, 0x45	; 69
    3ccc:	b0 e0       	ldi	r27, 0x00	; 0
    3cce:	e5 e4       	ldi	r30, 0x45	; 69
    3cd0:	f0 e0       	ldi	r31, 0x00	; 0
    3cd2:	80 81       	ld	r24, Z
    3cd4:	87 7f       	andi	r24, 0xF7	; 247
    3cd6:	8c 93       	st	X, r24
	/* Set Global Interrupt */
	Set_Global_Interrupt();
    3cd8:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <Set_Global_Interrupt>
	/* Set TOIE0 BIT */
	SET_BIT(TIMSK,TOIE2);
    3cdc:	a9 e5       	ldi	r26, 0x59	; 89
    3cde:	b0 e0       	ldi	r27, 0x00	; 0
    3ce0:	e9 e5       	ldi	r30, 0x59	; 89
    3ce2:	f0 e0       	ldi	r31, 0x00	; 0
    3ce4:	80 81       	ld	r24, Z
    3ce6:	80 64       	ori	r24, 0x40	; 64
    3ce8:	8c 93       	st	X, r24
	/* Set the Timer Clk */
	Timer2_Start_Count();
    3cea:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <Timer2_Start_Count>
}
    3cee:	cf 91       	pop	r28
    3cf0:	df 91       	pop	r29
    3cf2:	08 95       	ret

00003cf4 <Timer2_Set_CTC_Mode>:
void Timer2_Set_CTC_Mode(u8 OCR2_VALUE)
{
    3cf4:	df 93       	push	r29
    3cf6:	cf 93       	push	r28
    3cf8:	0f 92       	push	r0
    3cfa:	cd b7       	in	r28, 0x3d	; 61
    3cfc:	de b7       	in	r29, 0x3e	; 62
    3cfe:	89 83       	std	Y+1, r24	; 0x01
	/* Set the Timer Mode to CTC mode */
	CLEAR_BIT(TCCR2,WGM20);
    3d00:	a5 e4       	ldi	r26, 0x45	; 69
    3d02:	b0 e0       	ldi	r27, 0x00	; 0
    3d04:	e5 e4       	ldi	r30, 0x45	; 69
    3d06:	f0 e0       	ldi	r31, 0x00	; 0
    3d08:	80 81       	ld	r24, Z
    3d0a:	8f 7b       	andi	r24, 0xBF	; 191
    3d0c:	8c 93       	st	X, r24
	SET_BIT(TCCR2,WGM21);
    3d0e:	a5 e4       	ldi	r26, 0x45	; 69
    3d10:	b0 e0       	ldi	r27, 0x00	; 0
    3d12:	e5 e4       	ldi	r30, 0x45	; 69
    3d14:	f0 e0       	ldi	r31, 0x00	; 0
    3d16:	80 81       	ld	r24, Z
    3d18:	88 60       	ori	r24, 0x08	; 8
    3d1a:	8c 93       	st	X, r24
	/* load a value in OCR2 */
	OCR2 = OCR2_VALUE;
    3d1c:	e3 e4       	ldi	r30, 0x43	; 67
    3d1e:	f0 e0       	ldi	r31, 0x00	; 0
    3d20:	89 81       	ldd	r24, Y+1	; 0x01
    3d22:	80 83       	st	Z, r24
	/* Set Global Interrupt */
	Set_Global_Interrupt();
    3d24:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <Set_Global_Interrupt>
	/* Set OCIE0 BIT */
	SET_BIT(TIMSK,OCIE2);
    3d28:	a9 e5       	ldi	r26, 0x59	; 89
    3d2a:	b0 e0       	ldi	r27, 0x00	; 0
    3d2c:	e9 e5       	ldi	r30, 0x59	; 89
    3d2e:	f0 e0       	ldi	r31, 0x00	; 0
    3d30:	80 81       	ld	r24, Z
    3d32:	80 68       	ori	r24, 0x80	; 128
    3d34:	8c 93       	st	X, r24
	/* Set the Timer Clk */
	Timer2_Start_Count();
    3d36:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <Timer2_Start_Count>
}
    3d3a:	0f 90       	pop	r0
    3d3c:	cf 91       	pop	r28
    3d3e:	df 91       	pop	r29
    3d40:	08 95       	ret

00003d42 <Timer2_CTC_Generate_Signal>:
void Timer2_CTC_Generate_Signal(u8 OCR2_VALUE)
{
    3d42:	df 93       	push	r29
    3d44:	cf 93       	push	r28
    3d46:	0f 92       	push	r0
    3d48:	cd b7       	in	r28, 0x3d	; 61
    3d4a:	de b7       	in	r29, 0x3e	; 62
    3d4c:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_7,OUTPUT);
    3d4e:	84 e4       	ldi	r24, 0x44	; 68
    3d50:	67 e0       	ldi	r22, 0x07	; 7
    3d52:	41 e0       	ldi	r20, 0x01	; 1
    3d54:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to CTC mode */
	CLEAR_BIT(TCCR2,WGM20);
    3d58:	a5 e4       	ldi	r26, 0x45	; 69
    3d5a:	b0 e0       	ldi	r27, 0x00	; 0
    3d5c:	e5 e4       	ldi	r30, 0x45	; 69
    3d5e:	f0 e0       	ldi	r31, 0x00	; 0
    3d60:	80 81       	ld	r24, Z
    3d62:	8f 7b       	andi	r24, 0xBF	; 191
    3d64:	8c 93       	st	X, r24
	SET_BIT(TCCR2,WGM21);
    3d66:	a5 e4       	ldi	r26, 0x45	; 69
    3d68:	b0 e0       	ldi	r27, 0x00	; 0
    3d6a:	e5 e4       	ldi	r30, 0x45	; 69
    3d6c:	f0 e0       	ldi	r31, 0x00	; 0
    3d6e:	80 81       	ld	r24, Z
    3d70:	88 60       	ori	r24, 0x08	; 8
    3d72:	8c 93       	st	X, r24
	/* load a value in OCR2 */
	OCR2 = OCR2_VALUE;
    3d74:	e3 e4       	ldi	r30, 0x43	; 67
    3d76:	f0 e0       	ldi	r31, 0x00	; 0
    3d78:	89 81       	ldd	r24, Y+1	; 0x01
    3d7a:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer2_Set_Clk();
    3d7c:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <Timer2_Set_Clk>
	/* Set Signal to be Toggle at Compare Match*/
	/* Pin PB3 ( OCO ) */
	SET_BIT(TCCR2,COM20);
    3d80:	a5 e4       	ldi	r26, 0x45	; 69
    3d82:	b0 e0       	ldi	r27, 0x00	; 0
    3d84:	e5 e4       	ldi	r30, 0x45	; 69
    3d86:	f0 e0       	ldi	r31, 0x00	; 0
    3d88:	80 81       	ld	r24, Z
    3d8a:	80 61       	ori	r24, 0x10	; 16
    3d8c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,COM21);
    3d8e:	a5 e4       	ldi	r26, 0x45	; 69
    3d90:	b0 e0       	ldi	r27, 0x00	; 0
    3d92:	e5 e4       	ldi	r30, 0x45	; 69
    3d94:	f0 e0       	ldi	r31, 0x00	; 0
    3d96:	80 81       	ld	r24, Z
    3d98:	8f 7d       	andi	r24, 0xDF	; 223
    3d9a:	8c 93       	st	X, r24
}
    3d9c:	0f 90       	pop	r0
    3d9e:	cf 91       	pop	r28
    3da0:	df 91       	pop	r29
    3da2:	08 95       	ret

00003da4 <Timer2_Set_FastPWM_Mode>:
void Timer2_Set_FastPWM_Mode(u8 OCR2_VALUE)
{
    3da4:	df 93       	push	r29
    3da6:	cf 93       	push	r28
    3da8:	0f 92       	push	r0
    3daa:	cd b7       	in	r28, 0x3d	; 61
    3dac:	de b7       	in	r29, 0x3e	; 62
    3dae:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_7,OUTPUT);
    3db0:	84 e4       	ldi	r24, 0x44	; 68
    3db2:	67 e0       	ldi	r22, 0x07	; 7
    3db4:	41 e0       	ldi	r20, 0x01	; 1
    3db6:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Fast PWM mode */
	SET_BIT(TCCR2,WGM20);
    3dba:	a5 e4       	ldi	r26, 0x45	; 69
    3dbc:	b0 e0       	ldi	r27, 0x00	; 0
    3dbe:	e5 e4       	ldi	r30, 0x45	; 69
    3dc0:	f0 e0       	ldi	r31, 0x00	; 0
    3dc2:	80 81       	ld	r24, Z
    3dc4:	80 64       	ori	r24, 0x40	; 64
    3dc6:	8c 93       	st	X, r24
	SET_BIT(TCCR2,WGM21);
    3dc8:	a5 e4       	ldi	r26, 0x45	; 69
    3dca:	b0 e0       	ldi	r27, 0x00	; 0
    3dcc:	e5 e4       	ldi	r30, 0x45	; 69
    3dce:	f0 e0       	ldi	r31, 0x00	; 0
    3dd0:	80 81       	ld	r24, Z
    3dd2:	88 60       	ori	r24, 0x08	; 8
    3dd4:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR2 = OCR2_VALUE;
    3dd6:	e3 e4       	ldi	r30, 0x43	; 67
    3dd8:	f0 e0       	ldi	r31, 0x00	; 0
    3dda:	89 81       	ldd	r24, Y+1	; 0x01
    3ddc:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer2_Set_Clk();
    3dde:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <Timer2_Set_Clk>
	/* Set PWM On / Off  */
#if TIMER2_SET_OC2_ON_BOTTOM
	CLEAR_BIT(TCCR2,COM20);
    3de2:	a5 e4       	ldi	r26, 0x45	; 69
    3de4:	b0 e0       	ldi	r27, 0x00	; 0
    3de6:	e5 e4       	ldi	r30, 0x45	; 69
    3de8:	f0 e0       	ldi	r31, 0x00	; 0
    3dea:	80 81       	ld	r24, Z
    3dec:	8f 7e       	andi	r24, 0xEF	; 239
    3dee:	8c 93       	st	X, r24
	SET_BIT(TCCR2,COM21);
    3df0:	a5 e4       	ldi	r26, 0x45	; 69
    3df2:	b0 e0       	ldi	r27, 0x00	; 0
    3df4:	e5 e4       	ldi	r30, 0x45	; 69
    3df6:	f0 e0       	ldi	r31, 0x00	; 0
    3df8:	80 81       	ld	r24, Z
    3dfa:	80 62       	ori	r24, 0x20	; 32
    3dfc:	8c 93       	st	X, r24
#elif TIMER2_SET_OC2_ON_COMPARE_MATCH
	SET_BIT(TCCR2,COM20);
	SET_BIT(TCCR2,COM21);
#endif
}
    3dfe:	0f 90       	pop	r0
    3e00:	cf 91       	pop	r28
    3e02:	df 91       	pop	r29
    3e04:	08 95       	ret

00003e06 <PWM_Timer2_Generate>:
void PWM_Timer2_Generate(u8 SPEED_PERCENT)
{
    3e06:	df 93       	push	r29
    3e08:	cf 93       	push	r28
    3e0a:	0f 92       	push	r0
    3e0c:	cd b7       	in	r28, 0x3d	; 61
    3e0e:	de b7       	in	r29, 0x3e	; 62
    3e10:	89 83       	std	Y+1, r24	; 0x01
	Timer2_Set_FastPWM_Mode((SPEED_PERCENT * 2.55));
    3e12:	89 81       	ldd	r24, Y+1	; 0x01
    3e14:	88 2f       	mov	r24, r24
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	aa 27       	eor	r26, r26
    3e1a:	97 fd       	sbrc	r25, 7
    3e1c:	a0 95       	com	r26
    3e1e:	ba 2f       	mov	r27, r26
    3e20:	bc 01       	movw	r22, r24
    3e22:	cd 01       	movw	r24, r26
    3e24:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	bc 01       	movw	r22, r24
    3e2e:	cd 01       	movw	r24, r26
    3e30:	23 e3       	ldi	r18, 0x33	; 51
    3e32:	33 e3       	ldi	r19, 0x33	; 51
    3e34:	43 e2       	ldi	r20, 0x23	; 35
    3e36:	50 e4       	ldi	r21, 0x40	; 64
    3e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3c:	dc 01       	movw	r26, r24
    3e3e:	cb 01       	movw	r24, r22
    3e40:	bc 01       	movw	r22, r24
    3e42:	cd 01       	movw	r24, r26
    3e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e48:	dc 01       	movw	r26, r24
    3e4a:	cb 01       	movw	r24, r22
    3e4c:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <Timer2_Set_FastPWM_Mode>
}
    3e50:	0f 90       	pop	r0
    3e52:	cf 91       	pop	r28
    3e54:	df 91       	pop	r29
    3e56:	08 95       	ret

00003e58 <Timer2_Set_PhaseCorrect_PWM_Mode>:
void Timer2_Set_PhaseCorrect_PWM_Mode(u8 OCR2_VALUE)
{
    3e58:	df 93       	push	r29
    3e5a:	cf 93       	push	r28
    3e5c:	0f 92       	push	r0
    3e5e:	cd b7       	in	r28, 0x3d	; 61
    3e60:	de b7       	in	r29, 0x3e	; 62
    3e62:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_B,PIN_NO_3,OUTPUT);
    3e64:	82 e4       	ldi	r24, 0x42	; 66
    3e66:	63 e0       	ldi	r22, 0x03	; 3
    3e68:	41 e0       	ldi	r20, 0x01	; 1
    3e6a:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Phase Correct PWM mode */
	SET_BIT(TCCR2,WGM20);
    3e6e:	a5 e4       	ldi	r26, 0x45	; 69
    3e70:	b0 e0       	ldi	r27, 0x00	; 0
    3e72:	e5 e4       	ldi	r30, 0x45	; 69
    3e74:	f0 e0       	ldi	r31, 0x00	; 0
    3e76:	80 81       	ld	r24, Z
    3e78:	80 64       	ori	r24, 0x40	; 64
    3e7a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,WGM21);
    3e7c:	a5 e4       	ldi	r26, 0x45	; 69
    3e7e:	b0 e0       	ldi	r27, 0x00	; 0
    3e80:	e5 e4       	ldi	r30, 0x45	; 69
    3e82:	f0 e0       	ldi	r31, 0x00	; 0
    3e84:	80 81       	ld	r24, Z
    3e86:	87 7f       	andi	r24, 0xF7	; 247
    3e88:	8c 93       	st	X, r24
	/* load a value in OCR2 */
	OCR2 = OCR2_VALUE;
    3e8a:	e3 e4       	ldi	r30, 0x43	; 67
    3e8c:	f0 e0       	ldi	r31, 0x00	; 0
    3e8e:	89 81       	ldd	r24, Y+1	; 0x01
    3e90:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer2_Set_Clk();
    3e92:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <Timer2_Set_Clk>
#if TIMER2_SET_OC2_ON_DOWN_COUNTING
	CLEAR_BIT(TCCR2,COM20);
    3e96:	a5 e4       	ldi	r26, 0x45	; 69
    3e98:	b0 e0       	ldi	r27, 0x00	; 0
    3e9a:	e5 e4       	ldi	r30, 0x45	; 69
    3e9c:	f0 e0       	ldi	r31, 0x00	; 0
    3e9e:	80 81       	ld	r24, Z
    3ea0:	8f 7e       	andi	r24, 0xEF	; 239
    3ea2:	8c 93       	st	X, r24
	SET_BIT(TCCR2,COM21);
    3ea4:	a5 e4       	ldi	r26, 0x45	; 69
    3ea6:	b0 e0       	ldi	r27, 0x00	; 0
    3ea8:	e5 e4       	ldi	r30, 0x45	; 69
    3eaa:	f0 e0       	ldi	r31, 0x00	; 0
    3eac:	80 81       	ld	r24, Z
    3eae:	80 62       	ori	r24, 0x20	; 32
    3eb0:	8c 93       	st	X, r24
#elif TIMER2_SET_OC2_ON_UP_COUNTING
	SET_BIT(TCCR2,COM20);
	SET_BIT(TCCR2,COM21);
#endif
}
    3eb2:	0f 90       	pop	r0
    3eb4:	cf 91       	pop	r28
    3eb6:	df 91       	pop	r29
    3eb8:	08 95       	ret

00003eba <Timer2_Clear_TCNT2>:
void Timer2_Clear_TCNT2()
{
    3eba:	df 93       	push	r29
    3ebc:	cf 93       	push	r28
    3ebe:	cd b7       	in	r28, 0x3d	; 61
    3ec0:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = 0;
    3ec2:	e4 e4       	ldi	r30, 0x44	; 68
    3ec4:	f0 e0       	ldi	r31, 0x00	; 0
    3ec6:	10 82       	st	Z, r1
}
    3ec8:	cf 91       	pop	r28
    3eca:	df 91       	pop	r29
    3ecc:	08 95       	ret

00003ece <UltraSonic_vint>:
#include "UltraSonic.h"

void UltraSonic_vint(u8 TRIGGER_PORT, u8 TRIGGER_PIN)
{
    3ece:	df 93       	push	r29
    3ed0:	cf 93       	push	r28
    3ed2:	00 d0       	rcall	.+0      	; 0x3ed4 <UltraSonic_vint+0x6>
    3ed4:	cd b7       	in	r28, 0x3d	; 61
    3ed6:	de b7       	in	r29, 0x3e	; 62
    3ed8:	89 83       	std	Y+1, r24	; 0x01
    3eda:	6a 83       	std	Y+2, r22	; 0x02
	DIO_Set_Pin_Direction(TRIGGER_PORT, TRIGGER_PIN, OUTPUT);
    3edc:	89 81       	ldd	r24, Y+1	; 0x01
    3ede:	6a 81       	ldd	r22, Y+2	; 0x02
    3ee0:	41 e0       	ldi	r20, 0x01	; 1
    3ee2:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_Set_Pin_Direction>
}
    3ee6:	0f 90       	pop	r0
    3ee8:	0f 90       	pop	r0
    3eea:	cf 91       	pop	r28
    3eec:	df 91       	pop	r29
    3eee:	08 95       	ret

00003ef0 <Trigger>:
void Trigger(u8 TRIGGER_PORT, u8 TRIGGER_PIN)
{
    3ef0:	df 93       	push	r29
    3ef2:	cf 93       	push	r28
    3ef4:	cd b7       	in	r28, 0x3d	; 61
    3ef6:	de b7       	in	r29, 0x3e	; 62
    3ef8:	6a 97       	sbiw	r28, 0x1a	; 26
    3efa:	0f b6       	in	r0, 0x3f	; 63
    3efc:	f8 94       	cli
    3efe:	de bf       	out	0x3e, r29	; 62
    3f00:	0f be       	out	0x3f, r0	; 63
    3f02:	cd bf       	out	0x3d, r28	; 61
    3f04:	89 8f       	std	Y+25, r24	; 0x19
    3f06:	6a 8f       	std	Y+26, r22	; 0x1a
	DIO_Write_Pin(TRIGGER_PORT, TRIGGER_PIN, HIGH);
    3f08:	89 8d       	ldd	r24, Y+25	; 0x19
    3f0a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3f0c:	41 e0       	ldi	r20, 0x01	; 1
    3f0e:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_Write_Pin>
    3f12:	80 e0       	ldi	r24, 0x00	; 0
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	a8 e4       	ldi	r26, 0x48	; 72
    3f18:	b2 e4       	ldi	r27, 0x42	; 66
    3f1a:	8d 8b       	std	Y+21, r24	; 0x15
    3f1c:	9e 8b       	std	Y+22, r25	; 0x16
    3f1e:	af 8b       	std	Y+23, r26	; 0x17
    3f20:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3f22:	6d 89       	ldd	r22, Y+21	; 0x15
    3f24:	7e 89       	ldd	r23, Y+22	; 0x16
    3f26:	8f 89       	ldd	r24, Y+23	; 0x17
    3f28:	98 8d       	ldd	r25, Y+24	; 0x18
    3f2a:	2b ea       	ldi	r18, 0xAB	; 171
    3f2c:	3a ea       	ldi	r19, 0xAA	; 170
    3f2e:	4a e2       	ldi	r20, 0x2A	; 42
    3f30:	50 e4       	ldi	r21, 0x40	; 64
    3f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f36:	dc 01       	movw	r26, r24
    3f38:	cb 01       	movw	r24, r22
    3f3a:	89 8b       	std	Y+17, r24	; 0x11
    3f3c:	9a 8b       	std	Y+18, r25	; 0x12
    3f3e:	ab 8b       	std	Y+19, r26	; 0x13
    3f40:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3f42:	69 89       	ldd	r22, Y+17	; 0x11
    3f44:	7a 89       	ldd	r23, Y+18	; 0x12
    3f46:	8b 89       	ldd	r24, Y+19	; 0x13
    3f48:	9c 89       	ldd	r25, Y+20	; 0x14
    3f4a:	20 e0       	ldi	r18, 0x00	; 0
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	40 e8       	ldi	r20, 0x80	; 128
    3f50:	5f e3       	ldi	r21, 0x3F	; 63
    3f52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f56:	88 23       	and	r24, r24
    3f58:	1c f4       	brge	.+6      	; 0x3f60 <Trigger+0x70>
		__ticks = 1;
    3f5a:	81 e0       	ldi	r24, 0x01	; 1
    3f5c:	88 8b       	std	Y+16, r24	; 0x10
    3f5e:	91 c0       	rjmp	.+290    	; 0x4082 <Trigger+0x192>
	else if (__tmp > 255)
    3f60:	69 89       	ldd	r22, Y+17	; 0x11
    3f62:	7a 89       	ldd	r23, Y+18	; 0x12
    3f64:	8b 89       	ldd	r24, Y+19	; 0x13
    3f66:	9c 89       	ldd	r25, Y+20	; 0x14
    3f68:	20 e0       	ldi	r18, 0x00	; 0
    3f6a:	30 e0       	ldi	r19, 0x00	; 0
    3f6c:	4f e7       	ldi	r20, 0x7F	; 127
    3f6e:	53 e4       	ldi	r21, 0x43	; 67
    3f70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f74:	18 16       	cp	r1, r24
    3f76:	0c f0       	brlt	.+2      	; 0x3f7a <Trigger+0x8a>
    3f78:	7b c0       	rjmp	.+246    	; 0x4070 <Trigger+0x180>
	{
		_delay_ms(__us / 1000.0);
    3f7a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f7c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f7e:	8f 89       	ldd	r24, Y+23	; 0x17
    3f80:	98 8d       	ldd	r25, Y+24	; 0x18
    3f82:	20 e0       	ldi	r18, 0x00	; 0
    3f84:	30 e0       	ldi	r19, 0x00	; 0
    3f86:	4a e7       	ldi	r20, 0x7A	; 122
    3f88:	54 e4       	ldi	r21, 0x44	; 68
    3f8a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3f8e:	dc 01       	movw	r26, r24
    3f90:	cb 01       	movw	r24, r22
    3f92:	8c 87       	std	Y+12, r24	; 0x0c
    3f94:	9d 87       	std	Y+13, r25	; 0x0d
    3f96:	ae 87       	std	Y+14, r26	; 0x0e
    3f98:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f9a:	6c 85       	ldd	r22, Y+12	; 0x0c
    3f9c:	7d 85       	ldd	r23, Y+13	; 0x0d
    3f9e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fa0:	9f 85       	ldd	r25, Y+15	; 0x0f
    3fa2:	20 e0       	ldi	r18, 0x00	; 0
    3fa4:	30 e0       	ldi	r19, 0x00	; 0
    3fa6:	4a ef       	ldi	r20, 0xFA	; 250
    3fa8:	54 e4       	ldi	r21, 0x44	; 68
    3faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fae:	dc 01       	movw	r26, r24
    3fb0:	cb 01       	movw	r24, r22
    3fb2:	88 87       	std	Y+8, r24	; 0x08
    3fb4:	99 87       	std	Y+9, r25	; 0x09
    3fb6:	aa 87       	std	Y+10, r26	; 0x0a
    3fb8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3fba:	68 85       	ldd	r22, Y+8	; 0x08
    3fbc:	79 85       	ldd	r23, Y+9	; 0x09
    3fbe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fc0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3fc2:	20 e0       	ldi	r18, 0x00	; 0
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	40 e8       	ldi	r20, 0x80	; 128
    3fc8:	5f e3       	ldi	r21, 0x3F	; 63
    3fca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fce:	88 23       	and	r24, r24
    3fd0:	2c f4       	brge	.+10     	; 0x3fdc <Trigger+0xec>
		__ticks = 1;
    3fd2:	81 e0       	ldi	r24, 0x01	; 1
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	9f 83       	std	Y+7, r25	; 0x07
    3fd8:	8e 83       	std	Y+6, r24	; 0x06
    3fda:	3f c0       	rjmp	.+126    	; 0x405a <Trigger+0x16a>
	else if (__tmp > 65535)
    3fdc:	68 85       	ldd	r22, Y+8	; 0x08
    3fde:	79 85       	ldd	r23, Y+9	; 0x09
    3fe0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fe2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3fe4:	20 e0       	ldi	r18, 0x00	; 0
    3fe6:	3f ef       	ldi	r19, 0xFF	; 255
    3fe8:	4f e7       	ldi	r20, 0x7F	; 127
    3fea:	57 e4       	ldi	r21, 0x47	; 71
    3fec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ff0:	18 16       	cp	r1, r24
    3ff2:	4c f5       	brge	.+82     	; 0x4046 <Trigger+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ff4:	6c 85       	ldd	r22, Y+12	; 0x0c
    3ff6:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ff8:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ffa:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	40 e2       	ldi	r20, 0x20	; 32
    4002:	51 e4       	ldi	r21, 0x41	; 65
    4004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4008:	dc 01       	movw	r26, r24
    400a:	cb 01       	movw	r24, r22
    400c:	bc 01       	movw	r22, r24
    400e:	cd 01       	movw	r24, r26
    4010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4014:	dc 01       	movw	r26, r24
    4016:	cb 01       	movw	r24, r22
    4018:	9f 83       	std	Y+7, r25	; 0x07
    401a:	8e 83       	std	Y+6, r24	; 0x06
    401c:	0f c0       	rjmp	.+30     	; 0x403c <Trigger+0x14c>
    401e:	88 ec       	ldi	r24, 0xC8	; 200
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	9d 83       	std	Y+5, r25	; 0x05
    4024:	8c 83       	std	Y+4, r24	; 0x04
    4026:	8c 81       	ldd	r24, Y+4	; 0x04
    4028:	9d 81       	ldd	r25, Y+5	; 0x05
    402a:	01 97       	sbiw	r24, 0x01	; 1
    402c:	f1 f7       	brne	.-4      	; 0x402a <Trigger+0x13a>
    402e:	9d 83       	std	Y+5, r25	; 0x05
    4030:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4032:	8e 81       	ldd	r24, Y+6	; 0x06
    4034:	9f 81       	ldd	r25, Y+7	; 0x07
    4036:	01 97       	sbiw	r24, 0x01	; 1
    4038:	9f 83       	std	Y+7, r25	; 0x07
    403a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    403c:	8e 81       	ldd	r24, Y+6	; 0x06
    403e:	9f 81       	ldd	r25, Y+7	; 0x07
    4040:	00 97       	sbiw	r24, 0x00	; 0
    4042:	69 f7       	brne	.-38     	; 0x401e <Trigger+0x12e>
    4044:	24 c0       	rjmp	.+72     	; 0x408e <Trigger+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4046:	68 85       	ldd	r22, Y+8	; 0x08
    4048:	79 85       	ldd	r23, Y+9	; 0x09
    404a:	8a 85       	ldd	r24, Y+10	; 0x0a
    404c:	9b 85       	ldd	r25, Y+11	; 0x0b
    404e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4052:	dc 01       	movw	r26, r24
    4054:	cb 01       	movw	r24, r22
    4056:	9f 83       	std	Y+7, r25	; 0x07
    4058:	8e 83       	std	Y+6, r24	; 0x06
    405a:	8e 81       	ldd	r24, Y+6	; 0x06
    405c:	9f 81       	ldd	r25, Y+7	; 0x07
    405e:	9b 83       	std	Y+3, r25	; 0x03
    4060:	8a 83       	std	Y+2, r24	; 0x02
    4062:	8a 81       	ldd	r24, Y+2	; 0x02
    4064:	9b 81       	ldd	r25, Y+3	; 0x03
    4066:	01 97       	sbiw	r24, 0x01	; 1
    4068:	f1 f7       	brne	.-4      	; 0x4066 <Trigger+0x176>
    406a:	9b 83       	std	Y+3, r25	; 0x03
    406c:	8a 83       	std	Y+2, r24	; 0x02
    406e:	0f c0       	rjmp	.+30     	; 0x408e <Trigger+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4070:	69 89       	ldd	r22, Y+17	; 0x11
    4072:	7a 89       	ldd	r23, Y+18	; 0x12
    4074:	8b 89       	ldd	r24, Y+19	; 0x13
    4076:	9c 89       	ldd	r25, Y+20	; 0x14
    4078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    407c:	dc 01       	movw	r26, r24
    407e:	cb 01       	movw	r24, r22
    4080:	88 8b       	std	Y+16, r24	; 0x10
    4082:	88 89       	ldd	r24, Y+16	; 0x10
    4084:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4086:	89 81       	ldd	r24, Y+1	; 0x01
    4088:	8a 95       	dec	r24
    408a:	f1 f7       	brne	.-4      	; 0x4088 <Trigger+0x198>
    408c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	DIO_Write_Pin(TRIGGER_PORT, TRIGGER_PIN, LOW);
    408e:	89 8d       	ldd	r24, Y+25	; 0x19
    4090:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4092:	40 e0       	ldi	r20, 0x00	; 0
    4094:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_Write_Pin>
}
    4098:	6a 96       	adiw	r28, 0x1a	; 26
    409a:	0f b6       	in	r0, 0x3f	; 63
    409c:	f8 94       	cli
    409e:	de bf       	out	0x3e, r29	; 62
    40a0:	0f be       	out	0x3f, r0	; 63
    40a2:	cd bf       	out	0x3d, r28	; 61
    40a4:	cf 91       	pop	r28
    40a6:	df 91       	pop	r29
    40a8:	08 95       	ret

000040aa <UltraSonic_ICR_Read>:

u16 UltraSonic_ICR_Read(u8 TRIGGER_PORT, u8 TRIGGER_PIN)
{
    40aa:	df 93       	push	r29
    40ac:	cf 93       	push	r28
    40ae:	cd b7       	in	r28, 0x3d	; 61
    40b0:	de b7       	in	r29, 0x3e	; 62
    40b2:	28 97       	sbiw	r28, 0x08	; 8
    40b4:	0f b6       	in	r0, 0x3f	; 63
    40b6:	f8 94       	cli
    40b8:	de bf       	out	0x3e, r29	; 62
    40ba:	0f be       	out	0x3f, r0	; 63
    40bc:	cd bf       	out	0x3d, r28	; 61
    40be:	8f 83       	std	Y+7, r24	; 0x07
    40c0:	68 87       	std	Y+8, r22	; 0x08
	u16 High;
	Timer1_Clear_TCNT1();
    40c2:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <Timer1_Clear_TCNT1>
	//Timer1_Set_OverFlow_Mode();
	Timer1_Start_Count();
    40c6:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <Timer1_Start_Count>
	Timer1_Clear_ICF1_BIT();
    40ca:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <Timer1_Clear_ICF1_BIT>
	Trigger(TRIGGER_PORT, TRIGGER_PIN);
    40ce:	8f 81       	ldd	r24, Y+7	; 0x07
    40d0:	68 85       	ldd	r22, Y+8	; 0x08
    40d2:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <Trigger>
	Timer1_Set_ICU_Rising_Edge();
    40d6:	0e 94 bf 1c 	call	0x397e	; 0x397e <Timer1_Set_ICU_Rising_Edge>
	while(Timer1_Check_ICF1_BIT() == 0);
    40da:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <Timer1_Check_ICF1_BIT>
    40de:	88 23       	and	r24, r24
    40e0:	e1 f3       	breq	.-8      	; 0x40da <UltraSonic_ICR_Read+0x30>
	u16 RISING_CAPTURE = ICR1;
    40e2:	e6 e4       	ldi	r30, 0x46	; 70
    40e4:	f0 e0       	ldi	r31, 0x00	; 0
    40e6:	80 81       	ld	r24, Z
    40e8:	91 81       	ldd	r25, Z+1	; 0x01
    40ea:	9c 83       	std	Y+4, r25	; 0x04
    40ec:	8b 83       	std	Y+3, r24	; 0x03
	Timer1_Clear_ICF1_BIT();
    40ee:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <Timer1_Clear_ICF1_BIT>
	Timer1_Set_ICU_Falling_Edge();
    40f2:	0e 94 cd 1c 	call	0x399a	; 0x399a <Timer1_Set_ICU_Falling_Edge>
	while(Timer1_Check_ICF1_BIT() == 0);
    40f6:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <Timer1_Check_ICF1_BIT>
    40fa:	88 23       	and	r24, r24
    40fc:	e1 f3       	breq	.-8      	; 0x40f6 <UltraSonic_ICR_Read+0x4c>
	u16 FALLING_CAPTURE = ICR1;
    40fe:	e6 e4       	ldi	r30, 0x46	; 70
    4100:	f0 e0       	ldi	r31, 0x00	; 0
    4102:	80 81       	ld	r24, Z
    4104:	91 81       	ldd	r25, Z+1	; 0x01
    4106:	9a 83       	std	Y+2, r25	; 0x02
    4108:	89 83       	std	Y+1, r24	; 0x01
	Timer1_Clear_ICF1_BIT();
    410a:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <Timer1_Clear_ICF1_BIT>
	Timer1_Stop_Count();
    410e:	0e 94 d7 19 	call	0x33ae	; 0x33ae <Timer1_Stop_Count>
	Timer1_Clear_TCNT1();
    4112:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <Timer1_Clear_TCNT1>
	High = FALLING_CAPTURE - RISING_CAPTURE;
    4116:	29 81       	ldd	r18, Y+1	; 0x01
    4118:	3a 81       	ldd	r19, Y+2	; 0x02
    411a:	8b 81       	ldd	r24, Y+3	; 0x03
    411c:	9c 81       	ldd	r25, Y+4	; 0x04
    411e:	a9 01       	movw	r20, r18
    4120:	48 1b       	sub	r20, r24
    4122:	59 0b       	sbc	r21, r25
    4124:	ca 01       	movw	r24, r20
    4126:	9e 83       	std	Y+6, r25	; 0x06
    4128:	8d 83       	std	Y+5, r24	; 0x05

	return (High * 2.2144);
    412a:	8d 81       	ldd	r24, Y+5	; 0x05
    412c:	9e 81       	ldd	r25, Y+6	; 0x06
    412e:	cc 01       	movw	r24, r24
    4130:	a0 e0       	ldi	r26, 0x00	; 0
    4132:	b0 e0       	ldi	r27, 0x00	; 0
    4134:	bc 01       	movw	r22, r24
    4136:	cd 01       	movw	r24, r26
    4138:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    413c:	dc 01       	movw	r26, r24
    413e:	cb 01       	movw	r24, r22
    4140:	bc 01       	movw	r22, r24
    4142:	cd 01       	movw	r24, r26
    4144:	2b eb       	ldi	r18, 0xBB	; 187
    4146:	38 eb       	ldi	r19, 0xB8	; 184
    4148:	4d e0       	ldi	r20, 0x0D	; 13
    414a:	50 e4       	ldi	r21, 0x40	; 64
    414c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	bc 01       	movw	r22, r24
    4156:	cd 01       	movw	r24, r26
    4158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    415c:	dc 01       	movw	r26, r24
    415e:	cb 01       	movw	r24, r22
}
    4160:	28 96       	adiw	r28, 0x08	; 8
    4162:	0f b6       	in	r0, 0x3f	; 63
    4164:	f8 94       	cli
    4166:	de bf       	out	0x3e, r29	; 62
    4168:	0f be       	out	0x3f, r0	; 63
    416a:	cd bf       	out	0x3d, r28	; 61
    416c:	cf 91       	pop	r28
    416e:	df 91       	pop	r29
    4170:	08 95       	ret

00004172 <main>:
 */
#include "UltraSonic.h"
#include "LCD.h"
#include "Timers.h"
int main(void)
{
    4172:	df 93       	push	r29
    4174:	cf 93       	push	r28
    4176:	cd b7       	in	r28, 0x3d	; 61
    4178:	de b7       	in	r29, 0x3e	; 62
    417a:	66 97       	sbiw	r28, 0x16	; 22
    417c:	0f b6       	in	r0, 0x3f	; 63
    417e:	f8 94       	cli
    4180:	de bf       	out	0x3e, r29	; 62
    4182:	0f be       	out	0x3f, r0	; 63
    4184:	cd bf       	out	0x3d, r28	; 61
	u16 UltraSonic_1, UltraSonic_2, UltraSonic_3,UltraSonic_4;
	LCD_vInit();
    4186:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_vInit>
	UltraSonic_vint(PORT_C,PIN_NO_0); // Ultra 1
    418a:	83 e4       	ldi	r24, 0x43	; 67
    418c:	60 e0       	ldi	r22, 0x00	; 0
    418e:	0e 94 67 1f 	call	0x3ece	; 0x3ece <UltraSonic_vint>
	UltraSonic_vint(PORT_C,PIN_NO_1); // Ultra 2
    4192:	83 e4       	ldi	r24, 0x43	; 67
    4194:	61 e0       	ldi	r22, 0x01	; 1
    4196:	0e 94 67 1f 	call	0x3ece	; 0x3ece <UltraSonic_vint>
	UltraSonic_vint(PORT_C,PIN_NO_2); // Ultra 3
    419a:	83 e4       	ldi	r24, 0x43	; 67
    419c:	62 e0       	ldi	r22, 0x02	; 2
    419e:	0e 94 67 1f 	call	0x3ece	; 0x3ece <UltraSonic_vint>
	UltraSonic_vint(PORT_C,PIN_NO_3); // Ultra 4
    41a2:	83 e4       	ldi	r24, 0x43	; 67
    41a4:	63 e0       	ldi	r22, 0x03	; 3
    41a6:	0e 94 67 1f 	call	0x3ece	; 0x3ece <UltraSonic_vint>
	Timer1_Set_OverFlow_Mode();
    41aa:	0e 94 18 1a 	call	0x3430	; 0x3430 <Timer1_Set_OverFlow_Mode>
	Timer1_Stop_Count();
    41ae:	0e 94 d7 19 	call	0x33ae	; 0x33ae <Timer1_Stop_Count>
	LCD_DiplayON_CursorOff();
    41b2:	0e 94 79 14 	call	0x28f2	; 0x28f2 <LCD_DiplayON_CursorOff>
	while(1)
	{
		UltraSonic_1 = UltraSonic_ICR_Read(PORT_C,PIN_NO_0);
    41b6:	83 e4       	ldi	r24, 0x43	; 67
    41b8:	60 e0       	ldi	r22, 0x00	; 0
    41ba:	0e 94 55 20 	call	0x40aa	; 0x40aa <UltraSonic_ICR_Read>
    41be:	9e 8b       	std	Y+22, r25	; 0x16
    41c0:	8d 8b       	std	Y+21, r24	; 0x15
		UltraSonic_2 = UltraSonic_ICR_Read(PORT_C,PIN_NO_1);
    41c2:	83 e4       	ldi	r24, 0x43	; 67
    41c4:	61 e0       	ldi	r22, 0x01	; 1
    41c6:	0e 94 55 20 	call	0x40aa	; 0x40aa <UltraSonic_ICR_Read>
    41ca:	9c 8b       	std	Y+20, r25	; 0x14
    41cc:	8b 8b       	std	Y+19, r24	; 0x13
		UltraSonic_3 = UltraSonic_ICR_Read(PORT_C,PIN_NO_2);
    41ce:	83 e4       	ldi	r24, 0x43	; 67
    41d0:	62 e0       	ldi	r22, 0x02	; 2
    41d2:	0e 94 55 20 	call	0x40aa	; 0x40aa <UltraSonic_ICR_Read>
    41d6:	9a 8b       	std	Y+18, r25	; 0x12
    41d8:	89 8b       	std	Y+17, r24	; 0x11
		UltraSonic_4 = UltraSonic_ICR_Read(PORT_C,PIN_NO_3);
    41da:	83 e4       	ldi	r24, 0x43	; 67
    41dc:	63 e0       	ldi	r22, 0x03	; 3
    41de:	0e 94 55 20 	call	0x40aa	; 0x40aa <UltraSonic_ICR_Read>
    41e2:	98 8b       	std	Y+16, r25	; 0x10
    41e4:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_Move_Cursor(1,1);
    41e6:	81 e0       	ldi	r24, 0x01	; 1
    41e8:	61 e0       	ldi	r22, 0x01	; 1
    41ea:	0e 94 39 16 	call	0x2c72	; 0x2c72 <LCD_Move_Cursor>
		LCD_vSendString("Front:");
    41ee:	80 e6       	ldi	r24, 0x60	; 96
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	0e 94 88 16 	call	0x2d10	; 0x2d10 <LCD_vSendString>
		LCD_vSendChar((UltraSonic_1/10) + 48);
    41f6:	8d 89       	ldd	r24, Y+21	; 0x15
    41f8:	9e 89       	ldd	r25, Y+22	; 0x16
    41fa:	2a e0       	ldi	r18, 0x0A	; 10
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	b9 01       	movw	r22, r18
    4200:	0e 94 da 21 	call	0x43b4	; 0x43b4 <__udivmodhi4>
    4204:	cb 01       	movw	r24, r22
    4206:	80 5d       	subi	r24, 0xD0	; 208
    4208:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <LCD_vSendChar>
		LCD_vSendChar((UltraSonic_1%10) + 48);
    420c:	8d 89       	ldd	r24, Y+21	; 0x15
    420e:	9e 89       	ldd	r25, Y+22	; 0x16
    4210:	2a e0       	ldi	r18, 0x0A	; 10
    4212:	30 e0       	ldi	r19, 0x00	; 0
    4214:	b9 01       	movw	r22, r18
    4216:	0e 94 da 21 	call	0x43b4	; 0x43b4 <__udivmodhi4>
    421a:	80 5d       	subi	r24, 0xD0	; 208
    421c:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <LCD_vSendChar>
		LCD_Move_Cursor(1,10);
    4220:	81 e0       	ldi	r24, 0x01	; 1
    4222:	6a e0       	ldi	r22, 0x0A	; 10
    4224:	0e 94 39 16 	call	0x2c72	; 0x2c72 <LCD_Move_Cursor>
		LCD_vSendString("Back:");
    4228:	87 e6       	ldi	r24, 0x67	; 103
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	0e 94 88 16 	call	0x2d10	; 0x2d10 <LCD_vSendString>
		LCD_vSendChar((UltraSonic_2/10) + 48);
    4230:	8b 89       	ldd	r24, Y+19	; 0x13
    4232:	9c 89       	ldd	r25, Y+20	; 0x14
    4234:	2a e0       	ldi	r18, 0x0A	; 10
    4236:	30 e0       	ldi	r19, 0x00	; 0
    4238:	b9 01       	movw	r22, r18
    423a:	0e 94 da 21 	call	0x43b4	; 0x43b4 <__udivmodhi4>
    423e:	cb 01       	movw	r24, r22
    4240:	80 5d       	subi	r24, 0xD0	; 208
    4242:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <LCD_vSendChar>
		LCD_vSendChar((UltraSonic_2%10) + 48);
    4246:	8b 89       	ldd	r24, Y+19	; 0x13
    4248:	9c 89       	ldd	r25, Y+20	; 0x14
    424a:	2a e0       	ldi	r18, 0x0A	; 10
    424c:	30 e0       	ldi	r19, 0x00	; 0
    424e:	b9 01       	movw	r22, r18
    4250:	0e 94 da 21 	call	0x43b4	; 0x43b4 <__udivmodhi4>
    4254:	80 5d       	subi	r24, 0xD0	; 208
    4256:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <LCD_vSendChar>
		LCD_Move_Cursor(2,1);
    425a:	82 e0       	ldi	r24, 0x02	; 2
    425c:	61 e0       	ldi	r22, 0x01	; 1
    425e:	0e 94 39 16 	call	0x2c72	; 0x2c72 <LCD_Move_Cursor>
		LCD_vSendString("Right:");
    4262:	8d e6       	ldi	r24, 0x6D	; 109
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	0e 94 88 16 	call	0x2d10	; 0x2d10 <LCD_vSendString>
		LCD_vSendChar((UltraSonic_3/10) + 48);
    426a:	89 89       	ldd	r24, Y+17	; 0x11
    426c:	9a 89       	ldd	r25, Y+18	; 0x12
    426e:	2a e0       	ldi	r18, 0x0A	; 10
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	b9 01       	movw	r22, r18
    4274:	0e 94 da 21 	call	0x43b4	; 0x43b4 <__udivmodhi4>
    4278:	cb 01       	movw	r24, r22
    427a:	80 5d       	subi	r24, 0xD0	; 208
    427c:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <LCD_vSendChar>
		LCD_vSendChar((UltraSonic_3%10) + 48);
    4280:	89 89       	ldd	r24, Y+17	; 0x11
    4282:	9a 89       	ldd	r25, Y+18	; 0x12
    4284:	2a e0       	ldi	r18, 0x0A	; 10
    4286:	30 e0       	ldi	r19, 0x00	; 0
    4288:	b9 01       	movw	r22, r18
    428a:	0e 94 da 21 	call	0x43b4	; 0x43b4 <__udivmodhi4>
    428e:	80 5d       	subi	r24, 0xD0	; 208
    4290:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <LCD_vSendChar>
		LCD_Move_Cursor(2,10);
    4294:	82 e0       	ldi	r24, 0x02	; 2
    4296:	6a e0       	ldi	r22, 0x0A	; 10
    4298:	0e 94 39 16 	call	0x2c72	; 0x2c72 <LCD_Move_Cursor>
		LCD_vSendString("Left:");
    429c:	84 e7       	ldi	r24, 0x74	; 116
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	0e 94 88 16 	call	0x2d10	; 0x2d10 <LCD_vSendString>
		LCD_vSendChar((UltraSonic_4/10) + 48);
    42a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    42a6:	98 89       	ldd	r25, Y+16	; 0x10
    42a8:	2a e0       	ldi	r18, 0x0A	; 10
    42aa:	30 e0       	ldi	r19, 0x00	; 0
    42ac:	b9 01       	movw	r22, r18
    42ae:	0e 94 da 21 	call	0x43b4	; 0x43b4 <__udivmodhi4>
    42b2:	cb 01       	movw	r24, r22
    42b4:	80 5d       	subi	r24, 0xD0	; 208
    42b6:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <LCD_vSendChar>
		LCD_vSendChar((UltraSonic_4%10) + 48);
    42ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    42bc:	98 89       	ldd	r25, Y+16	; 0x10
    42be:	2a e0       	ldi	r18, 0x0A	; 10
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	b9 01       	movw	r22, r18
    42c4:	0e 94 da 21 	call	0x43b4	; 0x43b4 <__udivmodhi4>
    42c8:	80 5d       	subi	r24, 0xD0	; 208
    42ca:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <LCD_vSendChar>
    42ce:	80 e0       	ldi	r24, 0x00	; 0
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	a8 ec       	ldi	r26, 0xC8	; 200
    42d4:	b2 e4       	ldi	r27, 0x42	; 66
    42d6:	8b 87       	std	Y+11, r24	; 0x0b
    42d8:	9c 87       	std	Y+12, r25	; 0x0c
    42da:	ad 87       	std	Y+13, r26	; 0x0d
    42dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42de:	6b 85       	ldd	r22, Y+11	; 0x0b
    42e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    42e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    42e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    42e6:	20 e0       	ldi	r18, 0x00	; 0
    42e8:	30 e0       	ldi	r19, 0x00	; 0
    42ea:	4a ef       	ldi	r20, 0xFA	; 250
    42ec:	54 e4       	ldi	r21, 0x44	; 68
    42ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42f2:	dc 01       	movw	r26, r24
    42f4:	cb 01       	movw	r24, r22
    42f6:	8f 83       	std	Y+7, r24	; 0x07
    42f8:	98 87       	std	Y+8, r25	; 0x08
    42fa:	a9 87       	std	Y+9, r26	; 0x09
    42fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4300:	78 85       	ldd	r23, Y+8	; 0x08
    4302:	89 85       	ldd	r24, Y+9	; 0x09
    4304:	9a 85       	ldd	r25, Y+10	; 0x0a
    4306:	20 e0       	ldi	r18, 0x00	; 0
    4308:	30 e0       	ldi	r19, 0x00	; 0
    430a:	40 e8       	ldi	r20, 0x80	; 128
    430c:	5f e3       	ldi	r21, 0x3F	; 63
    430e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4312:	88 23       	and	r24, r24
    4314:	2c f4       	brge	.+10     	; 0x4320 <main+0x1ae>
		__ticks = 1;
    4316:	81 e0       	ldi	r24, 0x01	; 1
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	9e 83       	std	Y+6, r25	; 0x06
    431c:	8d 83       	std	Y+5, r24	; 0x05
    431e:	3f c0       	rjmp	.+126    	; 0x439e <main+0x22c>
	else if (__tmp > 65535)
    4320:	6f 81       	ldd	r22, Y+7	; 0x07
    4322:	78 85       	ldd	r23, Y+8	; 0x08
    4324:	89 85       	ldd	r24, Y+9	; 0x09
    4326:	9a 85       	ldd	r25, Y+10	; 0x0a
    4328:	20 e0       	ldi	r18, 0x00	; 0
    432a:	3f ef       	ldi	r19, 0xFF	; 255
    432c:	4f e7       	ldi	r20, 0x7F	; 127
    432e:	57 e4       	ldi	r21, 0x47	; 71
    4330:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4334:	18 16       	cp	r1, r24
    4336:	4c f5       	brge	.+82     	; 0x438a <main+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4338:	6b 85       	ldd	r22, Y+11	; 0x0b
    433a:	7c 85       	ldd	r23, Y+12	; 0x0c
    433c:	8d 85       	ldd	r24, Y+13	; 0x0d
    433e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4340:	20 e0       	ldi	r18, 0x00	; 0
    4342:	30 e0       	ldi	r19, 0x00	; 0
    4344:	40 e2       	ldi	r20, 0x20	; 32
    4346:	51 e4       	ldi	r21, 0x41	; 65
    4348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    434c:	dc 01       	movw	r26, r24
    434e:	cb 01       	movw	r24, r22
    4350:	bc 01       	movw	r22, r24
    4352:	cd 01       	movw	r24, r26
    4354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4358:	dc 01       	movw	r26, r24
    435a:	cb 01       	movw	r24, r22
    435c:	9e 83       	std	Y+6, r25	; 0x06
    435e:	8d 83       	std	Y+5, r24	; 0x05
    4360:	0f c0       	rjmp	.+30     	; 0x4380 <main+0x20e>
    4362:	88 ec       	ldi	r24, 0xC8	; 200
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	9c 83       	std	Y+4, r25	; 0x04
    4368:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    436a:	8b 81       	ldd	r24, Y+3	; 0x03
    436c:	9c 81       	ldd	r25, Y+4	; 0x04
    436e:	01 97       	sbiw	r24, 0x01	; 1
    4370:	f1 f7       	brne	.-4      	; 0x436e <main+0x1fc>
    4372:	9c 83       	std	Y+4, r25	; 0x04
    4374:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4376:	8d 81       	ldd	r24, Y+5	; 0x05
    4378:	9e 81       	ldd	r25, Y+6	; 0x06
    437a:	01 97       	sbiw	r24, 0x01	; 1
    437c:	9e 83       	std	Y+6, r25	; 0x06
    437e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4380:	8d 81       	ldd	r24, Y+5	; 0x05
    4382:	9e 81       	ldd	r25, Y+6	; 0x06
    4384:	00 97       	sbiw	r24, 0x00	; 0
    4386:	69 f7       	brne	.-38     	; 0x4362 <main+0x1f0>
    4388:	16 cf       	rjmp	.-468    	; 0x41b6 <main+0x44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    438a:	6f 81       	ldd	r22, Y+7	; 0x07
    438c:	78 85       	ldd	r23, Y+8	; 0x08
    438e:	89 85       	ldd	r24, Y+9	; 0x09
    4390:	9a 85       	ldd	r25, Y+10	; 0x0a
    4392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4396:	dc 01       	movw	r26, r24
    4398:	cb 01       	movw	r24, r22
    439a:	9e 83       	std	Y+6, r25	; 0x06
    439c:	8d 83       	std	Y+5, r24	; 0x05
    439e:	8d 81       	ldd	r24, Y+5	; 0x05
    43a0:	9e 81       	ldd	r25, Y+6	; 0x06
    43a2:	9a 83       	std	Y+2, r25	; 0x02
    43a4:	89 83       	std	Y+1, r24	; 0x01
    43a6:	89 81       	ldd	r24, Y+1	; 0x01
    43a8:	9a 81       	ldd	r25, Y+2	; 0x02
    43aa:	01 97       	sbiw	r24, 0x01	; 1
    43ac:	f1 f7       	brne	.-4      	; 0x43aa <main+0x238>
    43ae:	9a 83       	std	Y+2, r25	; 0x02
    43b0:	89 83       	std	Y+1, r24	; 0x01
    43b2:	01 cf       	rjmp	.-510    	; 0x41b6 <main+0x44>

000043b4 <__udivmodhi4>:
    43b4:	aa 1b       	sub	r26, r26
    43b6:	bb 1b       	sub	r27, r27
    43b8:	51 e1       	ldi	r21, 0x11	; 17
    43ba:	07 c0       	rjmp	.+14     	; 0x43ca <__udivmodhi4_ep>

000043bc <__udivmodhi4_loop>:
    43bc:	aa 1f       	adc	r26, r26
    43be:	bb 1f       	adc	r27, r27
    43c0:	a6 17       	cp	r26, r22
    43c2:	b7 07       	cpc	r27, r23
    43c4:	10 f0       	brcs	.+4      	; 0x43ca <__udivmodhi4_ep>
    43c6:	a6 1b       	sub	r26, r22
    43c8:	b7 0b       	sbc	r27, r23

000043ca <__udivmodhi4_ep>:
    43ca:	88 1f       	adc	r24, r24
    43cc:	99 1f       	adc	r25, r25
    43ce:	5a 95       	dec	r21
    43d0:	a9 f7       	brne	.-22     	; 0x43bc <__udivmodhi4_loop>
    43d2:	80 95       	com	r24
    43d4:	90 95       	com	r25
    43d6:	bc 01       	movw	r22, r24
    43d8:	cd 01       	movw	r24, r26
    43da:	08 95       	ret

000043dc <__prologue_saves__>:
    43dc:	2f 92       	push	r2
    43de:	3f 92       	push	r3
    43e0:	4f 92       	push	r4
    43e2:	5f 92       	push	r5
    43e4:	6f 92       	push	r6
    43e6:	7f 92       	push	r7
    43e8:	8f 92       	push	r8
    43ea:	9f 92       	push	r9
    43ec:	af 92       	push	r10
    43ee:	bf 92       	push	r11
    43f0:	cf 92       	push	r12
    43f2:	df 92       	push	r13
    43f4:	ef 92       	push	r14
    43f6:	ff 92       	push	r15
    43f8:	0f 93       	push	r16
    43fa:	1f 93       	push	r17
    43fc:	cf 93       	push	r28
    43fe:	df 93       	push	r29
    4400:	cd b7       	in	r28, 0x3d	; 61
    4402:	de b7       	in	r29, 0x3e	; 62
    4404:	ca 1b       	sub	r28, r26
    4406:	db 0b       	sbc	r29, r27
    4408:	0f b6       	in	r0, 0x3f	; 63
    440a:	f8 94       	cli
    440c:	de bf       	out	0x3e, r29	; 62
    440e:	0f be       	out	0x3f, r0	; 63
    4410:	cd bf       	out	0x3d, r28	; 61
    4412:	09 94       	ijmp

00004414 <__epilogue_restores__>:
    4414:	2a 88       	ldd	r2, Y+18	; 0x12
    4416:	39 88       	ldd	r3, Y+17	; 0x11
    4418:	48 88       	ldd	r4, Y+16	; 0x10
    441a:	5f 84       	ldd	r5, Y+15	; 0x0f
    441c:	6e 84       	ldd	r6, Y+14	; 0x0e
    441e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4420:	8c 84       	ldd	r8, Y+12	; 0x0c
    4422:	9b 84       	ldd	r9, Y+11	; 0x0b
    4424:	aa 84       	ldd	r10, Y+10	; 0x0a
    4426:	b9 84       	ldd	r11, Y+9	; 0x09
    4428:	c8 84       	ldd	r12, Y+8	; 0x08
    442a:	df 80       	ldd	r13, Y+7	; 0x07
    442c:	ee 80       	ldd	r14, Y+6	; 0x06
    442e:	fd 80       	ldd	r15, Y+5	; 0x05
    4430:	0c 81       	ldd	r16, Y+4	; 0x04
    4432:	1b 81       	ldd	r17, Y+3	; 0x03
    4434:	aa 81       	ldd	r26, Y+2	; 0x02
    4436:	b9 81       	ldd	r27, Y+1	; 0x01
    4438:	ce 0f       	add	r28, r30
    443a:	d1 1d       	adc	r29, r1
    443c:	0f b6       	in	r0, 0x3f	; 63
    443e:	f8 94       	cli
    4440:	de bf       	out	0x3e, r29	; 62
    4442:	0f be       	out	0x3f, r0	; 63
    4444:	cd bf       	out	0x3d, r28	; 61
    4446:	ed 01       	movw	r28, r26
    4448:	08 95       	ret

0000444a <itoa>:
    444a:	fb 01       	movw	r30, r22
    444c:	9f 01       	movw	r18, r30
    444e:	e8 94       	clt
    4450:	42 30       	cpi	r20, 0x02	; 2
    4452:	c4 f0       	brlt	.+48     	; 0x4484 <itoa+0x3a>
    4454:	45 32       	cpi	r20, 0x25	; 37
    4456:	b4 f4       	brge	.+44     	; 0x4484 <itoa+0x3a>
    4458:	4a 30       	cpi	r20, 0x0A	; 10
    445a:	29 f4       	brne	.+10     	; 0x4466 <itoa+0x1c>
    445c:	97 fb       	bst	r25, 7
    445e:	1e f4       	brtc	.+6      	; 0x4466 <itoa+0x1c>
    4460:	90 95       	com	r25
    4462:	81 95       	neg	r24
    4464:	9f 4f       	sbci	r25, 0xFF	; 255
    4466:	64 2f       	mov	r22, r20
    4468:	77 27       	eor	r23, r23
    446a:	0e 94 da 21 	call	0x43b4	; 0x43b4 <__udivmodhi4>
    446e:	80 5d       	subi	r24, 0xD0	; 208
    4470:	8a 33       	cpi	r24, 0x3A	; 58
    4472:	0c f0       	brlt	.+2      	; 0x4476 <itoa+0x2c>
    4474:	89 5d       	subi	r24, 0xD9	; 217
    4476:	81 93       	st	Z+, r24
    4478:	cb 01       	movw	r24, r22
    447a:	00 97       	sbiw	r24, 0x00	; 0
    447c:	a1 f7       	brne	.-24     	; 0x4466 <itoa+0x1c>
    447e:	16 f4       	brtc	.+4      	; 0x4484 <itoa+0x3a>
    4480:	5d e2       	ldi	r21, 0x2D	; 45
    4482:	51 93       	st	Z+, r21
    4484:	10 82       	st	Z, r1
    4486:	c9 01       	movw	r24, r18
    4488:	0c 94 46 22 	jmp	0x448c	; 0x448c <strrev>

0000448c <strrev>:
    448c:	dc 01       	movw	r26, r24
    448e:	fc 01       	movw	r30, r24
    4490:	67 2f       	mov	r22, r23
    4492:	71 91       	ld	r23, Z+
    4494:	77 23       	and	r23, r23
    4496:	e1 f7       	brne	.-8      	; 0x4490 <strrev+0x4>
    4498:	32 97       	sbiw	r30, 0x02	; 2
    449a:	04 c0       	rjmp	.+8      	; 0x44a4 <strrev+0x18>
    449c:	7c 91       	ld	r23, X
    449e:	6d 93       	st	X+, r22
    44a0:	70 83       	st	Z, r23
    44a2:	62 91       	ld	r22, -Z
    44a4:	ae 17       	cp	r26, r30
    44a6:	bf 07       	cpc	r27, r31
    44a8:	c8 f3       	brcs	.-14     	; 0x449c <strrev+0x10>
    44aa:	08 95       	ret

000044ac <_exit>:
    44ac:	f8 94       	cli

000044ae <__stop_program>:
    44ae:	ff cf       	rjmp	.-2      	; 0x44ae <__stop_program>
